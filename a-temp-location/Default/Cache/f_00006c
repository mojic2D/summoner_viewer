define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/circle_border.dart', 'packages/flutter/src/painting/rounded_rectangle_border.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__stadium_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__circle_border$46dart, packages__flutter__src__painting__rounded_rectangle_border$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const circle_border = packages__flutter__src__painting__circle_border$46dart.src__painting__circle_border;
  const rounded_rectangle_border = packages__flutter__src__painting__rounded_rectangle_border$46dart.src__painting__rounded_rectangle_border;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var stadium_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var StadiumBorderL = () => (StadiumBorderL = dart.constFn(dart.legacy(stadium_border.StadiumBorder)))();
  var CircleBorderL = () => (CircleBorderL = dart.constFn(dart.legacy(circle_border.CircleBorder)))();
  var RoundedRectangleBorderL = () => (RoundedRectangleBorderL = dart.constFn(dart.legacy(rounded_rectangle_border.RoundedRectangleBorder)))();
  var BorderRadiusL = () => (BorderRadiusL = dart.constFn(dart.legacy(border_radius.BorderRadius)))();
  var _StadiumToCircleBorderL = () => (_StadiumToCircleBorderL = dart.constFn(dart.legacy(stadium_border._StadiumToCircleBorder)))();
  var _StadiumToRoundedRectangleBorderL = () => (_StadiumToRoundedRectangleBorderL = dart.constFn(dart.legacy(stadium_border._StadiumToRoundedRectangleBorder)))();
  const CT = Object.create(null);
  var L1 = "package:flutter/src/painting/stadium_border.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/painting/stadium_border.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.none",
        index: 0
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C0() {
      return C0 = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C1 || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C2 || CT.C2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.solid",
        index: 1
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C5 || CT.C5,
        [BorderRadius_bottomLeft]: C5 || CT.C5,
        [BorderRadius_topRight]: C5 || CT.C5,
        [BorderRadius_topLeft]: C5 || CT.C5
      });
    }
  }, false);
  var _name = dart.privateName(borders, "_name");
  var C1;
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var C2;
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var C0;
  var C3;
  stadium_border.StadiumBorder = class StadiumBorder extends borders.OutlinedBorder {
    get dimensions() {
      return new edge_insets.EdgeInsets.all(this.side.width);
    }
    scale(t) {
      return new stadium_border.StadiumBorder.new({side: this.side.scale(t)});
    }
    lerpFrom(a, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 45, 12, "t != null");
      if (StadiumBorderL().is(a)) return new stadium_border.StadiumBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t)});
      if (CircleBorderL().is(a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circleness: 1.0 - dart.notNull(t)});
      }
      if (RoundedRectangleBorderL().is(a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: BorderRadiusL().as(a.borderRadius), rectness: 1.0 - dart.notNull(t)});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 66, 12, "t != null");
      if (StadiumBorderL().is(b)) return new stadium_border.StadiumBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t)});
      if (CircleBorderL().is(b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circleness: t});
      }
      if (RoundedRectangleBorderL().is(b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: BorderRadiusL().as(b.borderRadius), rectness: t});
      }
      return super.lerpTo(b, t);
    }
    copyWith(opts) {
      let t0;
      let side = opts && 'side' in opts ? opts.side : null;
      return new stadium_border.StadiumBorder.new({side: (t0 = side, t0 == null ? this.side : t0)});
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let radius = new ui.Radius.circular(dart.notNull(rect.shortestSide) / 2.0);
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(new ui.RRect.fromRectAndRadius(rect, radius).deflate(this.side.width));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let radius = new ui.Radius.circular(dart.notNull(rect.shortestSide) / 2.0);
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(new ui.RRect.fromRectAndRadius(rect, radius));
        return t0;
      })();
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C1 || CT.C1:
        {
          break;
        }
        case C3 || CT.C3:
        {
          let radius = new ui.Radius.circular(dart.notNull(rect.shortestSide) / 2.0);
          canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, radius).deflate(dart.notNull(this.side.width) / 2.0), this.side.toPaint());
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return StadiumBorderL().is(other) && dart.equals(other.side, this.side);
    }
    get hashCode() {
      return dart.hashCode(this.side);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "StadiumBorder")) + "(" + dart.str(this.side) + ")";
    }
  };
  (stadium_border.StadiumBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C0 || CT.C0;
    if (!(side != null)) dart.assertFailed(null, L0, 33, 71, "side != null");
    stadium_border.StadiumBorder.__proto__.new.call(this, {side: side});
    ;
  }).prototype = stadium_border.StadiumBorder.prototype;
  dart.addTypeTests(stadium_border.StadiumBorder);
  dart.addTypeCaches(stadium_border.StadiumBorder);
  dart.setMethodSignature(stadium_border.StadiumBorder, () => ({
    __proto__: dart.getMethods(stadium_border.StadiumBorder.__proto__),
    scale: dart.fnType(dart.legacy(borders.ShapeBorder), [dart.legacy(core.double)]),
    copyWith: dart.fnType(dart.legacy(stadium_border.StadiumBorder), [], {side: dart.legacy(borders.BorderSide)}, {}),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(stadium_border.StadiumBorder, () => ({
    __proto__: dart.getGetters(stadium_border.StadiumBorder.__proto__),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(stadium_border.StadiumBorder, L1);
  dart.defineExtensionMethods(stadium_border.StadiumBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border.StadiumBorder, ['hashCode']);
  var _adjustRect = dart.privateName(stadium_border, "_adjustRect");
  var _adjustBorderRadius = dart.privateName(stadium_border, "_adjustBorderRadius");
  var circleness$ = dart.privateName(stadium_border, "_StadiumToCircleBorder.circleness");
  stadium_border._StadiumToCircleBorder = class _StadiumToCircleBorder extends borders.OutlinedBorder {
    get circleness() {
      return this[circleness$];
    }
    set circleness(value) {
      super.circleness = value;
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.all(this.side.width);
    }
    scale(t) {
      return new stadium_border._StadiumToCircleBorder.new({side: this.side.scale(t), circleness: t});
    }
    lerpFrom(a, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 161, 12, "t != null");
      if (StadiumBorderL().is(a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circleness: dart.notNull(this.circleness) * dart.notNull(t)});
      }
      if (CircleBorderL().is(a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circleness: dart.notNull(this.circleness) + (1.0 - dart.notNull(this.circleness)) * (1.0 - dart.notNull(t))});
      }
      if (_StadiumToCircleBorderL().is(a)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), circleness: ui.lerpDouble(a.circleness, this.circleness, t)});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 185, 12, "t != null");
      if (StadiumBorderL().is(b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circleness: dart.notNull(this.circleness) * (1.0 - dart.notNull(t))});
      }
      if (CircleBorderL().is(b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circleness: dart.notNull(this.circleness) + (1.0 - dart.notNull(this.circleness)) * dart.notNull(t)});
      }
      if (_StadiumToCircleBorderL().is(b)) {
        return new stadium_border._StadiumToCircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), circleness: ui.lerpDouble(this.circleness, b.circleness, t)});
      }
      return super.lerpTo(b, t);
    }
    [_adjustRect](rect) {
      if (this.circleness === 0.0 || rect.width == rect.height) return rect;
      if (dart.notNull(rect.width) < dart.notNull(rect.height)) {
        let delta = dart.notNull(this.circleness) * (dart.notNull(rect.height) - dart.notNull(rect.width)) / 2.0;
        return new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + delta, rect.right, dart.notNull(rect.bottom) - delta);
      } else {
        let delta = dart.notNull(this.circleness) * (dart.notNull(rect.width) - dart.notNull(rect.height)) / 2.0;
        return new ui.Rect.fromLTRB(dart.notNull(rect.left) + delta, rect.top, dart.notNull(rect.right) - delta, rect.bottom);
      }
    }
    [_adjustBorderRadius](rect) {
      return new border_radius.BorderRadius.circular(dart.notNull(rect.shortestSide) / 2.0);
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)).deflate(this.side.width));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)));
        return t0;
      })();
    }
    copyWith(opts) {
      let t0, t0$;
      let side = opts && 'side' in opts ? opts.side : null;
      let circleness = opts && 'circleness' in opts ? opts.circleness : null;
      return new stadium_border._StadiumToCircleBorder.new({side: (t0 = side, t0 == null ? this.side : t0), circleness: (t0$ = circleness, t0$ == null ? this.circleness : t0$)});
    }
    paint(canvas, rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C1 || CT.C1:
        {
          break;
        }
        case C3 || CT.C3:
        {
          let width = this.side.width;
          if (width === 0.0) {
            canvas.drawRRect(this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect)), this.side.toPaint());
          } else {
            let outer = this[_adjustBorderRadius](rect).toRRect(this[_adjustRect](rect));
            let inner = outer.deflate(width);
            let paint = (t0 = ui.Paint.new(), (() => {
              t0.color = this.side.color;
              return t0;
            })());
            canvas.drawDRRect(outer, inner, paint);
          }
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return _StadiumToCircleBorderL().is(other) && dart.equals(other.side, this.side) && other.circleness == this.circleness;
    }
    get hashCode() {
      return ui.hashValues(this.side, this.circleness);
    }
    toString() {
      return "StadiumBorder(" + dart.str(this.side) + ", " + dart.str((dart.notNull(this.circleness) * 100)[$toStringAsFixed](1)) + "% " + "of the way to being a CircleBorder)";
    }
  };
  (stadium_border._StadiumToCircleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C0 || CT.C0;
    let circleness = opts && 'circleness' in opts ? opts.circleness : 0;
    this[circleness$] = circleness;
    if (!(side != null)) dart.assertFailed(null, L0, 140, 15, "side != null");
    if (!(circleness != null)) dart.assertFailed(null, L0, 141, 15, "circleness != null");
    stadium_border._StadiumToCircleBorder.__proto__.new.call(this, {side: side});
    ;
  }).prototype = stadium_border._StadiumToCircleBorder.prototype;
  dart.addTypeTests(stadium_border._StadiumToCircleBorder);
  dart.addTypeCaches(stadium_border._StadiumToCircleBorder);
  dart.setMethodSignature(stadium_border._StadiumToCircleBorder, () => ({
    __proto__: dart.getMethods(stadium_border._StadiumToCircleBorder.__proto__),
    scale: dart.fnType(dart.legacy(borders.ShapeBorder), [dart.legacy(core.double)]),
    [_adjustRect]: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(ui.Rect)]),
    [_adjustBorderRadius]: dart.fnType(dart.legacy(border_radius.BorderRadius), [dart.legacy(ui.Rect)]),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    copyWith: dart.fnType(dart.legacy(stadium_border._StadiumToCircleBorder), [], {circleness: dart.legacy(core.double), side: dart.legacy(borders.BorderSide)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(stadium_border._StadiumToCircleBorder, () => ({
    __proto__: dart.getGetters(stadium_border._StadiumToCircleBorder.__proto__),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(stadium_border._StadiumToCircleBorder, L1);
  dart.setFieldSignature(stadium_border._StadiumToCircleBorder, () => ({
    __proto__: dart.getFields(stadium_border._StadiumToCircleBorder.__proto__),
    circleness: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(stadium_border._StadiumToCircleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border._StadiumToCircleBorder, ['hashCode']);
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var C5;
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var C4;
  var borderRadius$ = dart.privateName(stadium_border, "_StadiumToRoundedRectangleBorder.borderRadius");
  var rectness$ = dart.privateName(stadium_border, "_StadiumToRoundedRectangleBorder.rectness");
  stadium_border._StadiumToRoundedRectangleBorder = class _StadiumToRoundedRectangleBorder extends borders.OutlinedBorder {
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get rectness() {
      return this[rectness$];
    }
    set rectness(value) {
      super.rectness = value;
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.all(this.side.width);
    }
    scale(t) {
      return new stadium_border._StadiumToRoundedRectangleBorder.new({side: this.side.scale(t), borderRadius: this.borderRadius['*'](t), rectness: t});
    }
    lerpFrom(a, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 322, 12, "t != null");
      if (StadiumBorderL().is(a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, rectness: dart.notNull(this.rectness) * dart.notNull(t)});
      }
      if (RoundedRectangleBorderL().is(a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: this.borderRadius, rectness: dart.notNull(this.rectness) + (1.0 - dart.notNull(this.rectness)) * (1.0 - dart.notNull(t))});
      }
      if (_StadiumToRoundedRectangleBorderL().is(a)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), borderRadius: border_radius.BorderRadius.lerp(a.borderRadius, this.borderRadius, t), rectness: ui.lerpDouble(a.rectness, this.rectness, t)});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (!(t != null)) dart.assertFailed(null, L0, 349, 12, "t != null");
      if (StadiumBorderL().is(b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, rectness: dart.notNull(this.rectness) * (1.0 - dart.notNull(t))});
      }
      if (RoundedRectangleBorderL().is(b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: this.borderRadius, rectness: dart.notNull(this.rectness) + (1.0 - dart.notNull(this.rectness)) * dart.notNull(t)});
      }
      if (_StadiumToRoundedRectangleBorderL().is(b)) {
        return new stadium_border._StadiumToRoundedRectangleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), borderRadius: border_radius.BorderRadius.lerp(this.borderRadius, b.borderRadius, t), rectness: ui.lerpDouble(this.rectness, b.rectness, t)});
      }
      return super.lerpTo(b, t);
    }
    [_adjustBorderRadius](rect) {
      return border_radius.BorderRadius.lerp(this.borderRadius, new border_radius.BorderRadius.all(new ui.Radius.circular(dart.notNull(rect.shortestSide) / 2.0)), 1.0 - dart.notNull(this.rectness));
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this[_adjustBorderRadius](rect).toRRect(rect).deflate(this.side.width));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this[_adjustBorderRadius](rect).toRRect(rect));
        return t0;
      })();
    }
    copyWith(opts) {
      let t0, t0$, t0$0;
      let side = opts && 'side' in opts ? opts.side : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let rectness = opts && 'rectness' in opts ? opts.rectness : null;
      return new stadium_border._StadiumToRoundedRectangleBorder.new({side: (t0 = side, t0 == null ? this.side : t0), borderRadius: (t0$ = borderRadius, t0$ == null ? this.borderRadius : t0$), rectness: (t0$0 = rectness, t0$0 == null ? this.rectness : t0$0)});
    }
    paint(canvas, rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C1 || CT.C1:
        {
          break;
        }
        case C3 || CT.C3:
        {
          let width = this.side.width;
          if (width === 0.0) {
            canvas.drawRRect(this[_adjustBorderRadius](rect).toRRect(rect), this.side.toPaint());
          } else {
            let outer = this[_adjustBorderRadius](rect).toRRect(rect);
            let inner = outer.deflate(width);
            let paint = (t0 = ui.Paint.new(), (() => {
              t0.color = this.side.color;
              return t0;
            })());
            canvas.drawDRRect(outer, inner, paint);
          }
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return _StadiumToRoundedRectangleBorderL().is(other) && dart.equals(other.side, this.side) && dart.equals(other.borderRadius, this.borderRadius) && other.rectness == this.rectness;
    }
    get hashCode() {
      return ui.hashValues(this.side, this.borderRadius, this.rectness);
    }
    toString() {
      return "StadiumBorder(" + dart.str(this.side) + ", " + dart.str(this.borderRadius) + ", " + dart.str((dart.notNull(this.rectness) * 100)[$toStringAsFixed](1)) + "% of the way to being a " + "RoundedRectangleBorder)";
    }
  };
  (stadium_border._StadiumToRoundedRectangleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C0 || CT.C0;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C4 || CT.C4;
    let rectness = opts && 'rectness' in opts ? opts.rectness : 0;
    this[borderRadius$] = borderRadius;
    this[rectness$] = rectness;
    if (!(side != null)) dart.assertFailed(null, L0, 297, 15, "side != null");
    if (!(borderRadius != null)) dart.assertFailed(null, L0, 298, 15, "borderRadius != null");
    if (!(rectness != null)) dart.assertFailed(null, L0, 299, 15, "rectness != null");
    stadium_border._StadiumToRoundedRectangleBorder.__proto__.new.call(this, {side: side});
    ;
  }).prototype = stadium_border._StadiumToRoundedRectangleBorder.prototype;
  dart.addTypeTests(stadium_border._StadiumToRoundedRectangleBorder);
  dart.addTypeCaches(stadium_border._StadiumToRoundedRectangleBorder);
  dart.setMethodSignature(stadium_border._StadiumToRoundedRectangleBorder, () => ({
    __proto__: dart.getMethods(stadium_border._StadiumToRoundedRectangleBorder.__proto__),
    scale: dart.fnType(dart.legacy(borders.ShapeBorder), [dart.legacy(core.double)]),
    [_adjustBorderRadius]: dart.fnType(dart.legacy(border_radius.BorderRadius), [dart.legacy(ui.Rect)]),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    copyWith: dart.fnType(dart.legacy(stadium_border._StadiumToRoundedRectangleBorder), [], {borderRadius: dart.legacy(border_radius.BorderRadius), rectness: dart.legacy(core.double), side: dart.legacy(borders.BorderSide)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(stadium_border._StadiumToRoundedRectangleBorder, () => ({
    __proto__: dart.getGetters(stadium_border._StadiumToRoundedRectangleBorder.__proto__),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(stadium_border._StadiumToRoundedRectangleBorder, L1);
  dart.setFieldSignature(stadium_border._StadiumToRoundedRectangleBorder, () => ({
    __proto__: dart.getFields(stadium_border._StadiumToRoundedRectangleBorder.__proto__),
    borderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadius)),
    rectness: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(stadium_border._StadiumToRoundedRectangleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(stadium_border._StadiumToRoundedRectangleBorder, ['hashCode']);
  dart.trackLibraries("packages/flutter/src/painting/stadium_border.dart", {
    "package:flutter/src/painting/stadium_border.dart": stadium_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stadium_border.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/painting/stadium_border.dart.lib.js"}');
  // Exports:
  return {
    src__painting__stadium_border: stadium_border
  };
}));

//# sourceMappingURL=stadium_border.dart.lib.js.map
