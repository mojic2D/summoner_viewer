define(['dart_sdk', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart'], (function load__packages__flutter__src__gestures__arena_dart(dart_sdk, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  var arena = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $map = dartx.map;
  var $join = dartx.join;
  var $putIfAbsent = dartx.putIfAbsent;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $containsKey = dartx.containsKey;
  var $padRight = dartx.padRight;
  var GestureDispositionL = () => (GestureDispositionL = dart.constFn(dart.legacy(arena.GestureDisposition)))();
  var GestureArenaMemberL = () => (GestureArenaMemberL = dart.constFn(dart.legacy(arena.GestureArenaMember)))();
  var JSArrayOfGestureArenaMemberL = () => (JSArrayOfGestureArenaMemberL = dart.constFn(_interceptors.JSArray$(GestureArenaMemberL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var GestureArenaMemberLToStringL = () => (GestureArenaMemberLToStringL = dart.constFn(dart.fnType(StringL(), [GestureArenaMemberL()])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var _GestureArenaL = () => (_GestureArenaL = dart.constFn(dart.legacy(arena._GestureArena)))();
  var IdentityMapOfintL$_GestureArenaL = () => (IdentityMapOfintL$_GestureArenaL = dart.constFn(_js_helper.IdentityMap$(intL(), _GestureArenaL())))();
  var VoidTo_GestureArenaL = () => (VoidTo_GestureArenaL = dart.constFn(dart.fnType(_GestureArenaL(), [])))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  const CT = Object.create(null);
  var L0 = "package:flutter/src/gestures/arena.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/gestures/arena.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: arena.GestureDisposition.prototype,
        [_name$]: "GestureDisposition.accepted",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: arena.GestureDisposition.prototype,
        [_name$]: "GestureDisposition.rejected",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.constList([C0 || CT.C0, C1 || CT.C1], GestureDispositionL());
    }
  }, false);
  var _name$ = dart.privateName(arena, "_name");
  var C0;
  var C1;
  var C2;
  arena.GestureDisposition = class GestureDisposition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (arena.GestureDisposition.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = arena.GestureDisposition.prototype;
  dart.addTypeTests(arena.GestureDisposition);
  dart.addTypeCaches(arena.GestureDisposition);
  dart.setMethodSignature(arena.GestureDisposition, () => ({
    __proto__: dart.getMethods(arena.GestureDisposition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(arena.GestureDisposition, L0);
  dart.setFieldSignature(arena.GestureDisposition, () => ({
    __proto__: dart.getFields(arena.GestureDisposition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(arena.GestureDisposition, ['toString']);
  arena.GestureDisposition.accepted = C0 || CT.C0;
  arena.GestureDisposition.rejected = C1 || CT.C1;
  arena.GestureDisposition.values = C2 || CT.C2;
  arena.GestureArenaMember = class GestureArenaMember extends core.Object {};
  (arena.GestureArenaMember.new = function() {
    ;
  }).prototype = arena.GestureArenaMember.prototype;
  dart.addTypeTests(arena.GestureArenaMember);
  dart.addTypeCaches(arena.GestureArenaMember);
  dart.setLibraryUri(arena.GestureArenaMember, L0);
  var _arena$ = dart.privateName(arena, "_arena");
  var _pointer$ = dart.privateName(arena, "_pointer");
  var _member$ = dart.privateName(arena, "_member");
  var _resolve = dart.privateName(arena, "_resolve");
  arena.GestureArenaEntry = class GestureArenaEntry extends core.Object {
    resolve(disposition) {
      this[_arena$][_resolve](this[_pointer$], this[_member$], disposition);
    }
  };
  (arena.GestureArenaEntry.__ = function(_arena, _pointer, _member) {
    this[_arena$] = _arena;
    this[_pointer$] = _pointer;
    this[_member$] = _member;
    ;
  }).prototype = arena.GestureArenaEntry.prototype;
  dart.addTypeTests(arena.GestureArenaEntry);
  dart.addTypeCaches(arena.GestureArenaEntry);
  dart.setMethodSignature(arena.GestureArenaEntry, () => ({
    __proto__: dart.getMethods(arena.GestureArenaEntry.__proto__),
    resolve: dart.fnType(dart.void, [dart.legacy(arena.GestureDisposition)])
  }));
  dart.setLibraryUri(arena.GestureArenaEntry, L0);
  dart.setFieldSignature(arena.GestureArenaEntry, () => ({
    __proto__: dart.getFields(arena.GestureArenaEntry.__proto__),
    [_arena$]: dart.finalFieldType(dart.legacy(arena.GestureArenaManager)),
    [_pointer$]: dart.finalFieldType(dart.legacy(core.int)),
    [_member$]: dart.finalFieldType(dart.legacy(arena.GestureArenaMember))
  }));
  arena._GestureArena = class _GestureArena extends core.Object {
    add(member) {
      if (!dart.test(this.isOpen)) dart.assertFailed(null, L1, 71, 12, "isOpen");
      this.members[$add](member);
    }
    toString() {
      let buffer = new core.StringBuffer.new();
      if (dart.test(this.members[$isEmpty])) {
        buffer.write("<empty>");
      } else {
        buffer.write(this.members[$map](StringL(), dart.fn(member => {
          if (dart.equals(member, this.eagerWinner)) return dart.str(member) + " (eager winner)";
          return dart.str(member);
        }, GestureArenaMemberLToStringL()))[$join](", "));
      }
      if (dart.test(this.isOpen)) buffer.write(" [open]");
      if (dart.test(this.isHeld)) buffer.write(" [held]");
      if (dart.test(this.hasPendingSweep)) buffer.write(" [hasPendingSweep]");
      return buffer.toString();
    }
  };
  (arena._GestureArena.new = function() {
    this.members = JSArrayOfGestureArenaMemberL().of([]);
    this.isOpen = true;
    this.isHeld = false;
    this.hasPendingSweep = false;
    this.eagerWinner = null;
    ;
  }).prototype = arena._GestureArena.prototype;
  dart.addTypeTests(arena._GestureArena);
  dart.addTypeCaches(arena._GestureArena);
  dart.setMethodSignature(arena._GestureArena, () => ({
    __proto__: dart.getMethods(arena._GestureArena.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(arena.GestureArenaMember)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(arena._GestureArena, L0);
  dart.setFieldSignature(arena._GestureArena, () => ({
    __proto__: dart.getFields(arena._GestureArena.__proto__),
    members: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(arena.GestureArenaMember)))),
    isOpen: dart.fieldType(dart.legacy(core.bool)),
    isHeld: dart.fieldType(dart.legacy(core.bool)),
    hasPendingSweep: dart.fieldType(dart.legacy(core.bool)),
    eagerWinner: dart.fieldType(dart.legacy(arena.GestureArenaMember))
  }));
  dart.defineExtensionMethods(arena._GestureArena, ['toString']);
  var _arenas = dart.privateName(arena, "_arenas");
  var _debugLogDiagnostic = dart.privateName(arena, "_debugLogDiagnostic");
  var _tryToResolveArena = dart.privateName(arena, "_tryToResolveArena");
  var _resolveInFavorOf = dart.privateName(arena, "_resolveInFavorOf");
  var _resolveByDefault = dart.privateName(arena, "_resolveByDefault");
  arena.GestureArenaManager = class GestureArenaManager extends core.Object {
    add(pointer, member) {
      let state = this[_arenas][$putIfAbsent](pointer, dart.fn(() => {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "★ Opening new gesture arena."))) dart.assertFailed(null, L1, 110, 14, "_debugLogDiagnostic(pointer, '★ Opening new gesture arena.')");
        return new arena._GestureArena.new();
      }, VoidTo_GestureArenaL()));
      state.add(member);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Adding: " + dart.str(member)))) dart.assertFailed(null, L1, 114, 12, "_debugLogDiagnostic(pointer, 'Adding: $member')");
      return new arena.GestureArenaEntry.__(this, pointer, member);
    }
    close(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isOpen = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Closing", state))) dart.assertFailed(null, L1, 126, 12, "_debugLogDiagnostic(pointer, 'Closing', state)");
      this[_tryToResolveArena](pointer, state);
    }
    sweep(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, L1, 147, 12, "!state.isOpen");
      if (dart.test(state.isHeld)) {
        state.hasPendingSweep = true;
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Delaying sweep", state))) dart.assertFailed(null, L1, 150, 14, "_debugLogDiagnostic(pointer, 'Delaying sweep', state)");
        return;
      }
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Sweeping", state))) dart.assertFailed(null, L1, 153, 12, "_debugLogDiagnostic(pointer, 'Sweeping', state)");
      this[_arenas][$remove](pointer);
      if (dart.test(state.members[$isNotEmpty])) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, L1, 157, 14, "_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}')");
        state.members[$first].acceptGesture(pointer);
        for (let i = 1; i < dart.notNull(state.members[$length]); i = i + 1)
          state.members[$_get](i).rejectGesture(pointer);
      }
    }
    hold(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = true;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Holding", state))) dart.assertFailed(null, L1, 182, 12, "_debugLogDiagnostic(pointer, 'Holding', state)");
    }
    release(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Releasing", state))) dart.assertFailed(null, L1, 199, 12, "_debugLogDiagnostic(pointer, 'Releasing', state)");
      if (dart.test(state.hasPendingSweep)) this.sweep(pointer);
    }
    [_resolve](pointer, member, disposition) {
      let t0;
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!dart.test(this[_debugLogDiagnostic](pointer, (disposition == arena.GestureDisposition.accepted ? "Accepting" : "Rejecting") + ": " + dart.str(member)))) dart.assertFailed(null, L1, 211, 12, "_debugLogDiagnostic(pointer, '${ disposition == GestureDisposition.accepted ? \"Accepting\" : \"Rejecting\" }: $member')");
      if (!dart.test(state.members[$contains](member))) dart.assertFailed(null, L1, 212, 12, "state.members.contains(member)");
      if (disposition == arena.GestureDisposition.rejected) {
        state.members[$remove](member);
        member.rejectGesture(pointer);
        if (!dart.test(state.isOpen)) this[_tryToResolveArena](pointer, state);
      } else {
        if (!(disposition == arena.GestureDisposition.accepted)) dart.assertFailed(null, L1, 219, 14, "disposition == GestureDisposition.accepted");
        if (dart.test(state.isOpen)) {
          t0 = state;
          t0.eagerWinner == null ? t0.eagerWinner = member : null;
        } else {
          if (!dart.test(this[_debugLogDiagnostic](pointer, "Self-declared winner: " + dart.str(member)))) dart.assertFailed(null, L1, 223, 16, "_debugLogDiagnostic(pointer, 'Self-declared winner: $member')");
          this[_resolveInFavorOf](pointer, state, member);
        }
      }
    }
    [_tryToResolveArena](pointer, state) {
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, L1, 230, 12, "_arenas[pointer] == state");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, L1, 231, 12, "!state.isOpen");
      if (state.members[$length] === 1) {
        async.scheduleMicrotask(dart.fn(() => this[_resolveByDefault](pointer, state), VoidTovoid()));
      } else if (dart.test(state.members[$isEmpty])) {
        this[_arenas][$remove](pointer);
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Arena empty."))) dart.assertFailed(null, L1, 236, 14, "_debugLogDiagnostic(pointer, 'Arena empty.')");
      } else if (state.eagerWinner != null) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Eager winner: " + dart.str(state.eagerWinner)))) dart.assertFailed(null, L1, 238, 14, "_debugLogDiagnostic(pointer, 'Eager winner: ${state.eagerWinner}')");
        this[_resolveInFavorOf](pointer, state, state.eagerWinner);
      }
    }
    [_resolveByDefault](pointer, state) {
      if (!dart.test(this[_arenas][$containsKey](pointer))) return;
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, L1, 246, 12, "_arenas[pointer] == state");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, L1, 247, 12, "!state.isOpen");
      let members = state.members;
      if (!(members[$length] === 1)) dart.assertFailed(null, L1, 249, 12, "members.length == 1");
      this[_arenas][$remove](pointer);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Default winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, L1, 251, 12, "_debugLogDiagnostic(pointer, 'Default winner: ${state.members.first}')");
      state.members[$first].acceptGesture(pointer);
    }
    [_resolveInFavorOf](pointer, state, member) {
      if (!dart.equals(state, this[_arenas][$_get](pointer))) dart.assertFailed(null, L1, 256, 12, "state == _arenas[pointer]");
      if (!(state != null)) dart.assertFailed(null, L1, 257, 12, "state != null");
      if (!(state.eagerWinner == null || dart.equals(state.eagerWinner, member))) dart.assertFailed(null, L1, 258, 12, "state.eagerWinner == null || state.eagerWinner == member");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, L1, 259, 12, "!state.isOpen");
      this[_arenas][$remove](pointer);
      for (let rejectedMember of state.members) {
        if (!dart.equals(rejectedMember, member)) rejectedMember.rejectGesture(pointer);
      }
      member.acceptGesture(pointer);
    }
    [_debugLogDiagnostic](pointer, message, state = null) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug.debugPrintGestureArenaDiagnostics)) {
          let count = state != null ? state.members[$length] : null;
          let s = count !== 1 ? "s" : "";
          print.debugPrint("Gesture arena " + dart.str(dart.toString(pointer)[$padRight](4)) + " ❙ " + dart.str(message) + (count != null ? " with " + dart.str(count) + " member" + s + "." : ""));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 269, 12, "() {\r\n      if (debugPrintGestureArenaDiagnostics) {\r\n        final int count = state != null ? state.members.length : null;\r\n        final String s = count != 1 ? 's' : '';\r\n        debugPrint('Gesture arena ${pointer.toString().padRight(4)} ❙ $message${ count != null ? \" with $count member$s.\" : \"\"}');\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
  };
  (arena.GestureArenaManager.new = function() {
    this[_arenas] = new (IdentityMapOfintL$_GestureArenaL()).new();
    ;
  }).prototype = arena.GestureArenaManager.prototype;
  dart.addTypeTests(arena.GestureArenaManager);
  dart.addTypeCaches(arena.GestureArenaManager);
  dart.setMethodSignature(arena.GestureArenaManager, () => ({
    __proto__: dart.getMethods(arena.GestureArenaManager.__proto__),
    add: dart.fnType(dart.legacy(arena.GestureArenaEntry), [dart.legacy(core.int), dart.legacy(arena.GestureArenaMember)]),
    close: dart.fnType(dart.void, [dart.legacy(core.int)]),
    sweep: dart.fnType(dart.void, [dart.legacy(core.int)]),
    hold: dart.fnType(dart.void, [dart.legacy(core.int)]),
    release: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_resolve]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(arena.GestureArenaMember), dart.legacy(arena.GestureDisposition)]),
    [_tryToResolveArena]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(arena._GestureArena)]),
    [_resolveByDefault]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(arena._GestureArena)]),
    [_resolveInFavorOf]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(arena._GestureArena), dart.legacy(arena.GestureArenaMember)]),
    [_debugLogDiagnostic]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int), dart.legacy(core.String)], [dart.legacy(arena._GestureArena)])
  }));
  dart.setLibraryUri(arena.GestureArenaManager, L0);
  dart.setFieldSignature(arena.GestureArenaManager, () => ({
    __proto__: dart.getFields(arena.GestureArenaManager.__proto__),
    [_arenas]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(arena._GestureArena))))
  }));
  dart.trackLibraries("packages/flutter/src/gestures/arena.dart", {
    "package:flutter/src/gestures/arena.dart": arena
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["arena.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/gestures/arena.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__arena: arena
  };
}));

//# sourceMappingURL=arena.dart.lib.js.map
