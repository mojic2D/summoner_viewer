define(['dart_sdk', 'packages/flutter/src/gestures/multidrag.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/gestures/drag.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/services/haptic_feedback.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/gestures/hit_test.dart'], (function load__packages__flutter__src__widgets__drag_target_dart(dart_sdk, packages__flutter__src__gestures__multidrag$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__gestures__drag$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__services__haptic_feedback$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__gestures__hit_test$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const multidrag = packages__flutter__src__gestures__multidrag$46dart.src__gestures__multidrag;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const overlay = packages__flutter__src__widgets__widget_span$46dart.src__widgets__overlay;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const drag = packages__flutter__src__gestures__drag$46dart.src__gestures__drag;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const haptic_feedback = packages__flutter__src__services__haptic_feedback$46dart.src__services__haptic_feedback;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  var drag_target = Object.create(dart.library);
  var $toString = dartx.toString;
  var $contains = dartx.contains;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  var $iterator = dartx.iterator;
  var $_get = dartx._get;
  var $firstWhere = dartx.firstWhere;
  var $clear = dartx.clear;
  var $map = dartx.map;
  var DragAnchorL = () => (DragAnchorL = dart.constFn(dart.legacy(drag_target.DragAnchor)))();
  var DragL = () => (DragL = dart.constFn(dart.legacy(drag.Drag)))();
  var OffsetL = () => (OffsetL = dart.constFn(dart.legacy(ui.Offset)))();
  var OffsetLToDragL = () => (OffsetLToDragL = dart.constFn(dart.fnType(DragL(), [OffsetL()])))();
  var RenderBoxL = () => (RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var VelocityL = () => (VelocityL = dart.constFn(dart.legacy(velocity_tracker.Velocity)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VelocityLAndOffsetLAndboolLToNullN = () => (VelocityLAndOffsetLAndboolLToNullN = dart.constFn(dart.fnType(core.Null, [VelocityL(), OffsetL(), boolL()])))();
  var _LocationL = () => (_LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var _DragAvatarOfObjectL = () => (_DragAvatarOfObjectL = dart.constFn(drag_target._DragAvatar$(ObjectL())))();
  var _DragAvatarLOfObjectL = () => (_DragAvatarLOfObjectL = dart.constFn(dart.legacy(_DragAvatarOfObjectL())))();
  var JSArrayOf_DragAvatarLOfObjectL = () => (JSArrayOf_DragAvatarLOfObjectL = dart.constFn(_interceptors.JSArray$(_DragAvatarLOfObjectL())))();
  var WidgetL = () => (WidgetL = dart.constFn(dart.legacy(framework.Widget)))();
  var BuildContextL = () => (BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var _DragEndKindL = () => (_DragEndKindL = dart.constFn(dart.legacy(drag_target._DragEndKind)))();
  var RenderMetaDataL = () => (RenderMetaDataL = dart.constFn(dart.legacy(proxy_box.RenderMetaData)))();
  const CT = Object.create(null);
  var L0 = "package:flutter/src/widgets/drag_target.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/widgets/drag_target.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: drag_target.DragAnchor.prototype,
        [_name$]: "DragAnchor.child",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: drag_target.DragAnchor.prototype,
        [_name$]: "DragAnchor.pointer",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.constList([C0 || CT.C0, C1 || CT.C1], DragAnchorL());
    },
    get C3() {
      return C3 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPointerDown",
        [_Location_column]: 7,
        [_Location_line]: 431,
        [_Location_file]: null
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 432,
        [_Location_file]: null
      });
    },
    get C7() {
      return C7 = dart.constList([C8 || CT.C8, C9 || CT.C9], _LocationL());
    },
    get C6() {
      return C6 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C7 || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 430,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/drag_target.dart"
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "metaData",
        [_Location_column]: 7,
        [_Location_line]: 595,
        [_Location_file]: null
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "behavior",
        [_Location_column]: 7,
        [_Location_line]: 596,
        [_Location_file]: null
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 597,
        [_Location_file]: null
      });
    },
    get C11() {
      return C11 = dart.constList([C12 || CT.C12, C13 || CT.C13, C14 || CT.C14], _LocationL());
    },
    get C10() {
      return C10 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C11 || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 594,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/drag_target.dart"
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: drag_target._DragEndKind.prototype,
        [_name$]: "_DragEndKind.dropped",
        index: 0
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: drag_target._DragEndKind.prototype,
        [_name$]: "_DragEndKind.canceled",
        index: 1
      });
    },
    get C17() {
      return C17 = dart.constList([C15 || CT.C15, C16 || CT.C16], _DragEndKindL());
    },
    get C20() {
      return C20 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 744,
        [_Location_file]: null
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "ignoringSemantics",
        [_Location_column]: 9,
        [_Location_line]: 745,
        [_Location_file]: null
      });
    },
    get C19() {
      return C19 = dart.constList([C20 || CT.C20, C21 || CT.C21], _LocationL());
    },
    get C18() {
      return C18 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C19 || CT.C19,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 743,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/drag_target.dart"
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 741,
        [_Location_file]: null
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 742,
        [_Location_file]: null
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 743,
        [_Location_file]: null
      });
    },
    get C23() {
      return C23 = dart.constList([C24 || CT.C24, C25 || CT.C25, C26 || CT.C26], _LocationL());
    },
    get C22() {
      return C22 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C23 || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 740,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/drag_target.dart"
      });
    }
  }, false);
  var _name$ = dart.privateName(drag_target, "_name");
  var C0;
  var C1;
  var C2;
  drag_target.DragAnchor = class DragAnchor extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (drag_target.DragAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = drag_target.DragAnchor.prototype;
  dart.addTypeTests(drag_target.DragAnchor);
  dart.addTypeCaches(drag_target.DragAnchor);
  dart.setMethodSignature(drag_target.DragAnchor, () => ({
    __proto__: dart.getMethods(drag_target.DragAnchor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(drag_target.DragAnchor, L0);
  dart.setFieldSignature(drag_target.DragAnchor, () => ({
    __proto__: dart.getFields(drag_target.DragAnchor.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(drag_target.DragAnchor, ['toString']);
  drag_target.DragAnchor.child = C0 || CT.C0;
  drag_target.DragAnchor.pointer = C1 || CT.C1;
  drag_target.DragAnchor.values = C2 || CT.C2;
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C3;
  var _name = dart.privateName(basic_types, "_name");
  var C4;
  var C5;
  const _is_Draggable_default = Symbol('_is_Draggable_default');
  var data$ = dart.privateName(drag_target, "Draggable.data");
  var axis$ = dart.privateName(drag_target, "Draggable.axis");
  var child$ = dart.privateName(drag_target, "Draggable.child");
  var childWhenDragging$ = dart.privateName(drag_target, "Draggable.childWhenDragging");
  var feedback$ = dart.privateName(drag_target, "Draggable.feedback");
  var feedbackOffset$ = dart.privateName(drag_target, "Draggable.feedbackOffset");
  var dragAnchor$ = dart.privateName(drag_target, "Draggable.dragAnchor");
  var ignoringFeedbackSemantics$ = dart.privateName(drag_target, "Draggable.ignoringFeedbackSemantics");
  var affinity$ = dart.privateName(drag_target, "Draggable.affinity");
  var maxSimultaneousDrags$ = dart.privateName(drag_target, "Draggable.maxSimultaneousDrags");
  var onDragStarted$ = dart.privateName(drag_target, "Draggable.onDragStarted");
  var onDraggableCanceled$ = dart.privateName(drag_target, "Draggable.onDraggableCanceled");
  var onDragCompleted$ = dart.privateName(drag_target, "Draggable.onDragCompleted");
  var onDragEnd$ = dart.privateName(drag_target, "Draggable.onDragEnd");
  drag_target.Draggable$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DraggableStateOfTL = () => (_DraggableStateOfTL = dart.constFn(drag_target._DraggableState$(TL())))();
    class Draggable extends framework.StatefulWidget {
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get axis() {
        return this[axis$];
      }
      set axis(value) {
        super.axis = value;
      }
      get child() {
        return this[child$];
      }
      set child(value) {
        super.child = value;
      }
      get childWhenDragging() {
        return this[childWhenDragging$];
      }
      set childWhenDragging(value) {
        super.childWhenDragging = value;
      }
      get feedback() {
        return this[feedback$];
      }
      set feedback(value) {
        super.feedback = value;
      }
      get feedbackOffset() {
        return this[feedbackOffset$];
      }
      set feedbackOffset(value) {
        super.feedbackOffset = value;
      }
      get dragAnchor() {
        return this[dragAnchor$];
      }
      set dragAnchor(value) {
        super.dragAnchor = value;
      }
      get ignoringFeedbackSemantics() {
        return this[ignoringFeedbackSemantics$];
      }
      set ignoringFeedbackSemantics(value) {
        super.ignoringFeedbackSemantics = value;
      }
      get affinity() {
        return this[affinity$];
      }
      set affinity(value) {
        super.affinity = value;
      }
      get maxSimultaneousDrags() {
        return this[maxSimultaneousDrags$];
      }
      set maxSimultaneousDrags(value) {
        super.maxSimultaneousDrags = value;
      }
      get onDragStarted() {
        return this[onDragStarted$];
      }
      set onDragStarted(value) {
        super.onDragStarted = value;
      }
      get onDraggableCanceled() {
        return this[onDraggableCanceled$];
      }
      set onDraggableCanceled(value) {
        super.onDraggableCanceled = value;
      }
      get onDragCompleted() {
        return this[onDragCompleted$];
      }
      set onDragCompleted(value) {
        super.onDragCompleted = value;
      }
      get onDragEnd() {
        return this[onDragEnd$];
      }
      set onDragEnd(value) {
        super.onDragEnd = value;
      }
      createRecognizer(onStart) {
        let t0, t0$, t0$0;
        switch (this.affinity) {
          case C4 || CT.C4:
          {
            t0 = new multidrag.HorizontalMultiDragGestureRecognizer.new();
            return (() => {
              t0.onStart = onStart;
              return t0;
            })();
          }
          case C5 || CT.C5:
          {
            t0$ = new multidrag.VerticalMultiDragGestureRecognizer.new();
            return (() => {
              t0$.onStart = onStart;
              return t0$;
            })();
          }
        }
        t0$0 = new multidrag.ImmediateMultiDragGestureRecognizer.new();
        return (() => {
          t0$0.onStart = onStart;
          return t0$0;
        })();
      }
      createState() {
        return new (_DraggableStateOfTL()).new();
      }
    }
    (Draggable.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let feedback = opts && 'feedback' in opts ? opts.feedback : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let axis = opts && 'axis' in opts ? opts.axis : null;
      let childWhenDragging = opts && 'childWhenDragging' in opts ? opts.childWhenDragging : null;
      let feedbackOffset = opts && 'feedbackOffset' in opts ? opts.feedbackOffset : C3 || CT.C3;
      let dragAnchor = opts && 'dragAnchor' in opts ? opts.dragAnchor : C0 || CT.C0;
      let affinity = opts && 'affinity' in opts ? opts.affinity : null;
      let maxSimultaneousDrags = opts && 'maxSimultaneousDrags' in opts ? opts.maxSimultaneousDrags : null;
      let onDragStarted = opts && 'onDragStarted' in opts ? opts.onDragStarted : null;
      let onDraggableCanceled = opts && 'onDraggableCanceled' in opts ? opts.onDraggableCanceled : null;
      let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
      let onDragCompleted = opts && 'onDragCompleted' in opts ? opts.onDragCompleted : null;
      let ignoringFeedbackSemantics = opts && 'ignoringFeedbackSemantics' in opts ? opts.ignoringFeedbackSemantics : true;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[child$] = child;
      this[feedback$] = feedback;
      this[data$] = data;
      this[axis$] = axis;
      this[childWhenDragging$] = childWhenDragging;
      this[feedbackOffset$] = feedbackOffset;
      this[dragAnchor$] = dragAnchor;
      this[affinity$] = affinity;
      this[maxSimultaneousDrags$] = maxSimultaneousDrags;
      this[onDragStarted$] = onDragStarted;
      this[onDraggableCanceled$] = onDraggableCanceled;
      this[onDragEnd$] = onDragEnd;
      this[onDragCompleted$] = onDragCompleted;
      this[ignoringFeedbackSemantics$] = ignoringFeedbackSemantics;
      if (!(child != null)) dart.assertFailed(null, L1, 124, 15, "child != null");
      if (!(feedback != null)) dart.assertFailed(null, L1, 125, 15, "feedback != null");
      if (!(ignoringFeedbackSemantics != null)) dart.assertFailed(null, L1, 126, 15, "ignoringFeedbackSemantics != null");
      if (!(maxSimultaneousDrags == null || dart.notNull(maxSimultaneousDrags) >= 0)) dart.assertFailed(null, L1, 127, 15, "maxSimultaneousDrags == null || maxSimultaneousDrags >= 0");
      Draggable.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Draggable.prototype;
    dart.addTypeTests(Draggable);
    Draggable.prototype[_is_Draggable_default] = true;
    dart.addTypeCaches(Draggable);
    dart.setMethodSignature(Draggable, () => ({
      __proto__: dart.getMethods(Draggable.__proto__),
      createRecognizer: dart.fnType(dart.legacy(multidrag.MultiDragGestureRecognizer$(dart.legacy(multidrag.MultiDragPointerState))), [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))]),
      createState: dart.fnType(dart.legacy(drag_target._DraggableState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(Draggable, L0);
    dart.setFieldSignature(Draggable, () => ({
      __proto__: dart.getFields(Draggable.__proto__),
      data: dart.finalFieldType(dart.legacy(T)),
      axis: dart.finalFieldType(dart.legacy(basic_types.Axis)),
      child: dart.finalFieldType(dart.legacy(framework.Widget)),
      childWhenDragging: dart.finalFieldType(dart.legacy(framework.Widget)),
      feedback: dart.finalFieldType(dart.legacy(framework.Widget)),
      feedbackOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
      dragAnchor: dart.finalFieldType(dart.legacy(drag_target.DragAnchor)),
      ignoringFeedbackSemantics: dart.finalFieldType(dart.legacy(core.bool)),
      affinity: dart.finalFieldType(dart.legacy(basic_types.Axis)),
      maxSimultaneousDrags: dart.finalFieldType(dart.legacy(core.int)),
      onDragStarted: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onDraggableCanceled: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(velocity_tracker.Velocity), dart.legacy(ui.Offset)]))),
      onDragCompleted: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onDragEnd: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_target.DraggableDetails)])))
    }));
    return Draggable;
  });
  drag_target.Draggable = drag_target.Draggable$();
  dart.addTypeTests(drag_target.Draggable, _is_Draggable_default);
  const _is_LongPressDraggable_default = Symbol('_is_LongPressDraggable_default');
  var hapticFeedbackOnStart$ = dart.privateName(drag_target, "LongPressDraggable.hapticFeedbackOnStart");
  drag_target.LongPressDraggable$ = dart.generic(T => {
    class LongPressDraggable extends drag_target.Draggable$(dart.legacy(T)) {
      get hapticFeedbackOnStart() {
        return this[hapticFeedbackOnStart$];
      }
      set hapticFeedbackOnStart(value) {
        super.hapticFeedbackOnStart = value;
      }
      createRecognizer(onStart) {
        let t0;
        t0 = new multidrag.DelayedMultiDragGestureRecognizer.new();
        return (() => {
          t0.onStart = dart.fn(position => {
            let result = onStart(position);
            if (result != null && dart.test(this.hapticFeedbackOnStart)) haptic_feedback.HapticFeedback.selectionClick();
            return result;
          }, OffsetLToDragL());
          return t0;
        })();
      }
    }
    (LongPressDraggable.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let feedback = opts && 'feedback' in opts ? opts.feedback : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let axis = opts && 'axis' in opts ? opts.axis : null;
      let childWhenDragging = opts && 'childWhenDragging' in opts ? opts.childWhenDragging : null;
      let feedbackOffset = opts && 'feedbackOffset' in opts ? opts.feedbackOffset : C3 || CT.C3;
      let dragAnchor = opts && 'dragAnchor' in opts ? opts.dragAnchor : C0 || CT.C0;
      let maxSimultaneousDrags = opts && 'maxSimultaneousDrags' in opts ? opts.maxSimultaneousDrags : null;
      let onDragStarted = opts && 'onDragStarted' in opts ? opts.onDragStarted : null;
      let onDraggableCanceled = opts && 'onDraggableCanceled' in opts ? opts.onDraggableCanceled : null;
      let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
      let onDragCompleted = opts && 'onDragCompleted' in opts ? opts.onDragCompleted : null;
      let hapticFeedbackOnStart = opts && 'hapticFeedbackOnStart' in opts ? opts.hapticFeedbackOnStart : true;
      let ignoringFeedbackSemantics = opts && 'ignoringFeedbackSemantics' in opts ? opts.ignoringFeedbackSemantics : true;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[hapticFeedbackOnStart$] = hapticFeedbackOnStart;
      LongPressDraggable.__proto__.new.call(this, {key: key, child: child, feedback: feedback, data: data, axis: axis, childWhenDragging: childWhenDragging, feedbackOffset: feedbackOffset, dragAnchor: dragAnchor, maxSimultaneousDrags: maxSimultaneousDrags, onDragStarted: onDragStarted, onDraggableCanceled: onDraggableCanceled, onDragEnd: onDragEnd, onDragCompleted: onDragCompleted, ignoringFeedbackSemantics: ignoringFeedbackSemantics, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = LongPressDraggable.prototype;
    dart.addTypeTests(LongPressDraggable);
    LongPressDraggable.prototype[_is_LongPressDraggable_default] = true;
    dart.addTypeCaches(LongPressDraggable);
    dart.setMethodSignature(LongPressDraggable, () => ({
      __proto__: dart.getMethods(LongPressDraggable.__proto__),
      createRecognizer: dart.fnType(dart.legacy(multidrag.DelayedMultiDragGestureRecognizer), [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))])
    }));
    dart.setLibraryUri(LongPressDraggable, L0);
    dart.setFieldSignature(LongPressDraggable, () => ({
      __proto__: dart.getFields(LongPressDraggable.__proto__),
      hapticFeedbackOnStart: dart.finalFieldType(dart.legacy(core.bool))
    }));
    return LongPressDraggable;
  });
  drag_target.LongPressDraggable = drag_target.LongPressDraggable$();
  dart.addTypeTests(drag_target.LongPressDraggable, _is_LongPressDraggable_default);
  var _recognizer = dart.privateName(drag_target, "_recognizer");
  var _activeCount = dart.privateName(drag_target, "_activeCount");
  var _startDrag = dart.privateName(drag_target, "_startDrag");
  var _disposeRecognizerIfInactive = dart.privateName(drag_target, "_disposeRecognizerIfInactive");
  var _routePointer = dart.privateName(drag_target, "_routePointer");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var C8;
  var C9;
  var C7;
  var C6;
  const _is__DraggableState_default = Symbol('_is__DraggableState_default');
  drag_target._DraggableState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DragAvatarOfTL = () => (_DragAvatarOfTL = dart.constFn(drag_target._DragAvatar$(TL())))();
    class _DraggableState extends framework.State$(dart.legacy(drag_target.Draggable$(dart.legacy(T)))) {
      initState() {
        super.initState();
        this[_recognizer] = this.widget.createRecognizer(dart.bind(this, _startDrag));
      }
      dispose() {
        this[_disposeRecognizerIfInactive]();
        super.dispose();
      }
      [_disposeRecognizerIfInactive]() {
        if (dart.notNull(this[_activeCount]) > 0) return;
        this[_recognizer].dispose();
        this[_recognizer] = null;
      }
      [_routePointer](event) {
        if (this.widget.maxSimultaneousDrags != null && dart.notNull(this[_activeCount]) >= dart.notNull(this.widget.maxSimultaneousDrags)) return;
        this[_recognizer].addPointer(event);
      }
      [_startDrag](position) {
        if (this.widget.maxSimultaneousDrags != null && dart.notNull(this[_activeCount]) >= dart.notNull(this.widget.maxSimultaneousDrags)) return null;
        let dragStartPoint = null;
        switch (this.widget.dragAnchor) {
          case C0 || CT.C0:
          {
            let renderObject = RenderBoxL().as(this.context.findRenderObject());
            dragStartPoint = renderObject.globalToLocal(position);
            break;
          }
          case C1 || CT.C1:
          {
            dragStartPoint = ui.Offset.zero;
            break;
          }
        }
        this.setState(dart.fn(() => {
          this[_activeCount] = dart.notNull(this[_activeCount]) + 1;
        }, VoidToNullN()));
        let avatar = new (_DragAvatarOfTL()).new({overlayState: overlay.Overlay.of(this.context, {debugRequiredFor: this.widget}), data: this.widget.data, axis: this.widget.axis, initialPosition: position, dragStartPoint: dragStartPoint, feedback: this.widget.feedback, feedbackOffset: this.widget.feedbackOffset, ignoringFeedbackSemantics: this.widget.ignoringFeedbackSemantics, onDragEnd: dart.fn((velocity, offset, wasAccepted) => {
            let t1, t0, t2, t1$, t0$;
            if (dart.test(this.mounted)) {
              this.setState(dart.fn(() => {
                this[_activeCount] = dart.notNull(this[_activeCount]) - 1;
              }, VoidToNullN()));
            } else {
              this[_activeCount] = dart.notNull(this[_activeCount]) - 1;
              this[_disposeRecognizerIfInactive]();
            }
            if (dart.test(this.mounted) && this.widget.onDragEnd != null) {
              t0 = this.widget;
              t1 = new drag_target.DraggableDetails.new({wasAccepted: wasAccepted, velocity: velocity, offset: offset});
              t0.onDragEnd(t1);
            }
            if (dart.test(wasAccepted) && this.widget.onDragCompleted != null) this.widget.onDragCompleted();
            if (!dart.test(wasAccepted) && this.widget.onDraggableCanceled != null) {
              t0$ = this.widget;
              t1$ = velocity;
              t2 = offset;
              t0$.onDraggableCanceled(t1$, t2);
            }
          }, VelocityLAndOffsetLAndboolLToNullN())});
        if (this.widget.onDragStarted != null) this.widget.onDragStarted();
        return avatar;
      }
      build(context) {
        if (!(overlay.Overlay.of(context, {debugRequiredFor: this.widget}) != null)) dart.assertFailed(null, L1, 426, 12, "Overlay.of(context, debugRequiredFor: widget) != null");
        let canDrag = this.widget.maxSimultaneousDrags == null || dart.notNull(this[_activeCount]) < dart.notNull(this.widget.maxSimultaneousDrags);
        let showChild = this[_activeCount] === 0 || this.widget.childWhenDragging == null;
        return new basic.Listener.new({onPointerDown: canDrag ? dart.bind(this, _routePointer) : null, child: showChild ? this.widget.child : this.widget.childWhenDragging, $creationLocationd_0dea112b090073317d4: C6 || CT.C6});
      }
    }
    (_DraggableState.new = function() {
      this[_recognizer] = null;
      this[_activeCount] = 0;
      _DraggableState.__proto__.new.call(this);
      ;
    }).prototype = _DraggableState.prototype;
    dart.addTypeTests(_DraggableState);
    _DraggableState.prototype[_is__DraggableState_default] = true;
    dart.addTypeCaches(_DraggableState);
    dart.setMethodSignature(_DraggableState, () => ({
      __proto__: dart.getMethods(_DraggableState.__proto__),
      [_disposeRecognizerIfInactive]: dart.fnType(dart.void, []),
      [_routePointer]: dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]),
      [_startDrag]: dart.fnType(dart.legacy(drag_target._DragAvatar$(dart.legacy(T))), [dart.legacy(ui.Offset)]),
      build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
    }));
    dart.setLibraryUri(_DraggableState, L0);
    dart.setFieldSignature(_DraggableState, () => ({
      __proto__: dart.getFields(_DraggableState.__proto__),
      [_recognizer]: dart.fieldType(dart.legacy(recognizer.GestureRecognizer)),
      [_activeCount]: dart.fieldType(dart.legacy(core.int))
    }));
    return _DraggableState;
  });
  drag_target._DraggableState = drag_target._DraggableState$();
  dart.addTypeTests(drag_target._DraggableState, _is__DraggableState_default);
  var wasAccepted$ = dart.privateName(drag_target, "DraggableDetails.wasAccepted");
  var velocity$ = dart.privateName(drag_target, "DraggableDetails.velocity");
  var offset$ = dart.privateName(drag_target, "DraggableDetails.offset");
  drag_target.DraggableDetails = class DraggableDetails extends core.Object {
    get wasAccepted() {
      return this[wasAccepted$];
    }
    set wasAccepted(value) {
      super.wasAccepted = value;
    }
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
  };
  (drag_target.DraggableDetails.new = function(opts) {
    let wasAccepted = opts && 'wasAccepted' in opts ? opts.wasAccepted : false;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[wasAccepted$] = wasAccepted;
    this[velocity$] = velocity;
    this[offset$] = offset;
    if (!(velocity != null)) dart.assertFailed(null, L1, 454, 15, "velocity != null");
    if (!(offset != null)) dart.assertFailed(null, L1, 455, 15, "offset != null");
    ;
  }).prototype = drag_target.DraggableDetails.prototype;
  dart.addTypeTests(drag_target.DraggableDetails);
  dart.addTypeCaches(drag_target.DraggableDetails);
  dart.setLibraryUri(drag_target.DraggableDetails, L0);
  dart.setFieldSignature(drag_target.DraggableDetails, () => ({
    __proto__: dart.getFields(drag_target.DraggableDetails.__proto__),
    wasAccepted: dart.finalFieldType(dart.legacy(core.bool)),
    velocity: dart.finalFieldType(dart.legacy(velocity_tracker.Velocity)),
    offset: dart.finalFieldType(dart.legacy(ui.Offset))
  }));
  const _is_DragTargetDetails_default = Symbol('_is_DragTargetDetails_default');
  var data$0 = dart.privateName(drag_target, "DragTargetDetails.data");
  var offset$0 = dart.privateName(drag_target, "DragTargetDetails.offset");
  drag_target.DragTargetDetails$ = dart.generic(T => {
    class DragTargetDetails extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        super.data = value;
      }
      get offset() {
        return this[offset$0];
      }
      set offset(value) {
        super.offset = value;
      }
    }
    (DragTargetDetails.new = function(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      this[data$0] = data;
      this[offset$0] = offset;
      if (!(offset != null)) dart.assertFailed(null, L1, 474, 76, "offset != null");
      ;
    }).prototype = DragTargetDetails.prototype;
    dart.addTypeTests(DragTargetDetails);
    DragTargetDetails.prototype[_is_DragTargetDetails_default] = true;
    dart.addTypeCaches(DragTargetDetails);
    dart.setLibraryUri(DragTargetDetails, L0);
    dart.setFieldSignature(DragTargetDetails, () => ({
      __proto__: dart.getFields(DragTargetDetails.__proto__),
      data: dart.finalFieldType(dart.legacy(T)),
      offset: dart.finalFieldType(dart.legacy(ui.Offset))
    }));
    return DragTargetDetails;
  });
  drag_target.DragTargetDetails = drag_target.DragTargetDetails$();
  dart.addTypeTests(drag_target.DragTargetDetails, _is_DragTargetDetails_default);
  const _is_DragTarget_default = Symbol('_is_DragTarget_default');
  var builder$ = dart.privateName(drag_target, "DragTarget.builder");
  var onWillAccept$ = dart.privateName(drag_target, "DragTarget.onWillAccept");
  var onAccept$ = dart.privateName(drag_target, "DragTarget.onAccept");
  var onAcceptWithDetails$ = dart.privateName(drag_target, "DragTarget.onAcceptWithDetails");
  var onLeave$ = dart.privateName(drag_target, "DragTarget.onLeave");
  drag_target.DragTarget$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DragTargetStateOfTL = () => (_DragTargetStateOfTL = dart.constFn(drag_target._DragTargetState$(TL())))();
    class DragTarget extends framework.StatefulWidget {
      get builder() {
        return this[builder$];
      }
      set builder(value) {
        super.builder = value;
      }
      get onWillAccept() {
        return this[onWillAccept$];
      }
      set onWillAccept(value) {
        super.onWillAccept = value;
      }
      get onAccept() {
        return this[onAccept$];
      }
      set onAccept(value) {
        super.onAccept = value;
      }
      get onAcceptWithDetails() {
        return this[onAcceptWithDetails$];
      }
      set onAcceptWithDetails(value) {
        super.onAcceptWithDetails = value;
      }
      get onLeave() {
        return this[onLeave$];
      }
      set onLeave(value) {
        super.onLeave = value;
      }
      createState() {
        return new (_DragTargetStateOfTL()).new();
      }
    }
    (DragTarget.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let onWillAccept = opts && 'onWillAccept' in opts ? opts.onWillAccept : null;
      let onAccept = opts && 'onAccept' in opts ? opts.onAccept : null;
      let onAcceptWithDetails = opts && 'onAcceptWithDetails' in opts ? opts.onAcceptWithDetails : null;
      let onLeave = opts && 'onLeave' in opts ? opts.onLeave : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[builder$] = builder;
      this[onWillAccept$] = onWillAccept;
      this[onAccept$] = onAccept;
      this[onAcceptWithDetails$] = onAcceptWithDetails;
      this[onLeave$] = onLeave;
      DragTarget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = DragTarget.prototype;
    dart.addTypeTests(DragTarget);
    DragTarget.prototype[_is_DragTarget_default] = true;
    dart.addTypeCaches(DragTarget);
    dart.setMethodSignature(DragTarget, () => ({
      __proto__: dart.getMethods(DragTarget.__proto__),
      createState: dart.fnType(dart.legacy(drag_target._DragTargetState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(DragTarget, L0);
    dart.setFieldSignature(DragTarget, () => ({
      __proto__: dart.getFields(DragTarget.__proto__),
      builder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(core.List$(dart.legacy(T))), dart.legacy(core.List)]))),
      onWillAccept: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))),
      onAccept: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))),
      onAcceptWithDetails: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_target.DragTargetDetails$(dart.legacy(T)))]))),
      onLeave: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object)])))
    }));
    return DragTarget;
  });
  drag_target.DragTarget = drag_target.DragTarget$();
  dart.addTypeTests(drag_target.DragTarget, _is_DragTarget_default);
  var _candidateAvatars = dart.privateName(drag_target, "_candidateAvatars");
  var _rejectedAvatars = dart.privateName(drag_target, "_rejectedAvatars");
  var _lastOffset = dart.privateName(drag_target, "_lastOffset");
  var C12;
  var C13;
  var C14;
  var C11;
  var C10;
  const _is__DragTargetState_default = Symbol('_is__DragTargetState_default');
  drag_target._DragTargetState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DragAvatarOfTL = () => (_DragAvatarOfTL = dart.constFn(drag_target._DragAvatar$(TL())))();
    var _DragAvatarLOfTL = () => (_DragAvatarLOfTL = dart.constFn(dart.legacy(_DragAvatarOfTL())))();
    var JSArrayOf_DragAvatarLOfTL = () => (JSArrayOf_DragAvatarLOfTL = dart.constFn(_interceptors.JSArray$(_DragAvatarLOfTL())))();
    var TLToboolL = () => (TLToboolL = dart.constFn(dart.fnType(boolL(), [TL()])))();
    var TLToLboolL = () => (TLToLboolL = dart.constFn(dart.legacy(TLToboolL())))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    var TLToLvoid = () => (TLToLvoid = dart.constFn(dart.legacy(TLTovoid())))();
    var DragTargetDetailsOfTL = () => (DragTargetDetailsOfTL = dart.constFn(drag_target.DragTargetDetails$(TL())))();
    var DragTargetDetailsLOfTL = () => (DragTargetDetailsLOfTL = dart.constFn(dart.legacy(DragTargetDetailsOfTL())))();
    var DragTargetDetailsLOfTLTovoid = () => (DragTargetDetailsLOfTLTovoid = dart.constFn(dart.fnType(dart.void, [DragTargetDetailsLOfTL()])))();
    var DragTargetDetailsLOfTLToLvoid = () => (DragTargetDetailsLOfTLToLvoid = dart.constFn(dart.legacy(DragTargetDetailsLOfTLTovoid())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var BuildContextLAndListLOfTLAndListLToWidgetL = () => (BuildContextLAndListLOfTLAndListLToWidgetL = dart.constFn(dart.fnType(WidgetL(), [BuildContextL(), ListLOfTL(), ListL()])))();
    var BuildContextLAndListLOfTLAndListLToLWidgetL = () => (BuildContextLAndListLOfTLAndListLToLWidgetL = dart.constFn(dart.legacy(BuildContextLAndListLOfTLAndListLToWidgetL())))();
    class _DragTargetState extends framework.State$(dart.legacy(drag_target.DragTarget$(dart.legacy(T)))) {
      didEnter(avatar) {
        let t1, t0;
        if (!!dart.test(this[_candidateAvatars][$contains](avatar))) dart.assertFailed(null, L1, 551, 12, "!_candidateAvatars.contains(avatar)");
        if (!!dart.test(this[_rejectedAvatars][$contains](avatar))) dart.assertFailed(null, L1, 552, 12, "!_rejectedAvatars.contains(avatar)");
        if (_DragAvatarLOfTL().is(avatar) && (TLToLboolL().as(this.widget.onWillAccept) == null || dart.test((t0 = this.widget, t1 = avatar.data, TLToLboolL().as(t0.onWillAccept)(t1))))) {
          this.setState(dart.fn(() => {
            this[_candidateAvatars][$add](avatar);
          }, VoidToNullN()));
          return true;
        } else {
          this.setState(dart.fn(() => {
            this[_rejectedAvatars][$add](avatar);
          }, VoidToNullN()));
          return false;
        }
      }
      didLeave(avatar) {
        let t1, t0;
        if (!(dart.test(this[_candidateAvatars][$contains](avatar)) || dart.test(this[_rejectedAvatars][$contains](avatar)))) dart.assertFailed(null, L1, 567, 12, "_candidateAvatars.contains(avatar) || _rejectedAvatars.contains(avatar)");
        if (!dart.test(this.mounted)) return;
        this.setState(dart.fn(() => {
          this[_candidateAvatars][$remove](avatar);
          this[_rejectedAvatars][$remove](avatar);
        }, VoidToNullN()));
        if (this.widget.onLeave != null) {
          t0 = this.widget;
          t1 = avatar.data;
          t0.onLeave(t1);
        }
      }
      didDrop(avatar) {
        let t1, t0, t1$, t0$;
        if (!dart.test(this[_candidateAvatars][$contains](avatar))) dart.assertFailed(null, L1, 579, 12, "_candidateAvatars.contains(avatar)");
        if (!dart.test(this.mounted)) return;
        this.setState(dart.fn(() => {
          this[_candidateAvatars][$remove](avatar);
        }, VoidToNullN()));
        if (TLToLvoid().as(this.widget.onAccept) != null) {
          t0 = this.widget;
          t1 = TL().as(avatar.data);
          TLToLvoid().as(t0.onAccept)(t1);
        }
        if (DragTargetDetailsLOfTLToLvoid().as(this.widget.onAcceptWithDetails) != null) {
          t0$ = this.widget;
          t1$ = new (DragTargetDetailsOfTL()).new({data: TL().as(avatar.data), offset: avatar[_lastOffset]});
          DragTargetDetailsLOfTLToLvoid().as(t0$.onAcceptWithDetails)(t1$);
        }
      }
      build(context) {
        let t3, t2, t1, t0;
        if (!(BuildContextLAndListLOfTLAndListLToLWidgetL().as(this.widget.builder) != null)) dart.assertFailed(null, L1, 593, 12, "widget.builder != null");
        return new basic.MetaData.new({metaData: this, behavior: proxy_box.HitTestBehavior.translucent, child: (t0 = this.widget, t1 = context, t2 = drag_target._mapAvatarsToData(TL(), this[_candidateAvatars]), t3 = drag_target._mapAvatarsToData(ObjectL(), this[_rejectedAvatars]), BuildContextLAndListLOfTLAndListLToLWidgetL().as(t0.builder)(t1, t2, t3)), $creationLocationd_0dea112b090073317d4: C10 || CT.C10});
      }
    }
    (_DragTargetState.new = function() {
      this[_candidateAvatars] = JSArrayOf_DragAvatarLOfTL().of([]);
      this[_rejectedAvatars] = JSArrayOf_DragAvatarLOfObjectL().of([]);
      _DragTargetState.__proto__.new.call(this);
      ;
    }).prototype = _DragTargetState.prototype;
    dart.addTypeTests(_DragTargetState);
    _DragTargetState.prototype[_is__DragTargetState_default] = true;
    dart.addTypeCaches(_DragTargetState);
    dart.setMethodSignature(_DragTargetState, () => ({
      __proto__: dart.getMethods(_DragTargetState.__proto__),
      didEnter: dart.fnType(dart.legacy(core.bool), [dart.legacy(drag_target._DragAvatar$(dart.legacy(core.Object)))]),
      didLeave: dart.fnType(dart.void, [dart.legacy(drag_target._DragAvatar$(dart.legacy(core.Object)))]),
      didDrop: dart.fnType(dart.void, [dart.legacy(drag_target._DragAvatar$(dart.legacy(core.Object)))]),
      build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
    }));
    dart.setLibraryUri(_DragTargetState, L0);
    dart.setFieldSignature(_DragTargetState, () => ({
      __proto__: dart.getFields(_DragTargetState.__proto__),
      [_candidateAvatars]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(drag_target._DragAvatar$(dart.legacy(T)))))),
      [_rejectedAvatars]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(drag_target._DragAvatar$(dart.legacy(core.Object))))))
    }));
    return _DragTargetState;
  });
  drag_target._DragTargetState = drag_target._DragTargetState$();
  dart.addTypeTests(drag_target._DragTargetState, _is__DragTargetState_default);
  var C15;
  var C16;
  var C17;
  drag_target._DragEndKind = class _DragEndKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (drag_target._DragEndKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = drag_target._DragEndKind.prototype;
  dart.addTypeTests(drag_target._DragEndKind);
  dart.addTypeCaches(drag_target._DragEndKind);
  dart.setMethodSignature(drag_target._DragEndKind, () => ({
    __proto__: dart.getMethods(drag_target._DragEndKind.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(drag_target._DragEndKind, L0);
  dart.setFieldSignature(drag_target._DragEndKind, () => ({
    __proto__: dart.getFields(drag_target._DragEndKind.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(drag_target._DragEndKind, ['toString']);
  drag_target._DragEndKind.dropped = C15 || CT.C15;
  drag_target._DragEndKind.canceled = C16 || CT.C16;
  drag_target._DragEndKind.values = C17 || CT.C17;
  var _activeTarget = dart.privateName(drag_target, "_activeTarget");
  var _enteredTargets = dart.privateName(drag_target, "_enteredTargets");
  var _position = dart.privateName(drag_target, "_position");
  var _entry = dart.privateName(drag_target, "_entry");
  var _build = dart.privateName(drag_target, "_build");
  var _restrictAxis = dart.privateName(drag_target, "_restrictAxis");
  var _restrictVelocityAxis = dart.privateName(drag_target, "_restrictVelocityAxis");
  var _getDragTargets = dart.privateName(drag_target, "_getDragTargets");
  var _leaveAllEntered = dart.privateName(drag_target, "_leaveAllEntered");
  var C20;
  var C21;
  var C19;
  var C18;
  var C24;
  var C25;
  var C26;
  var C23;
  var C22;
  const _is__DragAvatar_default = Symbol('_is__DragAvatar_default');
  drag_target._DragAvatar$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DragTargetStateOfTL = () => (_DragTargetStateOfTL = dart.constFn(drag_target._DragTargetState$(TL())))();
    var _DragTargetStateLOfTL = () => (_DragTargetStateLOfTL = dart.constFn(dart.legacy(_DragTargetStateOfTL())))();
    var JSArrayOf_DragTargetStateLOfTL = () => (JSArrayOf_DragTargetStateLOfTL = dart.constFn(_interceptors.JSArray$(_DragTargetStateLOfTL())))();
    var _DragTargetStateLOfTLToboolL = () => (_DragTargetStateLOfTLToboolL = dart.constFn(dart.fnType(boolL(), [_DragTargetStateLOfTL()])))();
    var SyncIterableOf_DragTargetStateLOfTL = () => (SyncIterableOf_DragTargetStateLOfTL = dart.constFn(_js_helper.SyncIterable$(_DragTargetStateLOfTL())))();
    class _DragAvatar extends drag.Drag {
      update(details) {
        this[_position] = this[_position]['+'](this[_restrictAxis](details.delta));
        this.updateDrag(this[_position]);
      }
      end(details) {
        this.finishDrag(drag_target._DragEndKind.dropped, this[_restrictVelocityAxis](details.velocity));
      }
      cancel() {
        this.finishDrag(drag_target._DragEndKind.canceled);
      }
      updateDrag(globalPosition) {
        this[_lastOffset] = globalPosition['-'](this.dragStartPoint);
        this[_entry].markNeedsBuild();
        let result = new hit_test.HitTestResult.new();
        binding.WidgetsBinding.instance.hitTest(result, globalPosition['+'](this.feedbackOffset));
        let targets = this[_getDragTargets](result.path)[$toList]();
        let listsMatch = false;
        if (dart.notNull(targets[$length]) >= dart.notNull(this[_enteredTargets][$length]) && dart.test(this[_enteredTargets][$isNotEmpty])) {
          listsMatch = true;
          let iterator = targets[$iterator];
          for (let i = 0; i < dart.notNull(this[_enteredTargets][$length]); i = i + 1) {
            iterator.moveNext();
            if (!dart.equals(iterator.current, this[_enteredTargets][$_get](i))) {
              listsMatch = false;
              break;
            }
          }
        }
        if (listsMatch) return;
        this[_leaveAllEntered]();
        let newTarget = targets[$firstWhere](dart.fn(target => {
          this[_enteredTargets][$add](target);
          return target.didEnter(this);
        }, _DragTargetStateLOfTLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        this[_activeTarget] = newTarget;
      }
      [_getDragTargets](path) {
        return new (SyncIterableOf_DragTargetStateLOfTL()).new(function* _getDragTargets() {
          for (let entry of path) {
            let target = entry.target;
            if (RenderMetaDataL().is(target)) {
              let metaData = target.metaData;
              if (_DragTargetStateLOfTL().is(metaData)) yield metaData;
            }
          }
        });
      }
      [_leaveAllEntered]() {
        for (let i = 0; i < dart.notNull(this[_enteredTargets][$length]); i = i + 1)
          this[_enteredTargets][$_get](i).didLeave(this);
        this[_enteredTargets][$clear]();
      }
      finishDrag(endKind, velocity = null) {
        let t0, t2, t1, t0$;
        let wasAccepted = false;
        if (endKind == drag_target._DragEndKind.dropped && this[_activeTarget] != null) {
          this[_activeTarget].didDrop(this);
          wasAccepted = true;
          this[_enteredTargets][$remove](this[_activeTarget]);
        }
        this[_leaveAllEntered]();
        this[_activeTarget] = null;
        this[_entry].remove();
        this[_entry] = null;
        if (this.onDragEnd != null) {
          t0$ = (t0 = velocity, t0 == null ? velocity_tracker.Velocity.zero : t0);
          t1 = this[_lastOffset];
          t2 = wasAccepted;
          this.onDragEnd(t0$, t1, t2);
        }
      }
      [_build](context) {
        let box = RenderBoxL().as(this.overlayState.context.findRenderObject());
        let overlayTopLeft = box.localToGlobal(ui.Offset.zero);
        return new basic.Positioned.new({left: dart.notNull(this[_lastOffset].dx) - dart.notNull(overlayTopLeft.dx), top: dart.notNull(this[_lastOffset].dy) - dart.notNull(overlayTopLeft.dy), child: new basic.IgnorePointer.new({child: this.feedback, ignoringSemantics: this.ignoringFeedbackSemantics, $creationLocationd_0dea112b090073317d4: C18 || CT.C18}), $creationLocationd_0dea112b090073317d4: C22 || CT.C22});
      }
      [_restrictVelocityAxis](velocity) {
        if (this.axis == null) {
          return velocity;
        }
        return new velocity_tracker.Velocity.new({pixelsPerSecond: this[_restrictAxis](velocity.pixelsPerSecond)});
      }
      [_restrictAxis](offset) {
        if (this.axis == null) {
          return offset;
        }
        if (this.axis == basic_types.Axis.horizontal) {
          return new ui.Offset.new(offset.dx, 0.0);
        }
        return new ui.Offset.new(0.0, offset.dy);
      }
    }
    (_DragAvatar.new = function(opts) {
      let overlayState = opts && 'overlayState' in opts ? opts.overlayState : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let axis = opts && 'axis' in opts ? opts.axis : null;
      let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
      let dragStartPoint = opts && 'dragStartPoint' in opts ? opts.dragStartPoint : C3 || CT.C3;
      let feedback = opts && 'feedback' in opts ? opts.feedback : null;
      let feedbackOffset = opts && 'feedbackOffset' in opts ? opts.feedbackOffset : C3 || CT.C3;
      let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
      let ignoringFeedbackSemantics = opts && 'ignoringFeedbackSemantics' in opts ? opts.ignoringFeedbackSemantics : null;
      this[_activeTarget] = null;
      this[_enteredTargets] = JSArrayOf_DragTargetStateLOfTL().of([]);
      this[_position] = null;
      this[_lastOffset] = null;
      this[_entry] = null;
      this.overlayState = overlayState;
      this.data = data;
      this.axis = axis;
      this.dragStartPoint = dragStartPoint;
      this.feedback = feedback;
      this.feedbackOffset = feedbackOffset;
      this.onDragEnd = onDragEnd;
      this.ignoringFeedbackSemantics = ignoringFeedbackSemantics;
      if (!(overlayState != null)) dart.assertFailed(null, L1, 620, 15, "overlayState != null");
      if (!(ignoringFeedbackSemantics != null)) dart.assertFailed(null, L1, 621, 15, "ignoringFeedbackSemantics != null");
      if (!(dragStartPoint != null)) dart.assertFailed(null, L1, 622, 15, "dragStartPoint != null");
      if (!(feedbackOffset != null)) dart.assertFailed(null, L1, 623, 15, "feedbackOffset != null");
      this[_entry] = new overlay.OverlayEntry.new({builder: dart.bind(this, _build)});
      this.overlayState.insert(this[_entry]);
      this[_position] = initialPosition;
      this.updateDrag(initialPosition);
    }).prototype = _DragAvatar.prototype;
    dart.addTypeTests(_DragAvatar);
    _DragAvatar.prototype[_is__DragAvatar_default] = true;
    dart.addTypeCaches(_DragAvatar);
    dart.setMethodSignature(_DragAvatar, () => ({
      __proto__: dart.getMethods(_DragAvatar.__proto__),
      updateDrag: dart.fnType(dart.void, [dart.legacy(ui.Offset)]),
      [_getDragTargets]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(drag_target._DragTargetState$(dart.legacy(T))))), [dart.legacy(core.Iterable$(dart.legacy(hit_test.HitTestEntry)))]),
      [_leaveAllEntered]: dart.fnType(dart.void, []),
      finishDrag: dart.fnType(dart.void, [dart.legacy(drag_target._DragEndKind)], [dart.legacy(velocity_tracker.Velocity)]),
      [_build]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
      [_restrictVelocityAxis]: dart.fnType(dart.legacy(velocity_tracker.Velocity), [dart.legacy(velocity_tracker.Velocity)]),
      [_restrictAxis]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset)])
    }));
    dart.setLibraryUri(_DragAvatar, L0);
    dart.setFieldSignature(_DragAvatar, () => ({
      __proto__: dart.getFields(_DragAvatar.__proto__),
      data: dart.finalFieldType(dart.legacy(T)),
      axis: dart.finalFieldType(dart.legacy(basic_types.Axis)),
      dragStartPoint: dart.finalFieldType(dart.legacy(ui.Offset)),
      feedback: dart.finalFieldType(dart.legacy(framework.Widget)),
      feedbackOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
      onDragEnd: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(velocity_tracker.Velocity), dart.legacy(ui.Offset), dart.legacy(core.bool)]))),
      overlayState: dart.finalFieldType(dart.legacy(overlay.OverlayState)),
      ignoringFeedbackSemantics: dart.finalFieldType(dart.legacy(core.bool)),
      [_activeTarget]: dart.fieldType(dart.legacy(drag_target._DragTargetState$(dart.legacy(T)))),
      [_enteredTargets]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(drag_target._DragTargetState$(dart.legacy(T)))))),
      [_position]: dart.fieldType(dart.legacy(ui.Offset)),
      [_lastOffset]: dart.fieldType(dart.legacy(ui.Offset)),
      [_entry]: dart.fieldType(dart.legacy(overlay.OverlayEntry))
    }));
    return _DragAvatar;
  });
  drag_target._DragAvatar = drag_target._DragAvatar$();
  dart.addTypeTests(drag_target._DragAvatar, _is__DragAvatar_default);
  drag_target._mapAvatarsToData = function _mapAvatarsToData(T, avatars) {
    return avatars[$map](dart.legacy(T), dart.fn(avatar => avatar.data, dart.fnType(dart.legacy(T), [dart.legacy(drag_target._DragAvatar$(dart.legacy(T)))])))[$toList]();
  };
  dart.trackLibraries("packages/flutter/src/widgets/drag_target.dart", {
    "package:flutter/src/widgets/drag_target.dart": drag_target
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["drag_target.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/widgets/drag_target.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__drag_target: drag_target
  };
}));

//# sourceMappingURL=drag_target.dart.lib.js.map
