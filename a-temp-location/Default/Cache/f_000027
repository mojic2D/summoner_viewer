define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/node.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/services/system_chrome.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/gestures/pointer_router.dart', 'packages/flutter/src/services/platform_channel.dart', 'packages/flutter/src/semantics/binding.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/painting/clip.dart', 'packages/flutter/src/painting/edge_insets.dart'], (function load__packages__flutter__src__rendering__layer_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__node$46dart, packages__flutter__src__foundation__debug$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__services__system_chrome$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__gestures__pointer_router$46dart, packages__flutter__src__services__platform_channel$46dart, packages__flutter__src__semantics__binding$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__painting__clip$46dart, packages__flutter__src__painting__edge_insets$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const developer = dart_sdk.developer;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const node = packages__flutter__src__foundation__node$46dart.src__foundation__node;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const debug = packages__flutter__src__foundation__debug$46dart.src__foundation__debug;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const system_chrome = packages__flutter__src__services__system_chrome$46dart.src__services__system_chrome;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const pointer_router = packages__flutter__src__gestures__pointer_router$46dart.src__gestures__pointer_router;
  const system_channels = packages__flutter__src__services__platform_channel$46dart.src__services__system_channels;
  const message_codecs = packages__flutter__src__services__platform_channel$46dart.src__services__message_codecs;
  const binding$ = packages__flutter__src__services__platform_channel$46dart.src__services__binding;
  const binding$0 = packages__flutter__src__semantics__binding$46dart.src__semantics__binding;
  const binding$1 = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const binding$2 = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const binding$3 = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const clip = packages__flutter__src__painting__clip$46dart.src__painting__clip;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  var layer$ = Object.create(dart.library);
  var view = Object.create(dart.library);
  var mouse_cursor = Object.create(dart.library);
  var mouse_tracking = Object.create(dart.library);
  var binding$4 = Object.create(dart.library);
  var object$ = Object.create(dart.library);
  var debug$ = Object.create(dart.library);
  var box = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $map = dartx.map;
  var $whereType = dartx.whereType;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $any = dartx.any;
  var $addAll = dartx.addAll;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_equals = dartx._equals;
  var $ceil = dartx.ceil;
  var $isFinite = dartx.isFinite;
  var $every = dartx.every;
  var $_set = dartx._set;
  var $modulo = dartx['%'];
  var $split = dartx.split;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $trim = dartx.trim;
  var $single = dartx.single;
  var $clear = dartx.clear;
  var $sublist = dartx.sublist;
  var $putIfAbsent = dartx.putIfAbsent;
  var $remove = dartx.remove;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $values = dartx.values;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $reversed = dartx.reversed;
  var $sort = dartx.sort;
  var $expand = dartx.expand;
  var $last = dartx.last;
  var $clamp = dartx.clamp;
  var $truncate = dartx.truncate;
  var $toDouble = dartx.toDouble;
  var $isNaN = dartx.isNaN;
  var $removeLast = dartx.removeLast;
  var $join = dartx.join;
  var $isInfinite = dartx.isInfinite;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var ContainerLayerL = () => (ContainerLayerL = dart.constFn(dart.legacy(layer$.ContainerLayer)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var AbstractNodeL = () => (AbstractNodeL = dart.constFn(dart.legacy(node.AbstractNode)))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var DiagnosticsPropertyOfObjectL = () => (DiagnosticsPropertyOfObjectL = dart.constFn(diagnostics.DiagnosticsProperty$(ObjectL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var DiagnosticsPropertyOfStringL = () => (DiagnosticsPropertyOfStringL = dart.constFn(diagnostics.DiagnosticsProperty$(StringL())))();
  var RectL = () => (RectL = dart.constFn(dart.legacy(ui.Rect)))();
  var DiagnosticsPropertyOfRectL = () => (DiagnosticsPropertyOfRectL = dart.constFn(diagnostics.DiagnosticsProperty$(RectL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var JSArrayOfDiagnosticsNodeL = () => (JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(DiagnosticsNodeL())))();
  var ListOfDiagnosticsNodeL = () => (ListOfDiagnosticsNodeL = dart.constFn(core.List$(DiagnosticsNodeL())))();
  var ListLOfDiagnosticsNodeL = () => (ListLOfDiagnosticsNodeL = dart.constFn(dart.legacy(ListOfDiagnosticsNodeL())))();
  var VoidToListLOfDiagnosticsNodeL = () => (VoidToListLOfDiagnosticsNodeL = dart.constFn(dart.fnType(ListLOfDiagnosticsNodeL(), [])))();
  var PictureLayerL = () => (PictureLayerL = dart.constFn(dart.legacy(layer$.PictureLayer)))();
  var JSArrayOfPictureLayerL = () => (JSArrayOfPictureLayerL = dart.constFn(_interceptors.JSArray$(PictureLayerL())))();
  var PhysicalModelLayerL = () => (PhysicalModelLayerL = dart.constFn(dart.legacy(layer$.PhysicalModelLayer)))();
  var PathMetricL = () => (PathMetricL = dart.constFn(dart.legacy(ui.PathMetric)))();
  var PathMetricLToboolL = () => (PathMetricLToboolL = dart.constFn(dart.fnType(boolL(), [PathMetricL()])))();
  var LayerL = () => (LayerL = dart.constFn(dart.legacy(layer$.Layer)))();
  var JSArrayOfLayerL = () => (JSArrayOfLayerL = dart.constFn(_interceptors.JSArray$(LayerL())))();
  var OffsetEngineLayerL = () => (OffsetEngineLayerL = dart.constFn(dart.legacy(ui.OffsetEngineLayer)))();
  var OffsetL = () => (OffsetL = dart.constFn(dart.legacy(ui.Offset)))();
  var DiagnosticsPropertyOfOffsetL = () => (DiagnosticsPropertyOfOffsetL = dart.constFn(diagnostics.DiagnosticsProperty$(OffsetL())))();
  var ImageL = () => (ImageL = dart.constFn(dart.legacy(ui.Image)))();
  var ClipRectEngineLayerL = () => (ClipRectEngineLayerL = dart.constFn(dart.legacy(ui.ClipRectEngineLayer)))();
  var ClipL = () => (ClipL = dart.constFn(dart.legacy(ui.Clip)))();
  var DiagnosticsPropertyOfClipL = () => (DiagnosticsPropertyOfClipL = dart.constFn(diagnostics.DiagnosticsProperty$(ClipL())))();
  var ClipRRectEngineLayerL = () => (ClipRRectEngineLayerL = dart.constFn(dart.legacy(ui.ClipRRectEngineLayer)))();
  var RRectL = () => (RRectL = dart.constFn(dart.legacy(ui.RRect)))();
  var DiagnosticsPropertyOfRRectL = () => (DiagnosticsPropertyOfRRectL = dart.constFn(diagnostics.DiagnosticsProperty$(RRectL())))();
  var ClipPathEngineLayerL = () => (ClipPathEngineLayerL = dart.constFn(dart.legacy(ui.ClipPathEngineLayer)))();
  var ColorFilterEngineLayerL = () => (ColorFilterEngineLayerL = dart.constFn(dart.legacy(ui.ColorFilterEngineLayer)))();
  var ColorFilterL = () => (ColorFilterL = dart.constFn(dart.legacy(ui.ColorFilter)))();
  var DiagnosticsPropertyOfColorFilterL = () => (DiagnosticsPropertyOfColorFilterL = dart.constFn(diagnostics.DiagnosticsProperty$(ColorFilterL())))();
  var ImageFilterEngineLayerL = () => (ImageFilterEngineLayerL = dart.constFn(dart.legacy(ui.ImageFilterEngineLayer)))();
  var ImageFilterL = () => (ImageFilterL = dart.constFn(dart.legacy(ui.ImageFilter)))();
  var DiagnosticsPropertyOfImageFilterL = () => (DiagnosticsPropertyOfImageFilterL = dart.constFn(diagnostics.DiagnosticsProperty$(ImageFilterL())))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var doubleLToboolL = () => (doubleLToboolL = dart.constFn(dart.fnType(boolL(), [doubleL()])))();
  var TransformEngineLayerL = () => (TransformEngineLayerL = dart.constFn(dart.legacy(ui.TransformEngineLayer)))();
  var OpacityEngineLayerL = () => (OpacityEngineLayerL = dart.constFn(dart.legacy(ui.OpacityEngineLayer)))();
  var ShaderMaskEngineLayerL = () => (ShaderMaskEngineLayerL = dart.constFn(dart.legacy(ui.ShaderMaskEngineLayer)))();
  var ShaderL = () => (ShaderL = dart.constFn(dart.legacy(ui.Shader)))();
  var DiagnosticsPropertyOfShaderL = () => (DiagnosticsPropertyOfShaderL = dart.constFn(diagnostics.DiagnosticsProperty$(ShaderL())))();
  var BlendModeL = () => (BlendModeL = dart.constFn(dart.legacy(ui.BlendMode)))();
  var DiagnosticsPropertyOfBlendModeL = () => (DiagnosticsPropertyOfBlendModeL = dart.constFn(diagnostics.DiagnosticsProperty$(BlendModeL())))();
  var BackdropFilterEngineLayerL = () => (BackdropFilterEngineLayerL = dart.constFn(dart.legacy(ui.BackdropFilterEngineLayer)))();
  var PhysicalShapeEngineLayerL = () => (PhysicalShapeEngineLayerL = dart.constFn(dart.legacy(ui.PhysicalShapeEngineLayer)))();
  var LayerLinkL = () => (LayerLinkL = dart.constFn(dart.legacy(layer$.LayerLink)))();
  var DiagnosticsPropertyOfLayerLinkL = () => (DiagnosticsPropertyOfLayerLinkL = dart.constFn(diagnostics.DiagnosticsProperty$(LayerLinkL())))();
  var _HashSetOfLayerL = () => (_HashSetOfLayerL = dart.constFn(collection._HashSet$(LayerL())))();
  var JSArrayOfContainerLayerL = () => (JSArrayOfContainerLayerL = dart.constFn(_interceptors.JSArray$(ContainerLayerL())))();
  var SizeL = () => (SizeL = dart.constFn(dart.legacy(ui.Size)))();
  var DiagnosticsPropertyOfSizeL = () => (DiagnosticsPropertyOfSizeL = dart.constFn(diagnostics.DiagnosticsProperty$(SizeL())))();
  var DiagnosticsPropertyOfboolL = () => (DiagnosticsPropertyOfboolL = dart.constFn(diagnostics.DiagnosticsProperty$(boolL())))();
  var MouseTrackerAnnotationL = () => (MouseTrackerAnnotationL = dart.constFn(dart.legacy(mouse_tracking.MouseTrackerAnnotation)))();
  var Matrix4L = () => (Matrix4L = dart.constFn(dart.legacy(vector_math_64.Matrix4)))();
  var LinkedMapOfMouseTrackerAnnotationL$Matrix4L = () => (LinkedMapOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(_js_helper.LinkedMap$(MouseTrackerAnnotationL(), Matrix4L())))();
  var LinkedHashMapOfMouseTrackerAnnotationL$Matrix4L = () => (LinkedHashMapOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(collection.LinkedHashMap$(MouseTrackerAnnotationL(), Matrix4L())))();
  var LinkedHashMapLOfMouseTrackerAnnotationL$Matrix4L = () => (LinkedHashMapLOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(dart.legacy(LinkedHashMapOfMouseTrackerAnnotationL$Matrix4L())))();
  var RenderBoxL = () => (RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))();
  var SystemUiOverlayStyleL = () => (SystemUiOverlayStyleL = dart.constFn(dart.legacy(system_chrome.SystemUiOverlayStyle)))();
  var ViewConfigurationL = () => (ViewConfigurationL = dart.constFn(dart.legacy(view.ViewConfiguration)))();
  var DiagnosticsPropertyOfViewConfigurationL = () => (DiagnosticsPropertyOfViewConfigurationL = dart.constFn(diagnostics.DiagnosticsProperty$(ViewConfigurationL())))();
  var RenderObjectL = () => (RenderObjectL = dart.constFn(dart.legacy(object$.RenderObject)))();
  var RenderObjectLToNullN = () => (RenderObjectLToNullN = dart.constFn(dart.fnType(core.Null, [RenderObjectL()])))();
  var ParentDataL = () => (ParentDataL = dart.constFn(dart.legacy(object$.ParentData)))();
  var SyncIterableOfDiagnosticsNodeL = () => (SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(DiagnosticsNodeL())))();
  var IterableOfDiagnosticsNodeL = () => (IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(DiagnosticsNodeL())))();
  var IterableLOfDiagnosticsNodeL = () => (IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(IterableOfDiagnosticsNodeL())))();
  var VoidToIterableLOfDiagnosticsNodeL = () => (VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(IterableLOfDiagnosticsNodeL(), [])))();
  var PipelineOwnerL = () => (PipelineOwnerL = dart.constFn(dart.legacy(object$.PipelineOwner)))();
  var RenderObjectLTovoid = () => (RenderObjectLTovoid = dart.constFn(dart.fnType(dart.void, [RenderObjectL()])))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var OffsetLayerL = () => (OffsetLayerL = dart.constFn(dart.legacy(layer$.OffsetLayer)))();
  var JSArrayOfRenderObjectL = () => (JSArrayOfRenderObjectL = dart.constFn(_interceptors.JSArray$(RenderObjectL())))();
  var _InterestingSemanticsFragmentL = () => (_InterestingSemanticsFragmentL = dart.constFn(dart.legacy(object$._InterestingSemanticsFragment)))();
  var JSArrayOf_InterestingSemanticsFragmentL = () => (JSArrayOf_InterestingSemanticsFragmentL = dart.constFn(_interceptors.JSArray$(_InterestingSemanticsFragmentL())))();
  var LinkedHashSetOf_InterestingSemanticsFragmentL = () => (LinkedHashSetOf_InterestingSemanticsFragmentL = dart.constFn(collection.LinkedHashSet$(_InterestingSemanticsFragmentL())))();
  var _SwitchableSemanticsFragmentL = () => (_SwitchableSemanticsFragmentL = dart.constFn(dart.legacy(object$._SwitchableSemanticsFragment)))();
  var SemanticsNodeL = () => (SemanticsNodeL = dart.constFn(dart.legacy(semantics.SemanticsNode)))();
  var ListOfSemanticsNodeL = () => (ListOfSemanticsNodeL = dart.constFn(core.List$(SemanticsNodeL())))();
  var ListLOfSemanticsNodeL = () => (ListLOfSemanticsNodeL = dart.constFn(dart.legacy(ListOfSemanticsNodeL())))();
  var HitTestEntryL = () => (HitTestEntryL = dart.constFn(dart.legacy(hit_test.HitTestEntry)))();
  var DiagnosticsPropertyOfParentDataL = () => (DiagnosticsPropertyOfParentDataL = dart.constFn(diagnostics.DiagnosticsProperty$(ParentDataL())))();
  var ConstraintsL = () => (ConstraintsL = dart.constFn(dart.legacy(object$.Constraints)))();
  var DiagnosticsPropertyOfConstraintsL = () => (DiagnosticsPropertyOfConstraintsL = dart.constFn(diagnostics.DiagnosticsProperty$(ConstraintsL())))();
  var DiagnosticsPropertyOfContainerLayerL = () => (DiagnosticsPropertyOfContainerLayerL = dart.constFn(diagnostics.DiagnosticsProperty$(ContainerLayerL())))();
  var DiagnosticsPropertyOfSemanticsNodeL = () => (DiagnosticsPropertyOfSemanticsNodeL = dart.constFn(diagnostics.DiagnosticsProperty$(SemanticsNodeL())))();
  var BoxParentDataL = () => (BoxParentDataL = dart.constFn(dart.legacy(box.BoxParentData)))();
  var _IntrinsicDimensionsCacheEntryL = () => (_IntrinsicDimensionsCacheEntryL = dart.constFn(dart.legacy(box._IntrinsicDimensionsCacheEntry)))();
  var LinkedMapOf_IntrinsicDimensionsCacheEntryL$doubleL = () => (LinkedMapOf_IntrinsicDimensionsCacheEntryL$doubleL = dart.constFn(_js_helper.LinkedMap$(_IntrinsicDimensionsCacheEntryL(), doubleL())))();
  var VoidTodoubleL = () => (VoidTodoubleL = dart.constFn(dart.fnType(doubleL(), [])))();
  var _DebugSizeL = () => (_DebugSizeL = dart.constFn(dart.legacy(box._DebugSize)))();
  var TextBaselineL = () => (TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))();
  var LinkedMapOfTextBaselineL$doubleL = () => (LinkedMapOfTextBaselineL$doubleL = dart.constFn(_js_helper.LinkedMap$(TextBaselineL(), doubleL())))();
  var BoxConstraintsL = () => (BoxConstraintsL = dart.constFn(dart.legacy(box.BoxConstraints)))();
  var DiagnosticsPropertyOfRenderBoxL = () => (DiagnosticsPropertyOfRenderBoxL = dart.constFn(diagnostics.DiagnosticsProperty$(RenderBoxL())))();
  var DiagnosticsPropertyOfBoxConstraintsL = () => (DiagnosticsPropertyOfBoxConstraintsL = dart.constFn(diagnostics.DiagnosticsProperty$(BoxConstraintsL())))();
  var doubleLTodoubleL = () => (doubleLTodoubleL = dart.constFn(dart.fnType(doubleL(), [doubleL()])))();
  var doubleLToLdoubleL = () => (doubleLToLdoubleL = dart.constFn(dart.legacy(doubleLTodoubleL())))();
  var FnAndStringLAnddoubleLTodoubleL = () => (FnAndStringLAnddoubleLTodoubleL = dart.constFn(dart.fnType(doubleL(), [doubleLToLdoubleL(), StringL(), doubleL()])))();
  var FnAndFnAndStringL__Tovoid = () => (FnAndFnAndStringL__Tovoid = dart.constFn(dart.fnType(dart.void, [doubleLToLdoubleL(), doubleLToLdoubleL(), StringL(), doubleL()])))();
  var BoxHitTestEntryL = () => (BoxHitTestEntryL = dart.constFn(dart.legacy(box.BoxHitTestEntry)))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerCancelEventL = () => (PointerCancelEventL = dart.constFn(dart.legacy(events.PointerCancelEvent)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var MouseCursorSessionL = () => (MouseCursorSessionL = dart.constFn(dart.legacy(mouse_cursor.MouseCursorSession)))();
  var IdentityMapOfintL$MouseCursorSessionL = () => (IdentityMapOfintL$MouseCursorSessionL = dart.constFn(_js_helper.IdentityMap$(intL(), MouseCursorSessionL())))();
  var MouseCursorL = () => (MouseCursorL = dart.constFn(dart.legacy(mouse_cursor.MouseCursor)))();
  var MouseTrackerAnnotationLToMouseCursorL = () => (MouseTrackerAnnotationLToMouseCursorL = dart.constFn(dart.fnType(MouseCursorL(), [MouseTrackerAnnotationL()])))();
  var PointerRemovedEventL = () => (PointerRemovedEventL = dart.constFn(dart.legacy(events.PointerRemovedEvent)))();
  var _MouseStateL = () => (_MouseStateL = dart.constFn(dart.legacy(mouse_tracking._MouseState)))();
  var IdentityMapOfintL$_MouseStateL = () => (IdentityMapOfintL$_MouseStateL = dart.constFn(_js_helper.IdentityMap$(intL(), _MouseStateL())))();
  var DurationL = () => (DurationL = dart.constFn(dart.legacy(core.Duration)))();
  var DurationLToNullN = () => (DurationLToNullN = dart.constFn(dart.fnType(core.Null, [DurationL()])))();
  var PointerAddedEventL = () => (PointerAddedEventL = dart.constFn(dart.legacy(events.PointerAddedEvent)))();
  var PointerSignalEventL = () => (PointerSignalEventL = dart.constFn(dart.legacy(events.PointerSignalEvent)))();
  var SystemMouseCursorL = () => (SystemMouseCursorL = dart.constFn(dart.legacy(mouse_cursor.SystemMouseCursor)))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var FunctionL = () => (FunctionL = dart.constFn(dart.legacy(core.Function)))();
  var FlagsSummaryOfFunctionL = () => (FlagsSummaryOfFunctionL = dart.constFn(diagnostics.FlagsSummary$(FunctionL())))();
  var IdentityMapOfStringL$FunctionL = () => (IdentityMapOfStringL$FunctionL = dart.constFn(_js_helper.IdentityMap$(StringL(), FunctionL())))();
  var DiagnosticsPropertyOfMouseCursorL = () => (DiagnosticsPropertyOfMouseCursorL = dart.constFn(diagnostics.DiagnosticsProperty$(MouseCursorL())))();
  var PointerEventL = () => (PointerEventL = dart.constFn(dart.legacy(events.PointerEvent)))();
  var PointerEventLToStringL = () => (PointerEventLToStringL = dart.constFn(dart.fnType(StringL(), [PointerEventL()])))();
  var DiagnosticsPropertyOfPointerEventL = () => (DiagnosticsPropertyOfPointerEventL = dart.constFn(diagnostics.DiagnosticsProperty$(PointerEventL())))();
  var MapOfMouseTrackerAnnotationL$Matrix4L = () => (MapOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(core.Map$(MouseTrackerAnnotationL(), Matrix4L())))();
  var MapLOfMouseTrackerAnnotationL$Matrix4L = () => (MapLOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(dart.legacy(MapOfMouseTrackerAnnotationL$Matrix4L())))();
  var DiagnosticsPropertyOfMapLOfMouseTrackerAnnotationL$Matrix4L = () => (DiagnosticsPropertyOfMapLOfMouseTrackerAnnotationL$Matrix4L = dart.constFn(diagnostics.DiagnosticsProperty$(MapLOfMouseTrackerAnnotationL$Matrix4L())))();
  var MouseTrackerAnnotationLAndMatrix4LToNullN = () => (MouseTrackerAnnotationLAndMatrix4LToNullN = dart.constFn(dart.fnType(core.Null, [MouseTrackerAnnotationL(), Matrix4L()])))();
  var MouseTrackerAnnotationLToboolL = () => (MouseTrackerAnnotationLToboolL = dart.constFn(dart.fnType(boolL(), [MouseTrackerAnnotationL()])))();
  var PointerHoverEventL = () => (PointerHoverEventL = dart.constFn(dart.legacy(events.PointerHoverEvent)))();
  var FutureOfboolL = () => (FutureOfboolL = dart.constFn(async.Future$(boolL())))();
  var FutureLOfboolL = () => (FutureLOfboolL = dart.constFn(dart.legacy(FutureOfboolL())))();
  var VoidToFutureLOfboolL = () => (VoidToFutureLOfboolL = dart.constFn(dart.fnType(FutureLOfboolL(), [])))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var boolLToFutureLOfvoid = () => (boolLToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [boolL()])))();
  var VoidToFutureLOfvoid = () => (VoidToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [])))();
  var RenderViewL = () => (RenderViewL = dart.constFn(dart.legacy(view.RenderView)))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  var LinkedHashSetOfRenderObjectL = () => (LinkedHashSetOfRenderObjectL = dart.constFn(collection.LinkedHashSet$(RenderObjectL())))();
  var RenderObjectLAndRenderObjectLTointL = () => (RenderObjectLAndRenderObjectLTointL = dart.constFn(dart.fnType(intL(), [RenderObjectL(), RenderObjectL()])))();
  var SyncIterableOf_InterestingSemanticsFragmentL = () => (SyncIterableOf_InterestingSemanticsFragmentL = dart.constFn(_js_helper.SyncIterable$(_InterestingSemanticsFragmentL())))();
  var SemanticsTagL = () => (SemanticsTagL = dart.constFn(dart.legacy(semantics.SemanticsTag)))();
  var LinkedHashSetOfSemanticsTagL = () => (LinkedHashSetOfSemanticsTagL = dart.constFn(collection.LinkedHashSet$(SemanticsTagL())))();
  var IterableOfSemanticsNodeL = () => (IterableOfSemanticsNodeL = dart.constFn(core.Iterable$(SemanticsNodeL())))();
  var IterableLOfSemanticsNodeL = () => (IterableLOfSemanticsNodeL = dart.constFn(dart.legacy(IterableOfSemanticsNodeL())))();
  var _InterestingSemanticsFragmentLToIterableLOfSemanticsNodeL = () => (_InterestingSemanticsFragmentLToIterableLOfSemanticsNodeL = dart.constFn(dart.fnType(IterableLOfSemanticsNodeL(), [_InterestingSemanticsFragmentL()])))();
  var SyncIterableOfSemanticsNodeL = () => (SyncIterableOfSemanticsNodeL = dart.constFn(_js_helper.SyncIterable$(SemanticsNodeL())))();
  var DiagnosticsNodeLTovoid = () => (DiagnosticsNodeLTovoid = dart.constFn(dart.fnType(dart.void, [DiagnosticsNodeL()])))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var doubleLAnddoubleLAndStringLToStringL = () => (doubleLAnddoubleLAndStringLToStringL = dart.constFn(dart.fnType(StringL(), [doubleL(), doubleL(), StringL()])))();
  var _IntrinsicDimensionL = () => (_IntrinsicDimensionL = dart.constFn(dart.legacy(box._IntrinsicDimension)))();
  var BoxHitTestResultL = () => (BoxHitTestResultL = dart.constFn(dart.legacy(box.BoxHitTestResult)))();
  var BoxHitTestResultLAndOffsetLToboolL = () => (BoxHitTestResultLAndOffsetLToboolL = dart.constFn(dart.fnType(boolL(), [BoxHitTestResultL(), OffsetL()])))();
  const CT = Object.create(null);
  var L5 = "package:flutter/src/rendering/object.dart";
  var L10 = "package:flutter/src/rendering/mouse_tracking.dart";
  var L6 = "file:///C:/flutter/packages/flutter/lib/src/rendering/box.dart";
  var L7 = "package:flutter/src/rendering/box.dart";
  var L2 = "package:flutter/src/rendering/view.dart";
  var L12 = "file:///C:/flutter/packages/flutter/lib/src/rendering/binding.dart";
  var L8 = "file:///C:/flutter/packages/flutter/lib/src/rendering/mouse_cursor.dart";
  var L13 = "package:flutter/src/rendering/binding.dart";
  var L11 = "package:flutter/src/rendering/mouse_cursor.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/rendering/layer.dart";
  var L3 = "file:///C:/flutter/packages/flutter/lib/src/rendering/view.dart";
  var L9 = "file:///C:/flutter/packages/flutter/lib/src/rendering/mouse_tracking.dart";
  var L1 = "package:flutter/src/rendering/layer.dart";
  var L14 = "file:///C:/flutter/packages/flutter/lib/src/rendering/debug.dart";
  var L4 = "file:///C:/flutter/packages/flutter/lib/src/rendering/object.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name]: "FilterQuality.low",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289331200.0
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.antiAlias",
        index: 2
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.android",
        index: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C13() {
      return C13 = dart.fn(object$.RenderObject._cleanChildRelayoutBoundary, RenderObjectLTovoid());
    },
    get C14() {
      return C14 = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name$0]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name$0]: "DiagnosticLevel.debug",
        index: 2
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: diagnostics.DiagnosticsTreeStyle.prototype,
        [_name$0]: "DiagnosticsTreeStyle.shallow",
        index: 10
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255615.0
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294955008.0
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255360.0
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: mouse_cursor._DeferringMouseCursor.prototype
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: mouse_cursor._NoopMouseCursor.prototype
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "none"
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "basic"
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "click"
      });
    },
    get C27() {
      return C27 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "forbidden"
      });
    },
    get C28() {
      return C28 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "wait"
      });
    },
    get C29() {
      return C29 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "progress"
      });
    },
    get C30() {
      return C30 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "contextMenu"
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "help"
      });
    },
    get C32() {
      return C32 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "text"
      });
    },
    get C33() {
      return C33 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "verticalText"
      });
    },
    get C34() {
      return C34 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "cell"
      });
    },
    get C35() {
      return C35 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "precise"
      });
    },
    get C36() {
      return C36 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "move"
      });
    },
    get C37() {
      return C37 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "grab"
      });
    },
    get C38() {
      return C38 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "grabbing"
      });
    },
    get C39() {
      return C39 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "noDrop"
      });
    },
    get C40() {
      return C40 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "alias"
      });
    },
    get C41() {
      return C41 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "copy"
      });
    },
    get C42() {
      return C42 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "disappearing"
      });
    },
    get C43() {
      return C43 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "allScroll"
      });
    },
    get C44() {
      return C44 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeLeftRight"
      });
    },
    get C45() {
      return C45 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUpDown"
      });
    },
    get C46() {
      return C46 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUpLeftDownRight"
      });
    },
    get C47() {
      return C47 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUpRightDownLeft"
      });
    },
    get C48() {
      return C48 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUp"
      });
    },
    get C49() {
      return C49 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeDown"
      });
    },
    get C50() {
      return C50 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeLeft"
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeRight"
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUpLeft"
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeUpRight"
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeDownLeft"
      });
    },
    get C55() {
      return C55 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeDownRight"
      });
    },
    get C56() {
      return C56 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeColumn"
      });
    },
    get C57() {
      return C57 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "resizeRow"
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "zoomIn"
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: mouse_cursor.SystemMouseCursor.prototype,
        [kind$]: "zoomOut"
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C61() {
      return C61 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294940672.0
      });
    },
    get C62() {
      return C62 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2415956223.0
      });
    },
    get C63() {
      return C63 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278227199.0
      });
    },
    get C64() {
      return C64 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2425393296.0
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: colors.HSVColor.prototype,
        [HSVColor_value]: 1,
        [HSVColor_saturation]: 1,
        [HSVColor_hue]: 60,
        [HSVColor_alpha]: 0.4
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: box._IntrinsicDimension.prototype,
        [_name$1]: "_IntrinsicDimension.minWidth",
        index: 0
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: box._IntrinsicDimension.prototype,
        [_name$1]: "_IntrinsicDimension.maxWidth",
        index: 1
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: box._IntrinsicDimension.prototype,
        [_name$1]: "_IntrinsicDimension.minHeight",
        index: 2
      });
    },
    get C69() {
      return C69 = dart.const({
        __proto__: box._IntrinsicDimension.prototype,
        [_name$1]: "_IntrinsicDimension.maxHeight",
        index: 3
      });
    },
    get C70() {
      return C70 = dart.constList([C66 || CT.C66, C67 || CT.C67, C68 || CT.C68, C69 || CT.C69], _IntrinsicDimensionL());
    }
  }, false);
  const _is_AnnotationEntry_default = Symbol('_is_AnnotationEntry_default');
  var annotation$ = dart.privateName(layer$, "AnnotationEntry.annotation");
  var localPosition$ = dart.privateName(layer$, "AnnotationEntry.localPosition");
  layer$.AnnotationEntry$ = dart.generic(T => {
    class AnnotationEntry extends core.Object {
      get annotation() {
        return this[annotation$];
      }
      set annotation(value) {
        super.annotation = value;
      }
      get localPosition() {
        return this[localPosition$];
      }
      set localPosition(value) {
        super.localPosition = value;
      }
      toString() {
        return dart.str(object.objectRuntimeType(this, "AnnotationEntry")) + "(annotation: " + dart.str(this.annotation) + ", localPosition: " + dart.str(this.localPosition) + ")";
      }
    }
    (AnnotationEntry.new = function(opts) {
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      this[annotation$] = annotation;
      this[localPosition$] = localPosition;
      if (!(localPosition != null)) dart.assertFailed(null, L0, 30, 15, "localPosition != null");
      ;
    }).prototype = AnnotationEntry.prototype;
    dart.addTypeTests(AnnotationEntry);
    AnnotationEntry.prototype[_is_AnnotationEntry_default] = true;
    dart.addTypeCaches(AnnotationEntry);
    dart.setMethodSignature(AnnotationEntry, () => ({
      __proto__: dart.getMethods(AnnotationEntry.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setLibraryUri(AnnotationEntry, L1);
    dart.setFieldSignature(AnnotationEntry, () => ({
      __proto__: dart.getFields(AnnotationEntry.__proto__),
      annotation: dart.finalFieldType(dart.legacy(T)),
      localPosition: dart.finalFieldType(dart.legacy(ui.Offset))
    }));
    dart.defineExtensionMethods(AnnotationEntry, ['toString']);
    return AnnotationEntry;
  });
  layer$.AnnotationEntry = layer$.AnnotationEntry$();
  dart.addTypeTests(layer$.AnnotationEntry, _is_AnnotationEntry_default);
  var _entries = dart.privateName(layer$, "_entries");
  const _is_AnnotationResult_default = Symbol('_is_AnnotationResult_default');
  layer$.AnnotationResult$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AnnotationEntryOfTL = () => (AnnotationEntryOfTL = dart.constFn(layer$.AnnotationEntry$(TL())))();
    var AnnotationEntryLOfTL = () => (AnnotationEntryLOfTL = dart.constFn(dart.legacy(AnnotationEntryOfTL())))();
    var JSArrayOfAnnotationEntryLOfTL = () => (JSArrayOfAnnotationEntryLOfTL = dart.constFn(_interceptors.JSArray$(AnnotationEntryLOfTL())))();
    var SyncIterableOfTL = () => (SyncIterableOfTL = dart.constFn(_js_helper.SyncIterable$(TL())))();
    class AnnotationResult extends core.Object {
      add(entry) {
        AnnotationEntryLOfTL().as(entry);
        return this[_entries][$add](entry);
      }
      get entries() {
        return this[_entries];
      }
      get annotations() {
        return new (SyncIterableOfTL()).new((function* annotations() {
          for (let entry of this[_entries])
            yield entry.annotation;
        }).bind(this));
      }
    }
    (AnnotationResult.new = function() {
      this[_entries] = JSArrayOfAnnotationEntryLOfTL().of([]);
      ;
    }).prototype = AnnotationResult.prototype;
    dart.addTypeTests(AnnotationResult);
    AnnotationResult.prototype[_is_AnnotationResult_default] = true;
    dart.addTypeCaches(AnnotationResult);
    dart.setMethodSignature(AnnotationResult, () => ({
      __proto__: dart.getMethods(AnnotationResult.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(AnnotationResult, () => ({
      __proto__: dart.getGetters(AnnotationResult.__proto__),
      entries: dart.legacy(core.Iterable$(dart.legacy(layer$.AnnotationEntry$(dart.legacy(T))))),
      annotations: dart.legacy(core.Iterable$(dart.legacy(T)))
    }));
    dart.setLibraryUri(AnnotationResult, L1);
    dart.setFieldSignature(AnnotationResult, () => ({
      __proto__: dart.getFields(AnnotationResult.__proto__),
      [_entries]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(layer$.AnnotationEntry$(dart.legacy(T))))))
    }));
    return AnnotationResult;
  });
  layer$.AnnotationResult = layer$.AnnotationResult$();
  dart.addTypeTests(layer$.AnnotationResult, _is_AnnotationResult_default);
  var _needsAddToScene = dart.privateName(layer$, "_needsAddToScene");
  var _engineLayer = dart.privateName(layer$, "_engineLayer");
  var _nextSibling = dart.privateName(layer$, "_nextSibling");
  var _previousSibling = dart.privateName(layer$, "_previousSibling");
  var _removeChild = dart.privateName(layer$, "_removeChild");
  var _addToSceneWithRetainedRendering = dart.privateName(layer$, "_addToSceneWithRetainedRendering");
  var debugCreator = dart.privateName(layer$, "Layer.debugCreator");
  const AbstractNode_DiagnosticableTreeMixin$36 = class AbstractNode_DiagnosticableTreeMixin extends node.AbstractNode {};
  (AbstractNode_DiagnosticableTreeMixin$36.new = function() {
    AbstractNode_DiagnosticableTreeMixin$36.__proto__.new.call(this);
  }).prototype = AbstractNode_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(AbstractNode_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  layer$.Layer = class Layer extends AbstractNode_DiagnosticableTreeMixin$36 {
    get debugCreator() {
      return this[debugCreator];
    }
    set debugCreator(value) {
      this[debugCreator] = value;
    }
    get parent() {
      return ContainerLayerL().as(super.parent);
    }
    markNeedsAddToScene() {
      if (!!dart.test(this.alwaysNeedsAddToScene)) dart.assertFailed(dart.str(this.runtimeType) + " with alwaysNeedsAddToScene set called markNeedsAddToScene.\n" + "The layer's alwaysNeedsAddToScene is set to true, and therefore it should not call markNeedsAddToScene.", L0, 137, 7, "!alwaysNeedsAddToScene");
      if (dart.test(this[_needsAddToScene])) {
        return;
      }
      this[_needsAddToScene] = true;
    }
    debugMarkClean() {
      if (!dart.test(dart.fn(() => {
        this[_needsAddToScene] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 156, 12, "() {\r\n      _needsAddToScene = false;\r\n      return true;\r\n    }()");
    }
    get alwaysNeedsAddToScene() {
      return false;
    }
    get debugSubtreeNeedsAddToScene() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_needsAddToScene];
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 173, 12, "() {\r\n      result = _needsAddToScene;\r\n      return true;\r\n    }()");
      return result;
    }
    get engineLayer() {
      return this[_engineLayer];
    }
    set engineLayer(value) {
      this[_engineLayer] = value;
      if (!dart.test(this.alwaysNeedsAddToScene)) {
        if (this.parent != null && !dart.test(this.parent.alwaysNeedsAddToScene)) {
          this.parent.markNeedsAddToScene();
        }
      }
    }
    updateSubtreeNeedsAddToScene() {
      this[_needsAddToScene] = dart.test(this[_needsAddToScene]) || dart.test(this.alwaysNeedsAddToScene);
    }
    get nextSibling() {
      return this[_nextSibling];
    }
    get previousSibling() {
      return this[_previousSibling];
    }
    dropChild(child) {
      AbstractNodeL().as(child);
      if (!dart.test(this.alwaysNeedsAddToScene)) {
        this.markNeedsAddToScene();
      }
      super.dropChild(child);
    }
    adoptChild(child) {
      AbstractNodeL().as(child);
      if (!dart.test(this.alwaysNeedsAddToScene)) {
        this.markNeedsAddToScene();
      }
      super.adoptChild(child);
    }
    remove() {
      let t0;
      t0 = this.parent;
      t0 == null ? null : t0[_removeChild](this);
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return false;
    }
    find(S, localPosition) {
      let result = new (layer$.AnnotationResult$(dart.legacy(S))).new();
      this.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: true});
      return dart.test(result.entries[$isEmpty]) ? null : result.entries[$first].annotation;
    }
    findAll(S, localPosition) {
      let result = this.findAllAnnotations(dart.legacy(S), localPosition);
      return result.entries[$map](dart.legacy(S), dart.fn(entry => entry.annotation, dart.fnType(dart.legacy(S), [dart.legacy(layer$.AnnotationEntry$(dart.legacy(S)))])));
    }
    findAllAnnotations(S, localPosition) {
      let result = new (layer$.AnnotationResult$(dart.legacy(S))).new();
      this.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: false});
      return result;
    }
    [_addToSceneWithRetainedRendering](builder) {
      if (!dart.test(this[_needsAddToScene]) && this[_engineLayer] != null) {
        builder.addRetained(this[_engineLayer]);
        return;
      }
      this.addToScene(builder);
      this[_needsAddToScene] = false;
    }
    toStringShort() {
      return dart.str(super.toStringShort()) + (this.owner == null ? " DETACHED" : "");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfObjectL()).new("owner", this.owner, {level: this.parent != null ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info, defaultValue: null}));
      properties.add(new diagnostics.DiagnosticsProperty.new("creator", this.debugCreator, {defaultValue: null, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfStringL()).new("engine layer", diagnostics.describeIdentity(this[_engineLayer])));
    }
  };
  (layer$.Layer.new = function() {
    this[_needsAddToScene] = true;
    this[_engineLayer] = null;
    this[_nextSibling] = null;
    this[_previousSibling] = null;
    this[debugCreator] = null;
    layer$.Layer.__proto__.new.call(this);
    ;
  }).prototype = layer$.Layer.prototype;
  dart.addTypeTests(layer$.Layer);
  dart.addTypeCaches(layer$.Layer);
  dart.setMethodSignature(layer$.Layer, () => ({
    __proto__: dart.getMethods(layer$.Layer.__proto__),
    markNeedsAddToScene: dart.fnType(dart.void, []),
    debugMarkClean: dart.fnType(dart.void, []),
    updateSubtreeNeedsAddToScene: dart.fnType(dart.void, []),
    dropChild: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    adoptChild: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    remove: dart.fnType(dart.void, []),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}]),
    find: dart.gFnType(S => [dart.legacy(S), [dart.legacy(ui.Offset)]]),
    findAll: dart.gFnType(S => [dart.legacy(core.Iterable$(dart.legacy(S))), [dart.legacy(ui.Offset)]]),
    findAllAnnotations: dart.gFnType(S => [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), [dart.legacy(ui.Offset)]]),
    [_addToSceneWithRetainedRendering]: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)]),
    toStringShort: dart.fnType(dart.legacy(core.String), []),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(layer$.Layer, () => ({
    __proto__: dart.getGetters(layer$.Layer.__proto__),
    parent: dart.legacy(layer$.ContainerLayer),
    alwaysNeedsAddToScene: dart.legacy(core.bool),
    debugSubtreeNeedsAddToScene: dart.legacy(core.bool),
    engineLayer: dart.legacy(ui.EngineLayer),
    nextSibling: dart.legacy(layer$.Layer),
    previousSibling: dart.legacy(layer$.Layer)
  }));
  dart.setSetterSignature(layer$.Layer, () => ({
    __proto__: dart.getSetters(layer$.Layer.__proto__),
    engineLayer: dart.legacy(ui.EngineLayer)
  }));
  dart.setLibraryUri(layer$.Layer, L1);
  dart.setFieldSignature(layer$.Layer, () => ({
    __proto__: dart.getFields(layer$.Layer.__proto__),
    [_needsAddToScene]: dart.fieldType(dart.legacy(core.bool)),
    [_engineLayer]: dart.fieldType(dart.legacy(ui.EngineLayer)),
    [_nextSibling]: dart.fieldType(dart.legacy(layer$.Layer)),
    [_previousSibling]: dart.fieldType(dart.legacy(layer$.Layer)),
    debugCreator: dart.fieldType(dart.dynamic)
  }));
  var _picture = dart.privateName(layer$, "_picture");
  var _isComplexHint = dart.privateName(layer$, "_isComplexHint");
  var _willChangeHint = dart.privateName(layer$, "_willChangeHint");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C0;
  var canvasBounds$ = dart.privateName(layer$, "PictureLayer.canvasBounds");
  layer$.PictureLayer = class PictureLayer extends layer$.Layer {
    get canvasBounds() {
      return this[canvasBounds$];
    }
    set canvasBounds(value) {
      super.canvasBounds = value;
    }
    get picture() {
      return this[_picture];
    }
    set picture(picture) {
      this.markNeedsAddToScene();
      this[_picture] = picture;
    }
    get isComplexHint() {
      return this[_isComplexHint];
    }
    set isComplexHint(value) {
      if (!dart.equals(value, this[_isComplexHint])) {
        this[_isComplexHint] = value;
        this.markNeedsAddToScene();
      }
    }
    get willChangeHint() {
      return this[_willChangeHint];
    }
    set willChangeHint(value) {
      if (!dart.equals(value, this[_willChangeHint])) {
        this[_willChangeHint] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      builder.addPicture(layerOffset, this.picture, {isComplexHint: this.isComplexHint, willChangeHint: this.willChangeHint});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfRectL()).new("paint bounds", this.canvasBounds));
      properties.add(new (DiagnosticsPropertyOfStringL()).new("picture", diagnostics.describeIdentity(this[_picture])));
      properties.add(new (DiagnosticsPropertyOfStringL()).new("raster cache hints", "isComplex = " + dart.str(this.isComplexHint) + ", willChange = " + dart.str(this.willChangeHint)));
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return false;
    }
  };
  (layer$.PictureLayer.new = function(canvasBounds) {
    this[_picture] = null;
    this[_isComplexHint] = false;
    this[_willChangeHint] = false;
    this[canvasBounds$] = canvasBounds;
    layer$.PictureLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.PictureLayer.prototype;
  dart.addTypeTests(layer$.PictureLayer);
  dart.addTypeCaches(layer$.PictureLayer);
  dart.setMethodSignature(layer$.PictureLayer, () => ({
    __proto__: dart.getMethods(layer$.PictureLayer.__proto__),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.PictureLayer, () => ({
    __proto__: dart.getGetters(layer$.PictureLayer.__proto__),
    picture: dart.legacy(ui.Picture),
    isComplexHint: dart.legacy(core.bool),
    willChangeHint: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(layer$.PictureLayer, () => ({
    __proto__: dart.getSetters(layer$.PictureLayer.__proto__),
    picture: dart.legacy(ui.Picture),
    isComplexHint: dart.legacy(core.bool),
    willChangeHint: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(layer$.PictureLayer, L1);
  dart.setFieldSignature(layer$.PictureLayer, () => ({
    __proto__: dart.getFields(layer$.PictureLayer.__proto__),
    canvasBounds: dart.finalFieldType(dart.legacy(ui.Rect)),
    [_picture]: dart.fieldType(dart.legacy(ui.Picture)),
    [_isComplexHint]: dart.fieldType(dart.legacy(core.bool)),
    [_willChangeHint]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _name = dart.privateName(ui, "_name");
  var C1;
  var rect$ = dart.privateName(layer$, "TextureLayer.rect");
  var textureId$ = dart.privateName(layer$, "TextureLayer.textureId");
  var freeze$ = dart.privateName(layer$, "TextureLayer.freeze");
  var filterQuality$ = dart.privateName(layer$, "TextureLayer.filterQuality");
  layer$.TextureLayer = class TextureLayer extends layer$.Layer {
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get textureId() {
      return this[textureId$];
    }
    set textureId(value) {
      super.textureId = value;
    }
    get freeze() {
      return this[freeze$];
    }
    set freeze(value) {
      super.freeze = value;
    }
    get filterQuality() {
      return this[filterQuality$];
    }
    set filterQuality(value) {
      super.filterQuality = value;
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      let shiftedRect = dart.equals(layerOffset, ui.Offset.zero) ? this.rect : this.rect.shift(layerOffset);
      builder.addTexture(this.textureId, {offset: shiftedRect.topLeft, width: shiftedRect.width, height: shiftedRect.height, freeze: this.freeze, filterQuality: this.filterQuality});
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return false;
    }
  };
  (layer$.TextureLayer.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let textureId = opts && 'textureId' in opts ? opts.textureId : null;
    let freeze = opts && 'freeze' in opts ? opts.freeze : false;
    let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : C1 || CT.C1;
    this[rect$] = rect;
    this[textureId$] = textureId;
    this[freeze$] = freeze;
    this[filterQuality$] = filterQuality;
    if (!(rect != null)) dart.assertFailed(null, L0, 590, 15, "rect != null");
    if (!(textureId != null)) dart.assertFailed(null, L0, 591, 15, "textureId != null");
    layer$.TextureLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.TextureLayer.prototype;
  dart.addTypeTests(layer$.TextureLayer);
  dart.addTypeCaches(layer$.TextureLayer);
  dart.setMethodSignature(layer$.TextureLayer, () => ({
    __proto__: dart.getMethods(layer$.TextureLayer.__proto__),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setLibraryUri(layer$.TextureLayer, L1);
  dart.setFieldSignature(layer$.TextureLayer, () => ({
    __proto__: dart.getFields(layer$.TextureLayer.__proto__),
    rect: dart.finalFieldType(dart.legacy(ui.Rect)),
    textureId: dart.finalFieldType(dart.legacy(core.int)),
    freeze: dart.finalFieldType(dart.legacy(core.bool)),
    filterQuality: dart.finalFieldType(dart.legacy(ui.FilterQuality))
  }));
  var rect$0 = dart.privateName(layer$, "PlatformViewLayer.rect");
  var viewId$ = dart.privateName(layer$, "PlatformViewLayer.viewId");
  layer$.PlatformViewLayer = class PlatformViewLayer extends layer$.Layer {
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get viewId() {
      return this[viewId$];
    }
    set viewId(value) {
      super.viewId = value;
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      let shiftedRect = dart.equals(layerOffset, ui.Offset.zero) ? this.rect : this.rect.shift(layerOffset);
      builder.addPlatformView(this.viewId, {offset: shiftedRect.topLeft, width: shiftedRect.width, height: shiftedRect.height});
    }
  };
  (layer$.PlatformViewLayer.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let viewId = opts && 'viewId' in opts ? opts.viewId : null;
    this[rect$0] = rect;
    this[viewId$] = viewId;
    if (!(rect != null)) dart.assertFailed(null, L0, 640, 15, "rect != null");
    if (!(viewId != null)) dart.assertFailed(null, L0, 641, 15, "viewId != null");
    layer$.PlatformViewLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.PlatformViewLayer.prototype;
  dart.addTypeTests(layer$.PlatformViewLayer);
  dart.addTypeCaches(layer$.PlatformViewLayer);
  dart.setMethodSignature(layer$.PlatformViewLayer, () => ({
    __proto__: dart.getMethods(layer$.PlatformViewLayer.__proto__),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)])
  }));
  dart.setLibraryUri(layer$.PlatformViewLayer, L1);
  dart.setFieldSignature(layer$.PlatformViewLayer, () => ({
    __proto__: dart.getFields(layer$.PlatformViewLayer.__proto__),
    rect: dart.finalFieldType(dart.legacy(ui.Rect)),
    viewId: dart.finalFieldType(dart.legacy(core.int))
  }));
  var _overlayRect = dart.privateName(layer$, "_overlayRect");
  var optionsMask$ = dart.privateName(layer$, "PerformanceOverlayLayer.optionsMask");
  var rasterizerThreshold$ = dart.privateName(layer$, "PerformanceOverlayLayer.rasterizerThreshold");
  var checkerboardRasterCacheImages$ = dart.privateName(layer$, "PerformanceOverlayLayer.checkerboardRasterCacheImages");
  var checkerboardOffscreenLayers$ = dart.privateName(layer$, "PerformanceOverlayLayer.checkerboardOffscreenLayers");
  layer$.PerformanceOverlayLayer = class PerformanceOverlayLayer extends layer$.Layer {
    get optionsMask() {
      return this[optionsMask$];
    }
    set optionsMask(value) {
      super.optionsMask = value;
    }
    get rasterizerThreshold() {
      return this[rasterizerThreshold$];
    }
    set rasterizerThreshold(value) {
      super.rasterizerThreshold = value;
    }
    get checkerboardRasterCacheImages() {
      return this[checkerboardRasterCacheImages$];
    }
    set checkerboardRasterCacheImages(value) {
      super.checkerboardRasterCacheImages = value;
    }
    get checkerboardOffscreenLayers() {
      return this[checkerboardOffscreenLayers$];
    }
    set checkerboardOffscreenLayers(value) {
      super.checkerboardOffscreenLayers = value;
    }
    get overlayRect() {
      return this[_overlayRect];
    }
    set overlayRect(value) {
      if (!dart.equals(value, this[_overlayRect])) {
        this[_overlayRect] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.optionsMask != null)) dart.assertFailed(null, L0, 724, 12, "optionsMask != null");
      let shiftedOverlayRect = dart.equals(layerOffset, ui.Offset.zero) ? this.overlayRect : this.overlayRect.shift(layerOffset);
      builder.addPerformanceOverlay(this.optionsMask, shiftedOverlayRect);
      builder.setRasterizerTracingThreshold(this.rasterizerThreshold);
      builder.setCheckerboardRasterCacheImages(this.checkerboardRasterCacheImages);
      builder.setCheckerboardOffscreenLayers(this.checkerboardOffscreenLayers);
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return false;
    }
  };
  (layer$.PerformanceOverlayLayer.new = function(opts) {
    let overlayRect = opts && 'overlayRect' in opts ? opts.overlayRect : null;
    let optionsMask = opts && 'optionsMask' in opts ? opts.optionsMask : null;
    let rasterizerThreshold = opts && 'rasterizerThreshold' in opts ? opts.rasterizerThreshold : null;
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : null;
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : null;
    this[optionsMask$] = optionsMask;
    this[rasterizerThreshold$] = rasterizerThreshold;
    this[checkerboardRasterCacheImages$] = checkerboardRasterCacheImages;
    this[checkerboardOffscreenLayers$] = checkerboardOffscreenLayers;
    this[_overlayRect] = overlayRect;
    layer$.PerformanceOverlayLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.PerformanceOverlayLayer.prototype;
  dart.addTypeTests(layer$.PerformanceOverlayLayer);
  dart.addTypeCaches(layer$.PerformanceOverlayLayer);
  dart.setMethodSignature(layer$.PerformanceOverlayLayer, () => ({
    __proto__: dart.getMethods(layer$.PerformanceOverlayLayer.__proto__),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.PerformanceOverlayLayer, () => ({
    __proto__: dart.getGetters(layer$.PerformanceOverlayLayer.__proto__),
    overlayRect: dart.legacy(ui.Rect)
  }));
  dart.setSetterSignature(layer$.PerformanceOverlayLayer, () => ({
    __proto__: dart.getSetters(layer$.PerformanceOverlayLayer.__proto__),
    overlayRect: dart.legacy(ui.Rect)
  }));
  dart.setLibraryUri(layer$.PerformanceOverlayLayer, L1);
  dart.setFieldSignature(layer$.PerformanceOverlayLayer, () => ({
    __proto__: dart.getFields(layer$.PerformanceOverlayLayer.__proto__),
    [_overlayRect]: dart.fieldType(dart.legacy(ui.Rect)),
    optionsMask: dart.finalFieldType(dart.legacy(core.int)),
    rasterizerThreshold: dart.finalFieldType(dart.legacy(core.int)),
    checkerboardRasterCacheImages: dart.finalFieldType(dart.legacy(core.bool)),
    checkerboardOffscreenLayers: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var _firstChild = dart.privateName(layer$, "_firstChild");
  var _lastChild = dart.privateName(layer$, "_lastChild");
  var _debugCheckElevations = dart.privateName(layer$, "_debugCheckElevations");
  var _debugUltimatePreviousSiblingOf = dart.privateName(layer$, "_debugUltimatePreviousSiblingOf");
  var _debugUltimateNextSiblingOf = dart.privateName(layer$, "_debugUltimateNextSiblingOf");
  var Color_value = dart.privateName(ui, "Color.value");
  var C2;
  var _highlightConflictingLayer = dart.privateName(layer$, "_highlightConflictingLayer");
  var _processConflictingPhysicalLayers = dart.privateName(layer$, "_processConflictingPhysicalLayers");
  var _debugTransformedClipPath = dart.privateName(layer$, "_debugTransformedClipPath");
  layer$.ContainerLayer = class ContainerLayer extends layer$.Layer {
    get firstChild() {
      return this[_firstChild];
    }
    get lastChild() {
      return this[_lastChild];
    }
    get hasChildren() {
      return this[_firstChild] != null;
    }
    buildScene(builder) {
      let temporaryLayers = null;
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugCheckElevationsEnabled)) {
          temporaryLayers = this[_debugCheckElevations]();
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 764, 12, "() {\r\n      if (debugCheckElevationsEnabled) {\r\n        temporaryLayers = _debugCheckElevations();\r\n      }\r\n      return true;\r\n    }()");
      this.updateSubtreeNeedsAddToScene();
      this.addToScene(builder);
      this[_needsAddToScene] = false;
      let scene = builder.build();
      if (!dart.test(dart.fn(() => {
        if (temporaryLayers != null) {
          for (let temporaryLayer of temporaryLayers) {
            temporaryLayer.remove();
          }
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 777, 12, "() {\r\n      // We should remove any layers that got added to highlight the incorrect\r\n      // PhysicalModelLayers. If we don't, we'll end up adding duplicate layers\r\n      // or continuing to render stale outlines.\r\n      if (temporaryLayers != null) {\r\n        for (final PictureLayer temporaryLayer in temporaryLayers) {\r\n          temporaryLayer.remove();\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return scene;
    }
    [_debugUltimatePreviousSiblingOf](child, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 792, 12, "child.attached == attached");
      while (child.previousSibling != null) {
        if (!!dart.equals(child.previousSibling, child)) dart.assertFailed(null, L0, 794, 14, "child.previousSibling != child");
        child = child.previousSibling;
        if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 796, 14, "child.attached == attached");
      }
      return dart.equals(child, equals);
    }
    [_debugUltimateNextSiblingOf](child, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 802, 12, "child.attached == attached");
      while (child[_nextSibling] != null) {
        if (!!dart.equals(child[_nextSibling], child)) dart.assertFailed(null, L0, 804, 14, "child._nextSibling != child");
        child = child[_nextSibling];
        if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 806, 14, "child.attached == attached");
      }
      return dart.equals(child, equals);
    }
    [_highlightConflictingLayer](child) {
      let t0, t0$;
      let recorder = ui.PictureRecorder.new();
      let canvas = ui.Canvas.new(recorder);
      canvas.drawPath(child.clipPath, (t0 = ui.Paint.new(), (() => {
        t0.color = C2 || CT.C2;
        t0.style = ui.PaintingStyle.stroke;
        t0.strokeWidth = dart.notNull(child.elevation) + 10.0;
        return t0;
      })()));
      let pictureLayer = (t0$ = new layer$.PictureLayer.new(child.clipPath.getBounds()), (() => {
        t0$.picture = recorder.endRecording();
        t0$.debugCreator = child;
        return t0$;
      })());
      child.append(pictureLayer);
      return pictureLayer;
    }
    [_processConflictingPhysicalLayers](predecessor, child) {
      assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("Painting order is out of order with respect to elevation.\n" + "See https://api.flutter.dev/flutter/rendering/debugCheckElevationsEnabled.html " + "for more details."), library: "rendering library", context: new assertions.ErrorDescription.new("during compositing"), informationCollector: dart.fn(() => JSArrayOfDiagnosticsNodeL().of([child.toDiagnosticsNode({name: "Attempted to composite layer", style: diagnostics.DiagnosticsTreeStyle.errorProperty}), predecessor.toDiagnosticsNode({name: "after layer", style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new assertions.ErrorDescription.new("which occupies the same area at a higher elevation.")]), VoidToListLOfDiagnosticsNodeL())}));
      return JSArrayOfPictureLayerL().of([this[_highlightConflictingLayer](predecessor), this[_highlightConflictingLayer](child)]);
    }
    [_debugCheckElevations]() {
      let t0;
      let physicalModelLayers = this.depthFirstIterateChildren()[$whereType](PhysicalModelLayerL())[$toList]();
      let addedLayers = JSArrayOfPictureLayerL().of([]);
      for (let i = 0; i < dart.notNull(physicalModelLayers[$length]); i = i + 1) {
        let physicalModelLayer = physicalModelLayers[$_get](i);
        if (!!dart.equals((t0 = physicalModelLayer.lastChild, t0 == null ? null : t0.debugCreator), physicalModelLayer)) dart.assertFailed("debugCheckElevations has either already visited this layer or failed " + "to remove the added picture from it.", L0, 864, 9, "physicalModelLayer.lastChild?.debugCreator != physicalModelLayer");
        let accumulatedElevation = physicalModelLayer.elevation;
        let ancestor = physicalModelLayer.parent;
        while (ancestor != null) {
          if (PhysicalModelLayerL().is(ancestor)) {
            accumulatedElevation = dart.notNull(accumulatedElevation) + dart.notNull(ancestor.elevation);
          }
          ancestor = ancestor.parent;
        }
        for (let j = 0; j <= i; j = j + 1) {
          let predecessor = physicalModelLayers[$_get](j);
          let predecessorAccumulatedElevation = predecessor.elevation;
          ancestor = predecessor.parent;
          while (ancestor != null) {
            if (dart.equals(ancestor, predecessor)) {
              continue;
            }
            if (PhysicalModelLayerL().is(ancestor)) {
              predecessorAccumulatedElevation = dart.notNull(predecessorAccumulatedElevation) + dart.notNull(ancestor.elevation);
            }
            ancestor = ancestor.parent;
          }
          if (dart.notNull(predecessorAccumulatedElevation) <= dart.notNull(accumulatedElevation)) {
            continue;
          }
          let intersection = ui.Path.combine(ui.PathOperation.intersect, predecessor[_debugTransformedClipPath], physicalModelLayer[_debugTransformedClipPath]);
          if (intersection != null && dart.test(intersection.computeMetrics()[$any](dart.fn(metric => dart.notNull(metric.length) > 0, PathMetricLToboolL())))) {
            addedLayers[$addAll](this[_processConflictingPhysicalLayers](predecessor, physicalModelLayer));
          }
        }
      }
      return addedLayers;
    }
    updateSubtreeNeedsAddToScene() {
      super.updateSubtreeNeedsAddToScene();
      let child = this.firstChild;
      while (child != null) {
        child.updateSubtreeNeedsAddToScene();
        this[_needsAddToScene] = dart.test(this[_needsAddToScene]) || dart.test(child[_needsAddToScene]);
        child = child.nextSibling;
      }
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      for (let child = this.lastChild; child != null; child = child.previousSibling) {
        let isAbsorbed = child.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
        if (dart.test(isAbsorbed)) return true;
        if (dart.test(onlyFirst) && dart.test(result.entries[$isNotEmpty])) return isAbsorbed;
      }
      return false;
    }
    attach(owner) {
      super.attach(owner);
      let child = this.firstChild;
      while (child != null) {
        child.attach(owner);
        child = child.nextSibling;
      }
    }
    detach() {
      super.detach();
      let child = this.firstChild;
      while (child != null) {
        child.detach();
        child = child.nextSibling;
      }
    }
    append(child) {
      if (!!dart.equals(child, this)) dart.assertFailed(null, L0, 951, 12, "child != this");
      if (!!dart.equals(child, this.firstChild)) dart.assertFailed(null, L0, 952, 12, "child != firstChild");
      if (!!dart.equals(child, this.lastChild)) dart.assertFailed(null, L0, 953, 12, "child != lastChild");
      if (!(child.parent == null)) dart.assertFailed(null, L0, 954, 12, "child.parent == null");
      if (!!dart.test(child.attached)) dart.assertFailed(null, L0, 955, 12, "!child.attached");
      if (!(child.nextSibling == null)) dart.assertFailed(null, L0, 956, 12, "child.nextSibling == null");
      if (!(child.previousSibling == null)) dart.assertFailed(null, L0, 957, 12, "child.previousSibling == null");
      if (!dart.test(dart.fn(() => {
        let node = this;
        while (node.parent != null)
          node = node.parent;
        if (!!dart.equals(node, child)) dart.assertFailed(null, L0, 962, 14, "node != child");
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 958, 12, "() {\r\n      Layer node = this;\r\n      while (node.parent != null)\r\n        node = node.parent;\r\n      assert(node != child); // indicates we are about to create a cycle\r\n      return true;\r\n    }()");
      this.adoptChild(child);
      child[_previousSibling] = this.lastChild;
      if (this.lastChild != null) this.lastChild[_nextSibling] = child;
      this[_lastChild] = child;
      this[_firstChild] == null ? this[_firstChild] = child : null;
      if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 971, 12, "child.attached == attached");
    }
    [_removeChild](child) {
      if (!dart.equals(child.parent, this)) dart.assertFailed(null, L0, 976, 12, "child.parent == this");
      if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 977, 12, "child.attached == attached");
      if (!dart.test(this[_debugUltimatePreviousSiblingOf](child, {equals: this.firstChild}))) dart.assertFailed(null, L0, 978, 12, "_debugUltimatePreviousSiblingOf(child, equals: firstChild)");
      if (!dart.test(this[_debugUltimateNextSiblingOf](child, {equals: this.lastChild}))) dart.assertFailed(null, L0, 979, 12, "_debugUltimateNextSiblingOf(child, equals: lastChild)");
      if (child[_previousSibling] == null) {
        if (!dart.equals(this[_firstChild], child)) dart.assertFailed(null, L0, 981, 14, "_firstChild == child");
        this[_firstChild] = child[_nextSibling];
      } else {
        child[_previousSibling][_nextSibling] = child.nextSibling;
      }
      if (child[_nextSibling] == null) {
        if (!dart.equals(this.lastChild, child)) dart.assertFailed(null, L0, 987, 14, "lastChild == child");
        this[_lastChild] = child.previousSibling;
      } else {
        child.nextSibling[_previousSibling] = child.previousSibling;
      }
      if (!(this.firstChild == null)[$_equals](this.lastChild == null)) dart.assertFailed(null, L0, 992, 12, "(firstChild == null) == (lastChild == null)");
      if (!(this.firstChild == null || dart.equals(this.firstChild.attached, this.attached))) dart.assertFailed(null, L0, 993, 12, "firstChild == null || firstChild.attached == attached");
      if (!(this.lastChild == null || dart.equals(this.lastChild.attached, this.attached))) dart.assertFailed(null, L0, 994, 12, "lastChild == null || lastChild.attached == attached");
      if (!(this.firstChild == null || dart.test(this[_debugUltimateNextSiblingOf](this.firstChild, {equals: this.lastChild})))) dart.assertFailed(null, L0, 995, 12, "firstChild == null || _debugUltimateNextSiblingOf(firstChild, equals: lastChild)");
      if (!(this.lastChild == null || dart.test(this[_debugUltimatePreviousSiblingOf](this.lastChild, {equals: this.firstChild})))) dart.assertFailed(null, L0, 996, 12, "lastChild == null || _debugUltimatePreviousSiblingOf(lastChild, equals: firstChild)");
      child[_previousSibling] = null;
      child[_nextSibling] = null;
      this.dropChild(child);
      if (!!dart.test(child.attached)) dart.assertFailed(null, L0, 1000, 12, "!child.attached");
    }
    removeAllChildren() {
      let child = this.firstChild;
      while (child != null) {
        let next = child.nextSibling;
        child[_previousSibling] = null;
        child[_nextSibling] = null;
        if (!dart.equals(child.attached, this.attached)) dart.assertFailed(null, L0, 1010, 14, "child.attached == attached");
        this.dropChild(child);
        child = next;
      }
      this[_firstChild] = null;
      this[_lastChild] = null;
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      this.addChildrenToScene(builder, layerOffset);
    }
    addChildrenToScene(builder, childOffset = C0 || CT.C0) {
      let child = this.firstChild;
      while (child != null) {
        if (dart.equals(childOffset, ui.Offset.zero)) {
          child[_addToSceneWithRetainedRendering](builder);
        } else {
          child.addToScene(builder, childOffset);
        }
        child = child.nextSibling;
      }
    }
    applyTransform(child, transform) {
      if (!(child != null)) dart.assertFailed(null, L0, 1076, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L0, 1077, 12, "transform != null");
    }
    depthFirstIterateChildren() {
      if (this.firstChild == null) return JSArrayOfLayerL().of([]);
      let children = JSArrayOfLayerL().of([]);
      let child = this.firstChild;
      while (child != null) {
        children[$add](child);
        if (ContainerLayerL().is(child)) {
          children[$addAll](child.depthFirstIterateChildren());
        }
        child = child.nextSibling;
      }
      return children;
    }
    debugDescribeChildren() {
      let children = JSArrayOfDiagnosticsNodeL().of([]);
      if (this.firstChild == null) return children;
      let child = this.firstChild;
      let count = 1;
      while (true) {
        children[$add](child.toDiagnosticsNode({name: "child " + dart.str(count)}));
        if (dart.equals(child, this.lastChild)) break;
        count = count + 1;
        child = child.nextSibling;
      }
      return children;
    }
  };
  (layer$.ContainerLayer.new = function() {
    this[_firstChild] = null;
    this[_lastChild] = null;
    layer$.ContainerLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ContainerLayer.prototype;
  dart.addTypeTests(layer$.ContainerLayer);
  dart.addTypeCaches(layer$.ContainerLayer);
  dart.setMethodSignature(layer$.ContainerLayer, () => ({
    __proto__: dart.getMethods(layer$.ContainerLayer.__proto__),
    buildScene: dart.fnType(dart.legacy(ui.Scene), [dart.legacy(ui.SceneBuilder)]),
    [_debugUltimatePreviousSiblingOf]: dart.fnType(dart.legacy(core.bool), [dart.legacy(layer$.Layer)], {equals: dart.legacy(layer$.Layer)}, {}),
    [_debugUltimateNextSiblingOf]: dart.fnType(dart.legacy(core.bool), [dart.legacy(layer$.Layer)], {equals: dart.legacy(layer$.Layer)}, {}),
    [_highlightConflictingLayer]: dart.fnType(dart.legacy(layer$.PictureLayer), [dart.legacy(layer$.PhysicalModelLayer)]),
    [_processConflictingPhysicalLayers]: dart.fnType(dart.legacy(core.List$(dart.legacy(layer$.PictureLayer))), [dart.legacy(layer$.PhysicalModelLayer), dart.legacy(layer$.PhysicalModelLayer)]),
    [_debugCheckElevations]: dart.fnType(dart.legacy(core.List$(dart.legacy(layer$.PictureLayer))), []),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}]),
    attach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    append: dart.fnType(dart.void, [dart.legacy(layer$.Layer)]),
    [_removeChild]: dart.fnType(dart.void, [dart.legacy(layer$.Layer)]),
    removeAllChildren: dart.fnType(dart.void, []),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    addChildrenToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    applyTransform: dart.fnType(dart.void, [dart.legacy(layer$.Layer), dart.legacy(vector_math_64.Matrix4)]),
    depthFirstIterateChildren: dart.fnType(dart.legacy(core.List$(dart.legacy(layer$.Layer))), []),
    debugDescribeChildren: dart.fnType(dart.legacy(core.List$(dart.legacy(diagnostics.DiagnosticsNode))), [])
  }));
  dart.setGetterSignature(layer$.ContainerLayer, () => ({
    __proto__: dart.getGetters(layer$.ContainerLayer.__proto__),
    firstChild: dart.legacy(layer$.Layer),
    lastChild: dart.legacy(layer$.Layer),
    hasChildren: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(layer$.ContainerLayer, L1);
  dart.setFieldSignature(layer$.ContainerLayer, () => ({
    __proto__: dart.getFields(layer$.ContainerLayer.__proto__),
    [_firstChild]: dart.fieldType(dart.legacy(layer$.Layer)),
    [_lastChild]: dart.fieldType(dart.legacy(layer$.Layer))
  }));
  var _offset = dart.privateName(layer$, "_offset");
  layer$.OffsetLayer = class OffsetLayer extends layer$.ContainerLayer {
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!dart.equals(value, this[_offset])) {
        this.markNeedsAddToScene();
      }
      this[_offset] = value;
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return super.findAnnotations(dart.legacy(S), result, localPosition['-'](this.offset), {onlyFirst: onlyFirst});
    }
    applyTransform(child, transform) {
      if (!(child != null)) dart.assertFailed(null, L0, 1155, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L0, 1156, 12, "transform != null");
      transform.multiply(vector_math_64.Matrix4.translationValues(this.offset.dx, this.offset.dy, 0.0));
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      this.engineLayer = builder.pushOffset(dart.notNull(layerOffset.dx) + dart.notNull(this.offset.dx), dart.notNull(layerOffset.dy) + dart.notNull(this.offset.dy), {oldLayer: OffsetEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder);
      builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("offset", this.offset));
    }
    toImage(bounds, opts) {
      let pixelRatio = opts && 'pixelRatio' in opts ? opts.pixelRatio : 1;
      return async.async(ImageL(), (function* toImage() {
        if (!(bounds != null)) dart.assertFailed(null, L0, 1199, 12, "bounds != null");
        if (!(pixelRatio != null)) dart.assertFailed(null, L0, 1200, 12, "pixelRatio != null");
        let builder = ui.SceneBuilder.new();
        let transform = vector_math_64.Matrix4.translationValues((-dart.notNull(bounds.left) - dart.notNull(this.offset.dx)) * dart.notNull(pixelRatio), (-dart.notNull(bounds.top) - dart.notNull(this.offset.dy)) * dart.notNull(pixelRatio), 0.0);
        transform.scale(pixelRatio, pixelRatio);
        builder.pushTransform(transform.storage);
        let scene = this.buildScene(builder);
        try {
          return yield scene.toImage((dart.notNull(pixelRatio) * dart.notNull(bounds.width))[$ceil](), (dart.notNull(pixelRatio) * dart.notNull(bounds.height))[$ceil]());
        } finally {
          scene.dispose();
        }
      }).bind(this));
    }
  };
  (layer$.OffsetLayer.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : C0 || CT.C0;
    this[_offset] = offset;
    layer$.OffsetLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.OffsetLayer.prototype;
  dart.addTypeTests(layer$.OffsetLayer);
  dart.addTypeCaches(layer$.OffsetLayer);
  dart.setMethodSignature(layer$.OffsetLayer, () => ({
    __proto__: dart.getMethods(layer$.OffsetLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}]),
    toImage: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Image))), [dart.legacy(ui.Rect)], {pixelRatio: dart.legacy(core.double)}, {})
  }));
  dart.setGetterSignature(layer$.OffsetLayer, () => ({
    __proto__: dart.getGetters(layer$.OffsetLayer.__proto__),
    offset: dart.legacy(ui.Offset)
  }));
  dart.setSetterSignature(layer$.OffsetLayer, () => ({
    __proto__: dart.getSetters(layer$.OffsetLayer.__proto__),
    offset: dart.legacy(ui.Offset)
  }));
  dart.setLibraryUri(layer$.OffsetLayer, L1);
  dart.setFieldSignature(layer$.OffsetLayer, () => ({
    __proto__: dart.getFields(layer$.OffsetLayer.__proto__),
    [_offset]: dart.fieldType(dart.legacy(ui.Offset))
  }));
  var C3;
  var _clipRect = dart.privateName(layer$, "_clipRect");
  var _clipBehavior = dart.privateName(layer$, "_clipBehavior");
  layer$.ClipRectLayer = class ClipRectLayer extends layer$.ContainerLayer {
    get clipRect() {
      return this[_clipRect];
    }
    set clipRect(value) {
      if (!dart.equals(value, this[_clipRect])) {
        this[_clipRect] = value;
        this.markNeedsAddToScene();
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1267, 12, "value != null");
      if (!!dart.equals(value, ui.Clip.none)) dart.assertFailed(null, L0, 1268, 12, "value != Clip.none");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsAddToScene();
      }
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (!dart.test(this.clipRect.contains(localPosition))) return false;
      return super.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.clipRect != null)) dart.assertFailed(null, L0, 1285, 12, "clipRect != null");
      if (!(this.clipBehavior != null)) dart.assertFailed(null, L0, 1286, 12, "clipBehavior != null");
      let enabled = true;
      if (!dart.test(dart.fn(() => {
        enabled = !dart.test(debug$.debugDisableClipLayers);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 1288, 12, "() {\r\n      enabled = !debugDisableClipLayers;\r\n      return true;\r\n    }()");
      if (enabled) {
        let shiftedClipRect = dart.equals(layerOffset, ui.Offset.zero) ? this.clipRect : this.clipRect.shift(layerOffset);
        this.engineLayer = builder.pushClipRect(shiftedClipRect, {clipBehavior: this.clipBehavior, oldLayer: ClipRectEngineLayerL().as(this[_engineLayer])});
      } else {
        this.engineLayer = null;
      }
      this.addChildrenToScene(builder, layerOffset);
      if (enabled) builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfRectL()).new("clipRect", this.clipRect));
      properties.add(new (DiagnosticsPropertyOfClipL()).new("clipBehavior", this.clipBehavior));
    }
  };
  (layer$.ClipRectLayer.new = function(opts) {
    let clipRect = opts && 'clipRect' in opts ? opts.clipRect : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C3 || CT.C3;
    this[_clipRect] = clipRect;
    this[_clipBehavior] = clipBehavior;
    if (!(clipBehavior != null)) dart.assertFailed(null, L0, 1241, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L0, 1242, 15, "clipBehavior != Clip.none");
    layer$.ClipRectLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ClipRectLayer.prototype;
  dart.addTypeTests(layer$.ClipRectLayer);
  dart.addTypeCaches(layer$.ClipRectLayer);
  dart.setMethodSignature(layer$.ClipRectLayer, () => ({
    __proto__: dart.getMethods(layer$.ClipRectLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.ClipRectLayer, () => ({
    __proto__: dart.getGetters(layer$.ClipRectLayer.__proto__),
    clipRect: dart.legacy(ui.Rect),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setSetterSignature(layer$.ClipRectLayer, () => ({
    __proto__: dart.getSetters(layer$.ClipRectLayer.__proto__),
    clipRect: dart.legacy(ui.Rect),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setLibraryUri(layer$.ClipRectLayer, L1);
  dart.setFieldSignature(layer$.ClipRectLayer, () => ({
    __proto__: dart.getFields(layer$.ClipRectLayer.__proto__),
    [_clipRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip))
  }));
  var C4;
  var _clipRRect = dart.privateName(layer$, "_clipRRect");
  layer$.ClipRRectLayer = class ClipRRectLayer extends layer$.ContainerLayer {
    get clipRRect() {
      return this[_clipRRect];
    }
    set clipRRect(value) {
      if (!dart.equals(value, this[_clipRRect])) {
        this[_clipRRect] = value;
        this.markNeedsAddToScene();
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1352, 12, "value != null");
      if (!!dart.equals(value, ui.Clip.none)) dart.assertFailed(null, L0, 1353, 12, "value != Clip.none");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsAddToScene();
      }
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (!dart.test(this.clipRRect.contains(localPosition))) return false;
      return super.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.clipRRect != null)) dart.assertFailed(null, L0, 1370, 12, "clipRRect != null");
      if (!(this.clipBehavior != null)) dart.assertFailed(null, L0, 1371, 12, "clipBehavior != null");
      let enabled = true;
      if (!dart.test(dart.fn(() => {
        enabled = !dart.test(debug$.debugDisableClipLayers);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 1373, 12, "() {\r\n      enabled = !debugDisableClipLayers;\r\n      return true;\r\n    }()");
      if (enabled) {
        let shiftedClipRRect = dart.equals(layerOffset, ui.Offset.zero) ? this.clipRRect : this.clipRRect.shift(layerOffset);
        this.engineLayer = builder.pushClipRRect(shiftedClipRRect, {clipBehavior: this.clipBehavior, oldLayer: ClipRRectEngineLayerL().as(this[_engineLayer])});
      } else {
        this.engineLayer = null;
      }
      this.addChildrenToScene(builder, layerOffset);
      if (enabled) builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfRRectL()).new("clipRRect", this.clipRRect));
      properties.add(new (DiagnosticsPropertyOfClipL()).new("clipBehavior", this.clipBehavior));
    }
  };
  (layer$.ClipRRectLayer.new = function(opts) {
    let clipRRect = opts && 'clipRRect' in opts ? opts.clipRRect : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C4 || CT.C4;
    this[_clipRRect] = clipRRect;
    this[_clipBehavior] = clipBehavior;
    if (!(clipBehavior != null)) dart.assertFailed(null, L0, 1330, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L0, 1331, 15, "clipBehavior != Clip.none");
    layer$.ClipRRectLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ClipRRectLayer.prototype;
  dart.addTypeTests(layer$.ClipRRectLayer);
  dart.addTypeCaches(layer$.ClipRRectLayer);
  dart.setMethodSignature(layer$.ClipRRectLayer, () => ({
    __proto__: dart.getMethods(layer$.ClipRRectLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.ClipRRectLayer, () => ({
    __proto__: dart.getGetters(layer$.ClipRRectLayer.__proto__),
    clipRRect: dart.legacy(ui.RRect),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setSetterSignature(layer$.ClipRRectLayer, () => ({
    __proto__: dart.getSetters(layer$.ClipRRectLayer.__proto__),
    clipRRect: dart.legacy(ui.RRect),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setLibraryUri(layer$.ClipRRectLayer, L1);
  dart.setFieldSignature(layer$.ClipRRectLayer, () => ({
    __proto__: dart.getFields(layer$.ClipRRectLayer.__proto__),
    [_clipRRect]: dart.fieldType(dart.legacy(ui.RRect)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip))
  }));
  var _clipPath = dart.privateName(layer$, "_clipPath");
  layer$.ClipPathLayer = class ClipPathLayer extends layer$.ContainerLayer {
    get clipPath() {
      return this[_clipPath];
    }
    set clipPath(value) {
      if (!dart.equals(value, this[_clipPath])) {
        this[_clipPath] = value;
        this.markNeedsAddToScene();
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1437, 12, "value != null");
      if (!!dart.equals(value, ui.Clip.none)) dart.assertFailed(null, L0, 1438, 12, "value != Clip.none");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsAddToScene();
      }
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (!dart.test(this.clipPath.contains(localPosition))) return false;
      return super.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.clipPath != null)) dart.assertFailed(null, L0, 1455, 12, "clipPath != null");
      if (!(this.clipBehavior != null)) dart.assertFailed(null, L0, 1456, 12, "clipBehavior != null");
      let enabled = true;
      if (!dart.test(dart.fn(() => {
        enabled = !dart.test(debug$.debugDisableClipLayers);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 1458, 12, "() {\r\n      enabled = !debugDisableClipLayers;\r\n      return true;\r\n    }()");
      if (enabled) {
        let shiftedPath = dart.equals(layerOffset, ui.Offset.zero) ? this.clipPath : this.clipPath.shift(layerOffset);
        this.engineLayer = builder.pushClipPath(shiftedPath, {clipBehavior: this.clipBehavior, oldLayer: ClipPathEngineLayerL().as(this[_engineLayer])});
      } else {
        this.engineLayer = null;
      }
      this.addChildrenToScene(builder, layerOffset);
      if (enabled) builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfClipL()).new("clipBehavior", this.clipBehavior));
    }
  };
  (layer$.ClipPathLayer.new = function(opts) {
    let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C4 || CT.C4;
    this[_clipPath] = clipPath;
    this[_clipBehavior] = clipBehavior;
    if (!(clipBehavior != null)) dart.assertFailed(null, L0, 1415, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L0, 1416, 15, "clipBehavior != Clip.none");
    layer$.ClipPathLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ClipPathLayer.prototype;
  dart.addTypeTests(layer$.ClipPathLayer);
  dart.addTypeCaches(layer$.ClipPathLayer);
  dart.setMethodSignature(layer$.ClipPathLayer, () => ({
    __proto__: dart.getMethods(layer$.ClipPathLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.ClipPathLayer, () => ({
    __proto__: dart.getGetters(layer$.ClipPathLayer.__proto__),
    clipPath: dart.legacy(ui.Path),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setSetterSignature(layer$.ClipPathLayer, () => ({
    __proto__: dart.getSetters(layer$.ClipPathLayer.__proto__),
    clipPath: dart.legacy(ui.Path),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setLibraryUri(layer$.ClipPathLayer, L1);
  dart.setFieldSignature(layer$.ClipPathLayer, () => ({
    __proto__: dart.getFields(layer$.ClipPathLayer.__proto__),
    [_clipPath]: dart.fieldType(dart.legacy(ui.Path)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip))
  }));
  var _colorFilter = dart.privateName(layer$, "_colorFilter");
  layer$.ColorFilterLayer = class ColorFilterLayer extends layer$.ContainerLayer {
    get colorFilter() {
      return this[_colorFilter];
    }
    set colorFilter(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1501, 12, "value != null");
      if (!dart.equals(value, this[_colorFilter])) {
        this[_colorFilter] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.colorFilter != null)) dart.assertFailed(null, L0, 1510, 12, "colorFilter != null");
      this.engineLayer = builder.pushColorFilter(this.colorFilter, {oldLayer: ColorFilterEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder, layerOffset);
      builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfColorFilterL()).new("colorFilter", this.colorFilter));
    }
  };
  (layer$.ColorFilterLayer.new = function(opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[_colorFilter] = colorFilter;
    layer$.ColorFilterLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ColorFilterLayer.prototype;
  dart.addTypeTests(layer$.ColorFilterLayer);
  dart.addTypeCaches(layer$.ColorFilterLayer);
  dart.setGetterSignature(layer$.ColorFilterLayer, () => ({
    __proto__: dart.getGetters(layer$.ColorFilterLayer.__proto__),
    colorFilter: dart.legacy(ui.ColorFilter)
  }));
  dart.setSetterSignature(layer$.ColorFilterLayer, () => ({
    __proto__: dart.getSetters(layer$.ColorFilterLayer.__proto__),
    colorFilter: dart.legacy(ui.ColorFilter)
  }));
  dart.setLibraryUri(layer$.ColorFilterLayer, L1);
  dart.setFieldSignature(layer$.ColorFilterLayer, () => ({
    __proto__: dart.getFields(layer$.ColorFilterLayer.__proto__),
    [_colorFilter]: dart.fieldType(dart.legacy(ui.ColorFilter))
  }));
  var _imageFilter = dart.privateName(layer$, "_imageFilter");
  layer$.ImageFilterLayer = class ImageFilterLayer extends layer$.ContainerLayer {
    get imageFilter() {
      return this[_imageFilter];
    }
    set imageFilter(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1543, 12, "value != null");
      if (!dart.equals(value, this[_imageFilter])) {
        this[_imageFilter] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.imageFilter != null)) dart.assertFailed(null, L0, 1552, 12, "imageFilter != null");
      this.engineLayer = builder.pushImageFilter(this.imageFilter, {oldLayer: ImageFilterEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder, layerOffset);
      builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfImageFilterL()).new("imageFilter", this.imageFilter));
    }
  };
  (layer$.ImageFilterLayer.new = function(opts) {
    let imageFilter = opts && 'imageFilter' in opts ? opts.imageFilter : null;
    this[_imageFilter] = imageFilter;
    layer$.ImageFilterLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ImageFilterLayer.prototype;
  dart.addTypeTests(layer$.ImageFilterLayer);
  dart.addTypeCaches(layer$.ImageFilterLayer);
  dart.setGetterSignature(layer$.ImageFilterLayer, () => ({
    __proto__: dart.getGetters(layer$.ImageFilterLayer.__proto__),
    imageFilter: dart.legacy(ui.ImageFilter)
  }));
  dart.setSetterSignature(layer$.ImageFilterLayer, () => ({
    __proto__: dart.getSetters(layer$.ImageFilterLayer.__proto__),
    imageFilter: dart.legacy(ui.ImageFilter)
  }));
  dart.setLibraryUri(layer$.ImageFilterLayer, L1);
  dart.setFieldSignature(layer$.ImageFilterLayer, () => ({
    __proto__: dart.getFields(layer$.ImageFilterLayer.__proto__),
    [_imageFilter]: dart.fieldType(dart.legacy(ui.ImageFilter))
  }));
  var _lastEffectiveTransform = dart.privateName(layer$, "_lastEffectiveTransform");
  var _invertedTransform = dart.privateName(layer$, "_invertedTransform");
  var _inverseDirty = dart.privateName(layer$, "_inverseDirty");
  var _transform = dart.privateName(layer$, "_transform");
  var _transformOffset = dart.privateName(layer$, "_transformOffset");
  layer$.TransformLayer = class TransformLayer extends layer$.OffsetLayer {
    get transform() {
      return this[_transform];
    }
    set transform(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1594, 12, "value != null");
      if (!dart.test(value.storage[$every](dart.fn(component => component[$isFinite], doubleLToboolL())))) dart.assertFailed(null, L0, 1595, 12, "value.storage.every((double component) => component.isFinite)");
      if (dart.equals(value, this[_transform])) return;
      this[_transform] = value;
      this[_inverseDirty] = true;
      this.markNeedsAddToScene();
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      let t0;
      if (!(this.transform != null)) dart.assertFailed(null, L0, 1609, 12, "transform != null");
      this[_lastEffectiveTransform] = this.transform;
      let totalOffset = this.offset['+'](layerOffset);
      if (!dart.equals(totalOffset, ui.Offset.zero)) {
        this[_lastEffectiveTransform] = (t0 = vector_math_64.Matrix4.translationValues(totalOffset.dx, totalOffset.dy, 0.0), (() => {
          t0.multiply(this[_lastEffectiveTransform]);
          return t0;
        })());
      }
      this.engineLayer = builder.pushTransform(this[_lastEffectiveTransform].storage, {oldLayer: TransformEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder);
      builder.pop();
    }
    [_transformOffset](localPosition) {
      if (dart.test(this[_inverseDirty])) {
        this[_invertedTransform] = vector_math_64.Matrix4.tryInvert(events.PointerEvent.removePerspectiveTransform(this.transform));
        this[_inverseDirty] = false;
      }
      if (this[_invertedTransform] == null) return null;
      return matrix_utils.MatrixUtils.transformPoint(this[_invertedTransform], localPosition);
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      let transformedOffset = this[_transformOffset](localPosition);
      if (transformedOffset == null) return false;
      return super.findAnnotations(dart.legacy(S), result, transformedOffset, {onlyFirst: onlyFirst});
    }
    applyTransform(child, transform) {
      if (!(child != null)) dart.assertFailed(null, L0, 1648, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L0, 1649, 12, "transform != null");
      if (!(this[_lastEffectiveTransform] != null || this.transform != null)) dart.assertFailed(null, L0, 1650, 12, "_lastEffectiveTransform != null || this.transform != null");
      if (this[_lastEffectiveTransform] == null) {
        transform.multiply(this.transform);
      } else {
        transform.multiply(this[_lastEffectiveTransform]);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new matrix_utils.TransformProperty.new("transform", this.transform));
    }
  };
  (layer$.TransformLayer.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let offset = opts && 'offset' in opts ? opts.offset : C0 || CT.C0;
    this[_lastEffectiveTransform] = null;
    this[_invertedTransform] = null;
    this[_inverseDirty] = true;
    this[_transform] = transform;
    layer$.TransformLayer.__proto__.new.call(this, {offset: offset});
    ;
  }).prototype = layer$.TransformLayer.prototype;
  dart.addTypeTests(layer$.TransformLayer);
  dart.addTypeCaches(layer$.TransformLayer);
  dart.setMethodSignature(layer$.TransformLayer, () => ({
    __proto__: dart.getMethods(layer$.TransformLayer.__proto__),
    [_transformOffset]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset)]),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.TransformLayer, () => ({
    __proto__: dart.getGetters(layer$.TransformLayer.__proto__),
    transform: dart.legacy(vector_math_64.Matrix4)
  }));
  dart.setSetterSignature(layer$.TransformLayer, () => ({
    __proto__: dart.getSetters(layer$.TransformLayer.__proto__),
    transform: dart.legacy(vector_math_64.Matrix4)
  }));
  dart.setLibraryUri(layer$.TransformLayer, L1);
  dart.setFieldSignature(layer$.TransformLayer, () => ({
    __proto__: dart.getFields(layer$.TransformLayer.__proto__),
    [_transform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_lastEffectiveTransform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_invertedTransform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_inverseDirty]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _alpha = dart.privateName(layer$, "_alpha");
  layer$.OpacityLayer = class OpacityLayer extends layer$.ContainerLayer {
    get alpha() {
      return this[_alpha];
    }
    set alpha(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1694, 12, "value != null");
      if (value != this[_alpha]) {
        this[_alpha] = value;
        this.markNeedsAddToScene();
      }
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!dart.equals(value, this[_offset])) {
        this[_offset] = value;
        this.markNeedsAddToScene();
      }
    }
    applyTransform(child, transform) {
      if (!(child != null)) dart.assertFailed(null, L0, 1713, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L0, 1714, 12, "transform != null");
      transform.translate(this.offset.dx, this.offset.dy);
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.alpha != null)) dart.assertFailed(null, L0, 1720, 12, "alpha != null");
      let enabled = this.firstChild != null;
      if (!dart.test(dart.fn(() => {
        enabled = enabled && !dart.test(debug$.debugDisableOpacityLayers);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 1722, 12, "() {\r\n      enabled = enabled && !debugDisableOpacityLayers;\r\n      return true;\r\n    }()");
      if (enabled)
        this.engineLayer = builder.pushOpacity(this.alpha, {offset: this.offset['+'](layerOffset), oldLayer: OpacityEngineLayerL().as(this[_engineLayer])});
      else
        this.engineLayer = null;
      this.addChildrenToScene(builder);
      if (enabled) builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.IntProperty.new("alpha", this.alpha));
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("offset", this.offset));
    }
  };
  (layer$.OpacityLayer.new = function(opts) {
    let alpha = opts && 'alpha' in opts ? opts.alpha : null;
    let offset = opts && 'offset' in opts ? opts.offset : C0 || CT.C0;
    this[_alpha] = alpha;
    this[_offset] = offset;
    layer$.OpacityLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.OpacityLayer.prototype;
  dart.addTypeTests(layer$.OpacityLayer);
  dart.addTypeCaches(layer$.OpacityLayer);
  dart.setGetterSignature(layer$.OpacityLayer, () => ({
    __proto__: dart.getGetters(layer$.OpacityLayer.__proto__),
    alpha: dart.legacy(core.int),
    offset: dart.legacy(ui.Offset)
  }));
  dart.setSetterSignature(layer$.OpacityLayer, () => ({
    __proto__: dart.getSetters(layer$.OpacityLayer.__proto__),
    alpha: dart.legacy(core.int),
    offset: dart.legacy(ui.Offset)
  }));
  dart.setLibraryUri(layer$.OpacityLayer, L1);
  dart.setFieldSignature(layer$.OpacityLayer, () => ({
    __proto__: dart.getFields(layer$.OpacityLayer.__proto__),
    [_alpha]: dart.fieldType(dart.legacy(core.int)),
    [_offset]: dart.fieldType(dart.legacy(ui.Offset))
  }));
  var _shader = dart.privateName(layer$, "_shader");
  var _maskRect = dart.privateName(layer$, "_maskRect");
  var _blendMode = dart.privateName(layer$, "_blendMode");
  layer$.ShaderMaskLayer = class ShaderMaskLayer extends layer$.ContainerLayer {
    get shader() {
      return this[_shader];
    }
    set shader(value) {
      if (!dart.equals(value, this[_shader])) {
        this[_shader] = value;
        this.markNeedsAddToScene();
      }
    }
    get maskRect() {
      return this[_maskRect];
    }
    set maskRect(value) {
      if (!dart.equals(value, this[_maskRect])) {
        this[_maskRect] = value;
        this.markNeedsAddToScene();
      }
    }
    get blendMode() {
      return this[_blendMode];
    }
    set blendMode(value) {
      if (!dart.equals(value, this[_blendMode])) {
        this[_blendMode] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.shader != null)) dart.assertFailed(null, L0, 1819, 12, "shader != null");
      if (!(this.maskRect != null)) dart.assertFailed(null, L0, 1820, 12, "maskRect != null");
      if (!(this.blendMode != null)) dart.assertFailed(null, L0, 1821, 12, "blendMode != null");
      if (!(layerOffset != null)) dart.assertFailed(null, L0, 1822, 12, "layerOffset != null");
      let shiftedMaskRect = dart.equals(layerOffset, ui.Offset.zero) ? this.maskRect : this.maskRect.shift(layerOffset);
      this.engineLayer = builder.pushShaderMask(this.shader, shiftedMaskRect, this.blendMode, {oldLayer: ShaderMaskEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder, layerOffset);
      builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfShaderL()).new("shader", this.shader));
      properties.add(new (DiagnosticsPropertyOfRectL()).new("maskRect", this.maskRect));
      properties.add(new (DiagnosticsPropertyOfBlendModeL()).new("blendMode", this.blendMode));
    }
  };
  (layer$.ShaderMaskLayer.new = function(opts) {
    let shader = opts && 'shader' in opts ? opts.shader : null;
    let maskRect = opts && 'maskRect' in opts ? opts.maskRect : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    this[_shader] = shader;
    this[_maskRect] = maskRect;
    this[_blendMode] = blendMode;
    layer$.ShaderMaskLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.ShaderMaskLayer.prototype;
  dart.addTypeTests(layer$.ShaderMaskLayer);
  dart.addTypeCaches(layer$.ShaderMaskLayer);
  dart.setGetterSignature(layer$.ShaderMaskLayer, () => ({
    __proto__: dart.getGetters(layer$.ShaderMaskLayer.__proto__),
    shader: dart.legacy(ui.Shader),
    maskRect: dart.legacy(ui.Rect),
    blendMode: dart.legacy(ui.BlendMode)
  }));
  dart.setSetterSignature(layer$.ShaderMaskLayer, () => ({
    __proto__: dart.getSetters(layer$.ShaderMaskLayer.__proto__),
    shader: dart.legacy(ui.Shader),
    maskRect: dart.legacy(ui.Rect),
    blendMode: dart.legacy(ui.BlendMode)
  }));
  dart.setLibraryUri(layer$.ShaderMaskLayer, L1);
  dart.setFieldSignature(layer$.ShaderMaskLayer, () => ({
    __proto__: dart.getFields(layer$.ShaderMaskLayer.__proto__),
    [_shader]: dart.fieldType(dart.legacy(ui.Shader)),
    [_maskRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_blendMode]: dart.fieldType(dart.legacy(ui.BlendMode))
  }));
  var _filter = dart.privateName(layer$, "_filter");
  layer$.BackdropFilterLayer = class BackdropFilterLayer extends layer$.ContainerLayer {
    get filter() {
      return this[_filter];
    }
    set filter(value) {
      if (!dart.equals(value, this[_filter])) {
        this[_filter] = value;
        this.markNeedsAddToScene();
      }
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.filter != null)) dart.assertFailed(null, L0, 1866, 12, "filter != null");
      this.engineLayer = builder.pushBackdropFilter(this.filter, {oldLayer: BackdropFilterEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder, layerOffset);
      builder.pop();
    }
  };
  (layer$.BackdropFilterLayer.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[_filter] = filter;
    layer$.BackdropFilterLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.BackdropFilterLayer.prototype;
  dart.addTypeTests(layer$.BackdropFilterLayer);
  dart.addTypeCaches(layer$.BackdropFilterLayer);
  dart.setGetterSignature(layer$.BackdropFilterLayer, () => ({
    __proto__: dart.getGetters(layer$.BackdropFilterLayer.__proto__),
    filter: dart.legacy(ui.ImageFilter)
  }));
  dart.setSetterSignature(layer$.BackdropFilterLayer, () => ({
    __proto__: dart.getSetters(layer$.BackdropFilterLayer.__proto__),
    filter: dart.legacy(ui.ImageFilter)
  }));
  dart.setLibraryUri(layer$.BackdropFilterLayer, L1);
  dart.setFieldSignature(layer$.BackdropFilterLayer, () => ({
    __proto__: dart.getFields(layer$.BackdropFilterLayer.__proto__),
    [_filter]: dart.fieldType(dart.legacy(ui.ImageFilter))
  }));
  var C5;
  var _elevation = dart.privateName(layer$, "_elevation");
  var _color = dart.privateName(layer$, "_color");
  var _shadowColor = dart.privateName(layer$, "_shadowColor");
  layer$.PhysicalModelLayer = class PhysicalModelLayer extends layer$.ContainerLayer {
    get clipPath() {
      return this[_clipPath];
    }
    set clipPath(value) {
      if (!dart.equals(value, this[_clipPath])) {
        this[_clipPath] = value;
        this.markNeedsAddToScene();
      }
    }
    get [_debugTransformedClipPath]() {
      let ancestor = this.parent;
      let matrix = vector_math_64.Matrix4.identity();
      while (ancestor != null && ancestor.parent != null) {
        ancestor.applyTransform(this, matrix);
        ancestor = ancestor.parent;
      }
      return this.clipPath.transform(matrix.storage);
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 1930, 12, "value != null");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsAddToScene();
      }
    }
    get elevation() {
      return this[_elevation];
    }
    set elevation(value) {
      if (value != this[_elevation]) {
        this[_elevation] = value;
        this.markNeedsAddToScene();
      }
    }
    get color() {
      return this[_color];
    }
    set color(value) {
      if (!dart.equals(value, this[_color])) {
        this[_color] = value;
        this.markNeedsAddToScene();
      }
    }
    get shadowColor() {
      return this[_shadowColor];
    }
    set shadowColor(value) {
      if (!dart.equals(value, this[_shadowColor])) {
        this[_shadowColor] = value;
        this.markNeedsAddToScene();
      }
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (!dart.test(this.clipPath.contains(localPosition))) return false;
      return super.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.clipPath != null)) dart.assertFailed(null, L0, 1989, 12, "clipPath != null");
      if (!(this.clipBehavior != null)) dart.assertFailed(null, L0, 1990, 12, "clipBehavior != null");
      if (!(this.elevation != null)) dart.assertFailed(null, L0, 1991, 12, "elevation != null");
      if (!(this.color != null)) dart.assertFailed(null, L0, 1992, 12, "color != null");
      if (!(this.shadowColor != null)) dart.assertFailed(null, L0, 1993, 12, "shadowColor != null");
      let enabled = true;
      if (!dart.test(dart.fn(() => {
        enabled = !dart.test(debug$.debugDisablePhysicalShapeLayers);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 1996, 12, "() {\r\n      enabled = !debugDisablePhysicalShapeLayers;\r\n      return true;\r\n    }()");
      if (enabled) {
        this.engineLayer = builder.pushPhysicalShape({path: dart.equals(layerOffset, ui.Offset.zero) ? this.clipPath : this.clipPath.shift(layerOffset), elevation: this.elevation, color: this.color, shadowColor: this.shadowColor, clipBehavior: this.clipBehavior, oldLayer: PhysicalShapeEngineLayerL().as(this[_engineLayer])});
      } else {
        this.engineLayer = null;
      }
      this.addChildrenToScene(builder, layerOffset);
      if (enabled) builder.pop();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation));
      properties.add(new colors.ColorProperty.new("color", this.color));
    }
  };
  (layer$.PhysicalModelLayer.new = function(opts) {
    let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C5 || CT.C5;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    this[_clipPath] = clipPath;
    this[_clipBehavior] = clipBehavior;
    this[_elevation] = elevation;
    this[_color] = color;
    this[_shadowColor] = shadowColor;
    layer$.PhysicalModelLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.PhysicalModelLayer.prototype;
  dart.addTypeTests(layer$.PhysicalModelLayer);
  dart.addTypeCaches(layer$.PhysicalModelLayer);
  dart.setMethodSignature(layer$.PhysicalModelLayer, () => ({
    __proto__: dart.getMethods(layer$.PhysicalModelLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.PhysicalModelLayer, () => ({
    __proto__: dart.getGetters(layer$.PhysicalModelLayer.__proto__),
    clipPath: dart.legacy(ui.Path),
    [_debugTransformedClipPath]: dart.legacy(ui.Path),
    clipBehavior: dart.legacy(ui.Clip),
    elevation: dart.legacy(core.double),
    color: dart.legacy(ui.Color),
    shadowColor: dart.legacy(ui.Color)
  }));
  dart.setSetterSignature(layer$.PhysicalModelLayer, () => ({
    __proto__: dart.getSetters(layer$.PhysicalModelLayer.__proto__),
    clipPath: dart.legacy(ui.Path),
    clipBehavior: dart.legacy(ui.Clip),
    elevation: dart.legacy(core.double),
    color: dart.legacy(ui.Color),
    shadowColor: dart.legacy(ui.Color)
  }));
  dart.setLibraryUri(layer$.PhysicalModelLayer, L1);
  dart.setFieldSignature(layer$.PhysicalModelLayer, () => ({
    __proto__: dart.getFields(layer$.PhysicalModelLayer.__proto__),
    [_clipPath]: dart.fieldType(dart.legacy(ui.Path)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip)),
    [_elevation]: dart.fieldType(dart.legacy(core.double)),
    [_color]: dart.fieldType(dart.legacy(ui.Color)),
    [_shadowColor]: dart.fieldType(dart.legacy(ui.Color))
  }));
  var _leader = dart.privateName(layer$, "_leader");
  layer$.LayerLink = class LayerLink extends core.Object {
    get leader() {
      return this[_leader];
    }
    toString() {
      return dart.str(diagnostics.describeIdentity(this)) + "(" + (this[_leader] != null ? "<linked>" : "<dangling>") + ")";
    }
  };
  (layer$.LayerLink.new = function() {
    this[_leader] = null;
    ;
  }).prototype = layer$.LayerLink.prototype;
  dart.addTypeTests(layer$.LayerLink);
  dart.addTypeCaches(layer$.LayerLink);
  dart.setMethodSignature(layer$.LayerLink, () => ({
    __proto__: dart.getMethods(layer$.LayerLink.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(layer$.LayerLink, () => ({
    __proto__: dart.getGetters(layer$.LayerLink.__proto__),
    leader: dart.legacy(layer$.LeaderLayer)
  }));
  dart.setLibraryUri(layer$.LayerLink, L1);
  dart.setFieldSignature(layer$.LayerLink, () => ({
    __proto__: dart.getFields(layer$.LayerLink.__proto__),
    [_leader]: dart.fieldType(dart.legacy(layer$.LeaderLayer))
  }));
  dart.defineExtensionMethods(layer$.LayerLink, ['toString']);
  var _lastOffset = dart.privateName(layer$, "_lastOffset");
  var _link = dart.privateName(layer$, "_link");
  var offset$ = dart.privateName(layer$, "LeaderLayer.offset");
  layer$.LeaderLayer = class LeaderLayer extends layer$.ContainerLayer {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    get link() {
      return this[_link];
    }
    set link(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 2068, 12, "value != null");
      this[_link] = value;
    }
    get alwaysNeedsAddToScene() {
      return true;
    }
    attach(owner) {
      super.attach(owner);
      if (!(this.link.leader == null)) dart.assertFailed(null, L0, 2089, 12, "link.leader == null");
      this[_lastOffset] = null;
      this.link[_leader] = this;
    }
    detach() {
      if (!dart.equals(this.link.leader, this)) dart.assertFailed(null, L0, 2096, 12, "link.leader == this");
      this.link[_leader] = null;
      this[_lastOffset] = null;
      super.detach();
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return super.findAnnotations(dart.legacy(S), result, localPosition['-'](this.offset), {onlyFirst: onlyFirst});
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.offset != null)) dart.assertFailed(null, L0, 2117, 12, "offset != null");
      this[_lastOffset] = this.offset['+'](layerOffset);
      if (!dart.equals(this[_lastOffset], ui.Offset.zero)) this.engineLayer = builder.pushTransform(vector_math_64.Matrix4.translationValues(this[_lastOffset].dx, this[_lastOffset].dy, 0.0).storage, {oldLayer: TransformEngineLayerL().as(this[_engineLayer])});
      this.addChildrenToScene(builder);
      if (!dart.equals(this[_lastOffset], ui.Offset.zero)) builder.pop();
    }
    applyTransform(child, transform) {
      if (!(this[_lastOffset] != null)) dart.assertFailed(null, L0, 2138, 12, "_lastOffset != null");
      if (!dart.equals(this[_lastOffset], ui.Offset.zero)) transform.translate(this[_lastOffset].dx, this[_lastOffset].dy);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("offset", this.offset));
      properties.add(new (DiagnosticsPropertyOfLayerLinkL()).new("link", this.link));
    }
  };
  (layer$.LeaderLayer.new = function(opts) {
    let link = opts && 'link' in opts ? opts.link : null;
    let offset = opts && 'offset' in opts ? opts.offset : C0 || CT.C0;
    this[_lastOffset] = null;
    this[offset$] = offset;
    if (!(link != null)) dart.assertFailed(null, L0, 2060, 81, "link != null");
    this[_link] = link;
    layer$.LeaderLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.LeaderLayer.prototype;
  dart.addTypeTests(layer$.LeaderLayer);
  dart.addTypeCaches(layer$.LeaderLayer);
  dart.setMethodSignature(layer$.LeaderLayer, () => ({
    __proto__: dart.getMethods(layer$.LeaderLayer.__proto__),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(layer$.LeaderLayer, () => ({
    __proto__: dart.getGetters(layer$.LeaderLayer.__proto__),
    link: dart.legacy(layer$.LayerLink)
  }));
  dart.setSetterSignature(layer$.LeaderLayer, () => ({
    __proto__: dart.getSetters(layer$.LeaderLayer.__proto__),
    link: dart.legacy(layer$.LayerLink)
  }));
  dart.setLibraryUri(layer$.LeaderLayer, L1);
  dart.setFieldSignature(layer$.LeaderLayer, () => ({
    __proto__: dart.getFields(layer$.LeaderLayer.__proto__),
    [_link]: dart.fieldType(dart.legacy(layer$.LayerLink)),
    offset: dart.fieldType(dart.legacy(ui.Offset)),
    [_lastOffset]: dart.fieldType(dart.legacy(ui.Offset))
  }));
  var _lastTransform = dart.privateName(layer$, "_lastTransform");
  var _collectTransformForLayerChain = dart.privateName(layer$, "_collectTransformForLayerChain");
  var _establishTransform = dart.privateName(layer$, "_establishTransform");
  var showWhenUnlinked$ = dart.privateName(layer$, "FollowerLayer.showWhenUnlinked");
  var unlinkedOffset$ = dart.privateName(layer$, "FollowerLayer.unlinkedOffset");
  var linkedOffset$ = dart.privateName(layer$, "FollowerLayer.linkedOffset");
  layer$.FollowerLayer = class FollowerLayer extends layer$.ContainerLayer {
    get showWhenUnlinked() {
      return this[showWhenUnlinked$];
    }
    set showWhenUnlinked(value) {
      this[showWhenUnlinked$] = value;
    }
    get unlinkedOffset() {
      return this[unlinkedOffset$];
    }
    set unlinkedOffset(value) {
      this[unlinkedOffset$] = value;
    }
    get linkedOffset() {
      return this[linkedOffset$];
    }
    set linkedOffset(value) {
      this[linkedOffset$] = value;
    }
    get link() {
      return this[_link];
    }
    set link(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 2182, 12, "value != null");
      this[_link] = value;
    }
    [_transformOffset](S, localPosition) {
      if (dart.test(this[_inverseDirty])) {
        this[_invertedTransform] = vector_math_64.Matrix4.tryInvert(this.getLastTransform());
        this[_inverseDirty] = false;
      }
      if (this[_invertedTransform] == null) return null;
      let vector = vector_math_64.Vector4.new(localPosition.dx, localPosition.dy, 0.0, 1.0);
      let result = this[_invertedTransform].transform(vector);
      return new ui.Offset.new(dart.notNull(result._get(0)) - dart.notNull(this.linkedOffset.dx), dart.notNull(result._get(1)) - dart.notNull(this.linkedOffset.dy));
    }
    findAnnotations(S, result, localPosition, opts) {
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (this.link.leader == null) {
        if (dart.test(this.showWhenUnlinked)) {
          return super.findAnnotations(dart.legacy(S), result, localPosition['-'](this.unlinkedOffset), {onlyFirst: onlyFirst});
        }
        return false;
      }
      let transformedOffset = this[_transformOffset](dart.legacy(S), localPosition);
      if (transformedOffset == null) {
        return false;
      }
      return super.findAnnotations(dart.legacy(S), result, transformedOffset, {onlyFirst: onlyFirst});
    }
    getLastTransform() {
      if (this[_lastTransform] == null) return null;
      let result = vector_math_64.Matrix4.translationValues(-dart.notNull(this[_lastOffset].dx), -dart.notNull(this[_lastOffset].dy), 0.0);
      result.multiply(this[_lastTransform]);
      return result;
    }
    [_collectTransformForLayerChain](layers) {
      let result = vector_math_64.Matrix4.identity();
      for (let index = dart.notNull(layers[$length]) - 1; index > 0; index = index - 1)
        layers[$_get](index).applyTransform(layers[$_get](index - 1), result);
      return result;
    }
    [_establishTransform]() {
      if (!(this.link != null)) dart.assertFailed(null, L0, 2294, 12, "link != null");
      this[_lastTransform] = null;
      if (this.link.leader == null) return;
      if (!dart.equals(this.link.leader.owner, this.owner)) dart.assertFailed("Linked LeaderLayer anchor is not in the same layer tree as the FollowerLayer.", L0, 2300, 12, "link.leader.owner == owner");
      if (!(this.link.leader[_lastOffset] != null)) dart.assertFailed("LeaderLayer anchor must come before FollowerLayer in paint order, but the reverse was true.", L0, 2301, 12, "link.leader._lastOffset != null");
      let ancestors = new (_HashSetOfLayerL()).new();
      let ancestor = this.parent;
      while (ancestor != null) {
        ancestors.add(ancestor);
        ancestor = ancestor.parent;
      }
      let layer = this.link.leader;
      let forwardLayers = JSArrayOfContainerLayerL().of([null, layer]);
      do {
        layer = layer.parent;
        forwardLayers[$add](layer);
      } while (!dart.test(ancestors.contains(layer)));
      ancestor = layer;
      layer = this;
      let inverseLayers = JSArrayOfContainerLayerL().of([layer]);
      do {
        layer = layer.parent;
        inverseLayers[$add](layer);
      } while (!dart.equals(layer, ancestor));
      let forwardTransform = this[_collectTransformForLayerChain](forwardLayers);
      let inverseTransform = this[_collectTransformForLayerChain](inverseLayers);
      if (inverseTransform.invert() === 0.0) {
        return;
      }
      inverseTransform.multiply(forwardTransform);
      inverseTransform.translate(this.linkedOffset.dx, this.linkedOffset.dy);
      this[_lastTransform] = inverseTransform;
      this[_inverseDirty] = true;
    }
    get alwaysNeedsAddToScene() {
      return true;
    }
    addToScene(builder, layerOffset = C0 || CT.C0) {
      if (!(this.link != null)) dart.assertFailed(null, L0, 2354, 12, "link != null");
      if (!(this.showWhenUnlinked != null)) dart.assertFailed(null, L0, 2355, 12, "showWhenUnlinked != null");
      if (this.link.leader == null && !dart.test(this.showWhenUnlinked)) {
        this[_lastTransform] = null;
        this[_lastOffset] = null;
        this[_inverseDirty] = true;
        this.engineLayer = null;
        return;
      }
      this[_establishTransform]();
      if (this[_lastTransform] != null) {
        this.engineLayer = builder.pushTransform(this[_lastTransform].storage, {oldLayer: TransformEngineLayerL().as(this[_engineLayer])});
        this.addChildrenToScene(builder);
        builder.pop();
        this[_lastOffset] = this.unlinkedOffset['+'](layerOffset);
      } else {
        this[_lastOffset] = null;
        let matrix = vector_math_64.Matrix4.translationValues(this.unlinkedOffset.dx, this.unlinkedOffset.dy, 0.0);
        this.engineLayer = builder.pushTransform(matrix.storage, {oldLayer: TransformEngineLayerL().as(this[_engineLayer])});
        this.addChildrenToScene(builder);
        builder.pop();
      }
      this[_inverseDirty] = true;
    }
    applyTransform(child, transform) {
      if (!(child != null)) dart.assertFailed(null, L0, 2387, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L0, 2388, 12, "transform != null");
      if (this[_lastTransform] != null) {
        transform.multiply(this[_lastTransform]);
      } else {
        transform.multiply(vector_math_64.Matrix4.translationValues(this.unlinkedOffset.dx, this.unlinkedOffset.dy, 0.0));
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfLayerLinkL()).new("link", this.link));
      properties.add(new matrix_utils.TransformProperty.new("transform", this.getLastTransform(), {defaultValue: null}));
    }
  };
  (layer$.FollowerLayer.new = function(opts) {
    let link = opts && 'link' in opts ? opts.link : null;
    let showWhenUnlinked = opts && 'showWhenUnlinked' in opts ? opts.showWhenUnlinked : true;
    let unlinkedOffset = opts && 'unlinkedOffset' in opts ? opts.unlinkedOffset : C0 || CT.C0;
    let linkedOffset = opts && 'linkedOffset' in opts ? opts.linkedOffset : C0 || CT.C0;
    this[_lastOffset] = null;
    this[_lastTransform] = null;
    this[_invertedTransform] = null;
    this[_inverseDirty] = true;
    this[showWhenUnlinked$] = showWhenUnlinked;
    this[unlinkedOffset$] = unlinkedOffset;
    this[linkedOffset$] = linkedOffset;
    if (!(link != null)) dart.assertFailed(null, L0, 2173, 15, "link != null");
    this[_link] = link;
    layer$.FollowerLayer.__proto__.new.call(this);
    ;
  }).prototype = layer$.FollowerLayer.prototype;
  dart.addTypeTests(layer$.FollowerLayer);
  dart.addTypeCaches(layer$.FollowerLayer);
  dart.setMethodSignature(layer$.FollowerLayer, () => ({
    __proto__: dart.getMethods(layer$.FollowerLayer.__proto__),
    [_transformOffset]: dart.gFnType(S => [dart.legacy(ui.Offset), [dart.legacy(ui.Offset)]]),
    findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}]),
    getLastTransform: dart.fnType(dart.legacy(vector_math_64.Matrix4), []),
    [_collectTransformForLayerChain]: dart.fnType(dart.legacy(vector_math_64.Matrix4), [dart.legacy(core.List$(dart.legacy(layer$.ContainerLayer)))]),
    [_establishTransform]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(layer$.FollowerLayer, () => ({
    __proto__: dart.getGetters(layer$.FollowerLayer.__proto__),
    link: dart.legacy(layer$.LayerLink)
  }));
  dart.setSetterSignature(layer$.FollowerLayer, () => ({
    __proto__: dart.getSetters(layer$.FollowerLayer.__proto__),
    link: dart.legacy(layer$.LayerLink)
  }));
  dart.setLibraryUri(layer$.FollowerLayer, L1);
  dart.setFieldSignature(layer$.FollowerLayer, () => ({
    __proto__: dart.getFields(layer$.FollowerLayer.__proto__),
    [_link]: dart.fieldType(dart.legacy(layer$.LayerLink)),
    showWhenUnlinked: dart.fieldType(dart.legacy(core.bool)),
    unlinkedOffset: dart.fieldType(dart.legacy(ui.Offset)),
    linkedOffset: dart.fieldType(dart.legacy(ui.Offset)),
    [_lastOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    [_lastTransform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_invertedTransform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_inverseDirty]: dart.fieldType(dart.legacy(core.bool))
  }));
  const _is_AnnotatedRegionLayer_default = Symbol('_is_AnnotatedRegionLayer_default');
  var value$ = dart.privateName(layer$, "AnnotatedRegionLayer.value");
  var size$ = dart.privateName(layer$, "AnnotatedRegionLayer.size");
  var offset$0 = dart.privateName(layer$, "AnnotatedRegionLayer.offset");
  var opaque$ = dart.privateName(layer$, "AnnotatedRegionLayer.opaque");
  layer$.AnnotatedRegionLayer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    class AnnotatedRegionLayer extends layer$.ContainerLayer {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get size() {
        return this[size$];
      }
      set size(value) {
        super.size = value;
      }
      get offset() {
        return this[offset$0];
      }
      set offset(value) {
        super.offset = value;
      }
      get opaque() {
        return this[opaque$];
      }
      set opaque(value) {
        super.opaque = value;
      }
      findAnnotations(S, result, localPosition, opts) {
        let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
        let isAbsorbed = super.findAnnotations(dart.legacy(S), result, localPosition, {onlyFirst: onlyFirst});
        if (dart.test(result.entries[$isNotEmpty]) && dart.test(onlyFirst)) return isAbsorbed;
        if (this.size != null && !dart.test(this.offset['&'](this.size).contains(localPosition))) {
          return isAbsorbed;
        }
        if (dart.wrapType(TL())[$_equals](dart.wrapType(dart.legacy(S)))) {
          isAbsorbed = dart.test(isAbsorbed) || dart.test(this.opaque);
          let untypedValue = this.value;
          let typedValue = dart.legacy(S).as(untypedValue);
          result.add(new (layer$.AnnotationEntry$(dart.legacy(S))).new({annotation: typedValue, localPosition: localPosition['-'](this.offset)}));
        }
        return isAbsorbed;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (DiagnosticsPropertyOfTL()).new("value", this.value));
        properties.add(new (DiagnosticsPropertyOfSizeL()).new("size", this.size, {defaultValue: null}));
        properties.add(new (DiagnosticsPropertyOfOffsetL()).new("offset", this.offset, {defaultValue: null}));
        properties.add(new (DiagnosticsPropertyOfboolL()).new("opaque", this.opaque, {defaultValue: false}));
      }
    }
    (AnnotatedRegionLayer.new = function(value, opts) {
      let t0;
      let size = opts && 'size' in opts ? opts.size : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let opaque = opts && 'opaque' in opts ? opts.opaque : false;
      this[value$] = value;
      this[size$] = size;
      this[opaque$] = opaque;
      if (!(value != null)) dart.assertFailed(null, L0, 2434, 15, "value != null");
      if (!(opaque != null)) dart.assertFailed(null, L0, 2435, 15, "opaque != null");
      this[offset$0] = (t0 = offset, t0 == null ? ui.Offset.zero : t0);
      AnnotatedRegionLayer.__proto__.new.call(this);
      ;
    }).prototype = AnnotatedRegionLayer.prototype;
    dart.addTypeTests(AnnotatedRegionLayer);
    AnnotatedRegionLayer.prototype[_is_AnnotatedRegionLayer_default] = true;
    dart.addTypeCaches(AnnotatedRegionLayer);
    dart.setMethodSignature(AnnotatedRegionLayer, () => ({
      __proto__: dart.getMethods(AnnotatedRegionLayer.__proto__),
      findAnnotations: dart.gFnType(S => [dart.legacy(core.bool), [dart.legacy(layer$.AnnotationResult$(dart.legacy(S))), dart.legacy(ui.Offset)], {onlyFirst: dart.legacy(core.bool)}, {}])
    }));
    dart.setLibraryUri(AnnotatedRegionLayer, L1);
    dart.setFieldSignature(AnnotatedRegionLayer, () => ({
      __proto__: dart.getFields(AnnotatedRegionLayer.__proto__),
      value: dart.finalFieldType(dart.legacy(T)),
      size: dart.finalFieldType(dart.legacy(ui.Size)),
      offset: dart.finalFieldType(dart.legacy(ui.Offset)),
      opaque: dart.finalFieldType(dart.legacy(core.bool))
    }));
    return AnnotatedRegionLayer;
  });
  layer$.AnnotatedRegionLayer = layer$.AnnotatedRegionLayer$();
  dart.addTypeTests(layer$.AnnotatedRegionLayer, _is_AnnotatedRegionLayer_default);
  var C6;
  var size$0 = dart.privateName(view, "ViewConfiguration.size");
  var devicePixelRatio$ = dart.privateName(view, "ViewConfiguration.devicePixelRatio");
  view.ViewConfiguration = class ViewConfiguration extends core.Object {
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    toMatrix() {
      return vector_math_64.Matrix4.diagonal3Values(this.devicePixelRatio, this.devicePixelRatio, 1.0);
    }
    toString() {
      return dart.str(this.size) + " at " + dart.str(debug.debugFormatDouble(this.devicePixelRatio)) + "x";
    }
  };
  (view.ViewConfiguration.new = function(opts) {
    let size = opts && 'size' in opts ? opts.size : C6 || CT.C6;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 1;
    this[size$0] = size;
    this[devicePixelRatio$] = devicePixelRatio;
    ;
  }).prototype = view.ViewConfiguration.prototype;
  dart.addTypeTests(view.ViewConfiguration);
  dart.addTypeCaches(view.ViewConfiguration);
  dart.setMethodSignature(view.ViewConfiguration, () => ({
    __proto__: dart.getMethods(view.ViewConfiguration.__proto__),
    toMatrix: dart.fnType(dart.legacy(vector_math_64.Matrix4), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(view.ViewConfiguration, L2);
  dart.setFieldSignature(view.ViewConfiguration, () => ({
    __proto__: dart.getFields(view.ViewConfiguration.__proto__),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    devicePixelRatio: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(view.ViewConfiguration, ['toString']);
  var _size = dart.privateName(view, "_size");
  var _rootTransform = dart.privateName(view, "_rootTransform");
  var _configuration = dart.privateName(view, "_configuration");
  var _window = dart.privateName(view, "_window");
  var _updateMatricesAndCreateNewRootLayer = dart.privateName(view, "_updateMatricesAndCreateNewRootLayer");
  var _updateSystemChrome = dart.privateName(view, "_updateSystemChrome");
  var _name$ = dart.privateName(platform, "_name");
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  var _debugDoingThisResize = dart.privateName(object$, "_debugDoingThisResize");
  var _debugDoingThisLayout = dart.privateName(object$, "_debugDoingThisLayout");
  var _debugCanParentUseSize = dart.privateName(object$, "_debugCanParentUseSize");
  var _debugMutationsLocked = dart.privateName(object$, "_debugMutationsLocked");
  var _needsLayout = dart.privateName(object$, "_needsLayout");
  var _relayoutBoundary = dart.privateName(object$, "_relayoutBoundary");
  var _doingThisLayoutWithCallback = dart.privateName(object$, "_doingThisLayoutWithCallback");
  var _constraints = dart.privateName(object$, "_constraints");
  var _debugDoingThisPaint = dart.privateName(object$, "_debugDoingThisPaint");
  var _layer = dart.privateName(object$, "_layer");
  var _needsCompositingBitsUpdate = dart.privateName(object$, "_needsCompositingBitsUpdate");
  var _needsCompositing = dart.privateName(object$, "_needsCompositing");
  var _needsPaint = dart.privateName(object$, "_needsPaint");
  var _cachedSemanticsConfiguration = dart.privateName(object$, "_cachedSemanticsConfiguration");
  var _needsSemanticsUpdate = dart.privateName(object$, "_needsSemanticsUpdate");
  var _semantics = dart.privateName(object$, "_semantics");
  var _debugCanPerformMutations = dart.privateName(object$, "_debugCanPerformMutations");
  var _cleanRelayoutBoundary = dart.privateName(object$, "_cleanRelayoutBoundary");
  var _debugReportException = dart.privateName(object$, "_debugReportException");
  var _debugAllowMutationsToDirtySubtrees = dart.privateName(object$, "_debugAllowMutationsToDirtySubtrees");
  var _semanticsConfiguration = dart.privateName(object$, "_semanticsConfiguration");
  var _debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout = dart.privateName(object$, "_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout");
  var _nodesNeedingLayout = dart.privateName(object$, "_nodesNeedingLayout");
  var C13;
  var _debugDoingLayout = dart.privateName(object$, "_debugDoingLayout");
  var _layoutWithoutResize = dart.privateName(object$, "_layoutWithoutResize");
  var _enableMutationsToDirtySubtrees = dart.privateName(object$, "_enableMutationsToDirtySubtrees");
  var _nodesNeedingCompositingBitsUpdate = dart.privateName(object$, "_nodesNeedingCompositingBitsUpdate");
  var _updateCompositingBits = dart.privateName(object$, "_updateCompositingBits");
  var _nodesNeedingPaint = dart.privateName(object$, "_nodesNeedingPaint");
  var _skippedPaintingOnLayer = dart.privateName(object$, "_skippedPaintingOnLayer");
  var _debugDoingPaint = dart.privateName(object$, "_debugDoingPaint");
  var _paintWithContext = dart.privateName(object$, "_paintWithContext");
  var _debugDoingSemantics = dart.privateName(object$, "_debugDoingSemantics");
  var _semanticsOwner = dart.privateName(object$, "_semanticsOwner");
  var _nodesNeedingSemantics = dart.privateName(object$, "_nodesNeedingSemantics");
  var _getSemanticsForParent = dart.privateName(object$, "_getSemanticsForParent");
  var _updateSemantics = dart.privateName(object$, "_updateSemantics");
  var _name$0 = dart.privateName(diagnostics, "_name");
  var C14;
  var C15;
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C16;
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var C17;
  var C18;
  var parentData = dart.privateName(object$, "RenderObject.parentData");
  var debugCreator$ = dart.privateName(object$, "RenderObject.debugCreator");
  const AbstractNode_DiagnosticableTreeMixin$36$ = class AbstractNode_DiagnosticableTreeMixin extends node.AbstractNode {};
  (AbstractNode_DiagnosticableTreeMixin$36$.new = function() {
    AbstractNode_DiagnosticableTreeMixin$36$.__proto__.new.call(this);
  }).prototype = AbstractNode_DiagnosticableTreeMixin$36$.prototype;
  dart.applyMixin(AbstractNode_DiagnosticableTreeMixin$36$, diagnostics.DiagnosticableTreeMixin);
  object$.RenderObject = class RenderObject extends AbstractNode_DiagnosticableTreeMixin$36$ {
    get parentData() {
      return this[parentData];
    }
    set parentData(value) {
      this[parentData] = value;
    }
    get debugCreator() {
      return this[debugCreator$];
    }
    set debugCreator(value) {
      this[debugCreator$] = value;
    }
    reassemble() {
      this.markNeedsLayout();
      this.markNeedsCompositingBitsUpdate();
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
      this.visitChildren(dart.fn(child => {
        child.reassemble();
      }, RenderObjectLToNullN()));
    }
    setupParentData(child) {
      RenderObjectL().as(child);
      if (!dart.test(this[_debugCanPerformMutations])) dart.assertFailed(null, L4, 1273, 12, "_debugCanPerformMutations");
      if (!ParentDataL().is(child.parentData)) child.parentData = new object$.ParentData.new();
    }
    adoptChild(child) {
      RenderObjectL().as(child);
      if (!dart.test(this[_debugCanPerformMutations])) dart.assertFailed(null, L4, 1284, 12, "_debugCanPerformMutations");
      if (!(child != null)) dart.assertFailed(null, L4, 1285, 12, "child != null");
      this.setupParentData(child);
      this.markNeedsLayout();
      this.markNeedsCompositingBitsUpdate();
      this.markNeedsSemanticsUpdate();
      super.adoptChild(child);
    }
    dropChild(child) {
      RenderObjectL().as(child);
      if (!dart.test(this[_debugCanPerformMutations])) dart.assertFailed(null, L4, 1299, 12, "_debugCanPerformMutations");
      if (!(child != null)) dart.assertFailed(null, L4, 1300, 12, "child != null");
      if (!(child.parentData != null)) dart.assertFailed(null, L4, 1301, 12, "child.parentData != null");
      child[_cleanRelayoutBoundary]();
      child.parentData.detach();
      child.parentData = null;
      super.dropChild(child);
      this.markNeedsLayout();
      this.markNeedsCompositingBitsUpdate();
      this.markNeedsSemanticsUpdate();
    }
    visitChildren(visitor) {
    }
    [_debugReportException](method, exception, stack) {
      assertions.FlutterError.reportError(new object$.FlutterErrorDetailsForRendering.new({exception: exception, stack: stack, library: "rendering library", context: new assertions.ErrorDescription.new("during " + dart.str(method) + "()"), renderObject: this, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
          if (this.debugCreator != null) yield new object$.DiagnosticsDebugCreator.new(this.debugCreator);
          yield this.describeForError("The following RenderObject was being processed when the exception was fired");
          yield this.describeForError("RenderObject", {style: diagnostics.DiagnosticsTreeStyle.truncateChildren});
        }).bind(this)), VoidToIterableLOfDiagnosticsNodeL())}));
    }
    get debugDoingThisResize() {
      return this[_debugDoingThisResize];
    }
    get debugDoingThisLayout() {
      return this[_debugDoingThisLayout];
    }
    static get debugActiveLayout() {
      return object$.RenderObject._debugActiveLayout;
    }
    get debugCanParentUseSize() {
      return this[_debugCanParentUseSize];
    }
    get [_debugCanPerformMutations]() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        let node = this;
        while (true) {
          if (dart.test(node[_doingThisLayoutWithCallback])) {
            result = true;
            break;
          }
          if (this.owner != null && dart.test(this.owner[_debugAllowMutationsToDirtySubtrees]) && dart.test(node[_needsLayout])) {
            result = true;
            break;
          }
          if (dart.test(node[_debugMutationsLocked])) {
            result = false;
            break;
          }
          if (!RenderObjectL().is(node.parent)) {
            result = true;
            break;
          }
          node = RenderObjectL().as(node.parent);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1380, 12, "() {\r\n      RenderObject node = this;\r\n      while (true) {\r\n        if (node._doingThisLayoutWithCallback) {\r\n          result = true;\r\n          break;\r\n        }\r\n        if (owner != null && owner._debugAllowMutationsToDirtySubtrees && node._needsLayout) {\r\n          result = true;\r\n          break;\r\n        }\r\n        if (node._debugMutationsLocked) {\r\n          result = false;\r\n          break;\r\n        }\r\n        if (node.parent is! RenderObject) {\r\n          result = true;\r\n          break;\r\n        }\r\n        node = node.parent as RenderObject;\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    get owner() {
      return PipelineOwnerL().as(super.owner);
    }
    attach(owner) {
      PipelineOwnerL().as(owner);
      super.attach(owner);
      if (dart.test(this[_needsLayout]) && this[_relayoutBoundary] != null) {
        this[_needsLayout] = false;
        this.markNeedsLayout();
      }
      if (dart.test(this[_needsCompositingBitsUpdate])) {
        this[_needsCompositingBitsUpdate] = false;
        this.markNeedsCompositingBitsUpdate();
      }
      if (dart.test(this[_needsPaint]) && this[_layer] != null) {
        this[_needsPaint] = false;
        this.markNeedsPaint();
      }
      if (dart.test(this[_needsSemanticsUpdate]) && dart.test(this[_semanticsConfiguration].isSemanticBoundary)) {
        this[_needsSemanticsUpdate] = false;
        this.markNeedsSemanticsUpdate();
      }
    }
    get debugNeedsLayout() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_needsLayout];
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1448, 12, "() {\r\n      result = _needsLayout;\r\n      return true;\r\n    }()");
      return result;
    }
    get constraints() {
      return this[_constraints];
    }
    [_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout]() {
      if (this[_relayoutBoundary] == null) return true;
      let node = this;
      while (!dart.equals(node, this[_relayoutBoundary])) {
        if (!dart.equals(node[_relayoutBoundary], this[_relayoutBoundary])) dart.assertFailed(null, L4, 1487, 14, "node._relayoutBoundary == _relayoutBoundary");
        if (!(node.parent != null)) dart.assertFailed(null, L4, 1488, 14, "node.parent != null");
        node = RenderObjectL().as(node.parent);
        if (!dart.test(node[_needsLayout]) && !dart.test(node[_debugDoingThisLayout])) return false;
      }
      if (!dart.equals(node[_relayoutBoundary], node)) dart.assertFailed(null, L4, 1493, 12, "node._relayoutBoundary == node");
      return true;
    }
    markNeedsLayout() {
      if (!dart.test(this[_debugCanPerformMutations])) dart.assertFailed(null, L4, 1536, 12, "_debugCanPerformMutations");
      if (dart.test(this[_needsLayout])) {
        if (!dart.test(this[_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout]())) dart.assertFailed(null, L4, 1538, 14, "_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout()");
        return;
      }
      if (!(this[_relayoutBoundary] != null)) dart.assertFailed(null, L4, 1541, 12, "_relayoutBoundary != null");
      if (!dart.equals(this[_relayoutBoundary], this)) {
        this.markParentNeedsLayout();
      } else {
        this[_needsLayout] = true;
        if (this.owner != null) {
          if (!dart.test(dart.fn(() => {
            if (dart.test(debug$.debugPrintMarkNeedsLayoutStacks)) assertions.debugPrintStack({label: "markNeedsLayout() called for " + dart.str(this)});
            return true;
          }, VoidToboolL())())) dart.assertFailed(null, L4, 1547, 16, "() {\r\n          if (debugPrintMarkNeedsLayoutStacks)\r\n            debugPrintStack(label: 'markNeedsLayout() called for $this');\r\n          return true;\r\n        }()");
          this.owner[_nodesNeedingLayout][$add](this);
          this.owner.requestVisualUpdate();
        }
      }
    }
    markParentNeedsLayout() {
      this[_needsLayout] = true;
      let parent = RenderObjectL().as(this.parent);
      if (!dart.test(this[_doingThisLayoutWithCallback])) {
        parent.markNeedsLayout();
      } else {
        if (!dart.test(parent[_debugDoingThisLayout])) dart.assertFailed(null, L4, 1574, 14, "parent._debugDoingThisLayout");
      }
      if (!dart.equals(parent, this.parent)) dart.assertFailed(null, L4, 1576, 12, "parent == this.parent");
    }
    markNeedsLayoutForSizedByParentChange() {
      this.markNeedsLayout();
      this.markParentNeedsLayout();
    }
    [_cleanRelayoutBoundary]() {
      if (!dart.equals(this[_relayoutBoundary], this)) {
        this[_relayoutBoundary] = null;
        this[_needsLayout] = true;
        this.visitChildren(C13 || CT.C13);
      }
    }
    static _cleanChildRelayoutBoundary(child) {
      child[_cleanRelayoutBoundary]();
    }
    scheduleInitialLayout() {
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 1611, 12, "attached");
      if (!!RenderObjectL().is(this.parent)) dart.assertFailed(null, L4, 1612, 12, "parent is! RenderObject");
      if (!!dart.test(this.owner[_debugDoingLayout])) dart.assertFailed(null, L4, 1613, 12, "!owner._debugDoingLayout");
      if (!(this[_relayoutBoundary] == null)) dart.assertFailed(null, L4, 1614, 12, "_relayoutBoundary == null");
      this[_relayoutBoundary] = this;
      if (!dart.test(dart.fn(() => {
        this[_debugCanParentUseSize] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1616, 12, "() {\r\n      _debugCanParentUseSize = false;\r\n      return true;\r\n    }()");
      this.owner[_nodesNeedingLayout][$add](this);
    }
    [_layoutWithoutResize]() {
      if (!dart.equals(this[_relayoutBoundary], this)) dart.assertFailed(null, L4, 1624, 12, "_relayoutBoundary == this");
      let debugPreviousActiveLayout = null;
      if (!!dart.test(this[_debugMutationsLocked])) dart.assertFailed(null, L4, 1626, 12, "!_debugMutationsLocked");
      if (!!dart.test(this[_doingThisLayoutWithCallback])) dart.assertFailed(null, L4, 1627, 12, "!_doingThisLayoutWithCallback");
      if (!(this[_debugCanParentUseSize] != null)) dart.assertFailed(null, L4, 1628, 12, "_debugCanParentUseSize != null");
      if (!dart.test(dart.fn(() => {
        this[_debugMutationsLocked] = true;
        this[_debugDoingThisLayout] = true;
        debugPreviousActiveLayout = object$.RenderObject._debugActiveLayout;
        object$.RenderObject._debugActiveLayout = this;
        if (dart.test(debug$.debugPrintLayouts)) print.debugPrint("Laying out (without resize) " + dart.str(this));
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1629, 12, "() {\r\n      _debugMutationsLocked = true;\r\n      _debugDoingThisLayout = true;\r\n      debugPreviousActiveLayout = _debugActiveLayout;\r\n      _debugActiveLayout = this;\r\n      if (debugPrintLayouts)\r\n        debugPrint('Laying out (without resize) $this');\r\n      return true;\r\n    }()");
      try {
        this.performLayout();
        this.markNeedsSemanticsUpdate();
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stack = dart.stackTrace(e$);
        this[_debugReportException]("performLayout", e, stack);
      }
      if (!dart.test(dart.fn(() => {
        object$.RenderObject._debugActiveLayout = debugPreviousActiveLayout;
        this[_debugDoingThisLayout] = false;
        this[_debugMutationsLocked] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1644, 12, "() {\r\n      _debugActiveLayout = debugPreviousActiveLayout;\r\n      _debugDoingThisLayout = false;\r\n      _debugMutationsLocked = false;\r\n      return true;\r\n    }()");
      this[_needsLayout] = false;
      this.markNeedsPaint();
    }
    layout(constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (!(constraints != null)) dart.assertFailed(null, L4, 1678, 12, "constraints != null");
      if (!dart.test(constraints.debugAssertIsValid({isAppliedConstraint: true, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
          let stack = dart.toString(core.StackTrace.current)[$split]("\n");
          let targetFrame = null;
          let layoutFramePattern = core.RegExp.new("^#[0-9]+ +RenderObject.layout \\(");
          for (let i = 0; i < dart.notNull(stack[$length]); i = i + 1) {
            if (layoutFramePattern[$matchAsPrefix](stack[$_get](i)) != null) {
              targetFrame = i + 1;
              break;
            }
          }
          if (targetFrame != null && dart.notNull(targetFrame) < dart.notNull(stack[$length])) {
            let targetFramePattern = core.RegExp.new("^#[0-9]+ +(.+)$");
            let targetFrameMatch = targetFramePattern[$matchAsPrefix](stack[$_get](targetFrame));
            let problemFunction = targetFrameMatch != null && dart.notNull(targetFrameMatch.groupCount) > 0 ? targetFrameMatch.group(1) : stack[$_get](targetFrame)[$trim]();
            yield new assertions.ErrorDescription.new("These invalid constraints were provided to " + dart.str(this.runtimeType) + "'s layout() " + "function by the following function, which probably computed the " + "invalid constraints in question:\n" + "  " + dart.str(problemFunction));
          }
        }).bind(this)), VoidToIterableLOfDiagnosticsNodeL())}))) dart.assertFailed(null, L4, 1679, 12, "constraints.debugAssertIsValid(\r\n      isAppliedConstraint: true,\r\n      informationCollector: () sync* {\r\n        final List<String> stack = StackTrace.current.toString().split('\\n');\r\n        int targetFrame;\r\n        final Pattern layoutFramePattern = RegExp(r'^#[0-9]+ +RenderObject.layout \\(');\r\n        for (int i = 0; i < stack.length; i += 1) {\r\n          if (layoutFramePattern.matchAsPrefix(stack[i]) != null) {\r\n            targetFrame = i + 1;\r\n            break;\r\n          }\r\n        }\r\n        if (targetFrame != null && targetFrame < stack.length) {\r\n          final Pattern targetFramePattern = RegExp(r'^#[0-9]+ +(.+)$');\r\n          final Match targetFrameMatch = targetFramePattern.matchAsPrefix(stack[targetFrame]);\r\n          final String problemFunction = (targetFrameMatch != null && targetFrameMatch.groupCount > 0) ? targetFrameMatch.group(1) : stack[targetFrame].trim();\r\n          // TODO(jacobr): this case is similar to displaying a single stack frame.\r\n          yield ErrorDescription(\r\n            \"These invalid constraints were provided to $runtimeType's layout() \"\r\n            'function by the following function, which probably computed the '\r\n            'invalid constraints in question:\\n'\r\n            '  $problemFunction'\r\n          );\r\n        }\r\n      },\r\n    )");
      if (!!dart.test(this[_debugDoingThisResize])) dart.assertFailed(null, L4, 1705, 12, "!_debugDoingThisResize");
      if (!!dart.test(this[_debugDoingThisLayout])) dart.assertFailed(null, L4, 1706, 12, "!_debugDoingThisLayout");
      let relayoutBoundary = null;
      if (!dart.test(parentUsesSize) || dart.test(this.sizedByParent) || dart.test(constraints.isTight) || !RenderObjectL().is(this.parent)) {
        relayoutBoundary = this;
      } else {
        relayoutBoundary = RenderObjectL().as(this.parent)[_relayoutBoundary];
      }
      if (!dart.test(dart.fn(() => {
        this[_debugCanParentUseSize] = parentUsesSize;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1713, 12, "() {\r\n      _debugCanParentUseSize = parentUsesSize;\r\n      return true;\r\n    }()");
      if (!dart.test(this[_needsLayout]) && dart.equals(constraints, this[_constraints]) && dart.equals(relayoutBoundary, this[_relayoutBoundary])) {
        if (!dart.test(dart.fn(() => {
          this[_debugDoingThisResize] = this.sizedByParent;
          this[_debugDoingThisLayout] = !dart.test(this.sizedByParent);
          let debugPreviousActiveLayout = object$.RenderObject._debugActiveLayout;
          object$.RenderObject._debugActiveLayout = this;
          this.debugResetSize();
          object$.RenderObject._debugActiveLayout = debugPreviousActiveLayout;
          this[_debugDoingThisLayout] = false;
          this[_debugDoingThisResize] = false;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 1718, 14, "() {\r\n        // in case parentUsesSize changed since the last invocation, set size\r\n        // to itself, so it has the right internal debug values.\r\n        _debugDoingThisResize = sizedByParent;\r\n        _debugDoingThisLayout = !sizedByParent;\r\n        final RenderObject debugPreviousActiveLayout = _debugActiveLayout;\r\n        _debugActiveLayout = this;\r\n        debugResetSize();\r\n        _debugActiveLayout = debugPreviousActiveLayout;\r\n        _debugDoingThisLayout = false;\r\n        _debugDoingThisResize = false;\r\n        return true;\r\n      }()");
        return;
      }
      this[_constraints] = constraints;
      if (this[_relayoutBoundary] != null && !dart.equals(relayoutBoundary, this[_relayoutBoundary])) {
        this.visitChildren(C13 || CT.C13);
      }
      this[_relayoutBoundary] = relayoutBoundary;
      if (!!dart.test(this[_debugMutationsLocked])) dart.assertFailed(null, L4, 1741, 12, "!_debugMutationsLocked");
      if (!!dart.test(this[_doingThisLayoutWithCallback])) dart.assertFailed(null, L4, 1742, 12, "!_doingThisLayoutWithCallback");
      if (!dart.test(dart.fn(() => {
        this[_debugMutationsLocked] = true;
        if (dart.test(debug$.debugPrintLayouts)) print.debugPrint("Laying out (" + (dart.test(this.sizedByParent) ? "with separate resize" : "with resize allowed") + ") " + dart.str(this));
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1743, 12, "() {\r\n      _debugMutationsLocked = true;\r\n      if (debugPrintLayouts)\r\n        debugPrint('Laying out (${sizedByParent ? \"with separate resize\" : \"with resize allowed\"}) $this');\r\n      return true;\r\n    }()");
      if (dart.test(this.sizedByParent)) {
        if (!dart.test(dart.fn(() => {
          this[_debugDoingThisResize] = true;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 1750, 14, "() {\r\n        _debugDoingThisResize = true;\r\n        return true;\r\n      }()");
        try {
          this.performResize();
          if (!dart.test(dart.fn(() => {
            this.debugAssertDoesMeetConstraints();
            return true;
          }, VoidToboolL())())) dart.assertFailed(null, L4, 1756, 16, "() {\r\n          debugAssertDoesMeetConstraints();\r\n          return true;\r\n        }()");
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          this[_debugReportException]("performResize", e, stack);
        }
        if (!dart.test(dart.fn(() => {
          this[_debugDoingThisResize] = false;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 1763, 14, "() {\r\n        _debugDoingThisResize = false;\r\n        return true;\r\n      }()");
      }
      let debugPreviousActiveLayout = null;
      if (!dart.test(dart.fn(() => {
        this[_debugDoingThisLayout] = true;
        debugPreviousActiveLayout = object$.RenderObject._debugActiveLayout;
        object$.RenderObject._debugActiveLayout = this;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1769, 12, "() {\r\n      _debugDoingThisLayout = true;\r\n      debugPreviousActiveLayout = _debugActiveLayout;\r\n      _debugActiveLayout = this;\r\n      return true;\r\n    }()");
      try {
        this.performLayout();
        this.markNeedsSemanticsUpdate();
        if (!dart.test(dart.fn(() => {
          this.debugAssertDoesMeetConstraints();
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 1778, 14, "() {\r\n        debugAssertDoesMeetConstraints();\r\n        return true;\r\n      }()");
      } catch (e$0) {
        let e = dart.getThrown(e$0);
        let stack = dart.stackTrace(e$0);
        this[_debugReportException]("performLayout", e, stack);
      }
      if (!dart.test(dart.fn(() => {
        object$.RenderObject._debugActiveLayout = debugPreviousActiveLayout;
        this[_debugDoingThisLayout] = false;
        this[_debugMutationsLocked] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1785, 12, "() {\r\n      _debugActiveLayout = debugPreviousActiveLayout;\r\n      _debugDoingThisLayout = false;\r\n      _debugMutationsLocked = false;\r\n      return true;\r\n    }()");
      this[_needsLayout] = false;
      this.markNeedsPaint();
    }
    debugResetSize() {
    }
    get sizedByParent() {
      return false;
    }
    invokeLayoutCallback(T, callback) {
      if (!dart.test(this[_debugMutationsLocked])) dart.assertFailed(null, L4, 1874, 12, "_debugMutationsLocked");
      if (!dart.test(this[_debugDoingThisLayout])) dart.assertFailed(null, L4, 1875, 12, "_debugDoingThisLayout");
      if (!!dart.test(this[_doingThisLayoutWithCallback])) dart.assertFailed(null, L4, 1876, 12, "!_doingThisLayoutWithCallback");
      this[_doingThisLayoutWithCallback] = true;
      try {
        this.owner[_enableMutationsToDirtySubtrees](dart.fn(() => {
          callback(dart.legacy(T).as(this.constraints));
        }, VoidToNullN()));
      } finally {
        this[_doingThisLayoutWithCallback] = false;
      }
    }
    rotate(opts) {
      let oldAngle = opts && 'oldAngle' in opts ? opts.oldAngle : null;
      let newAngle = opts && 'newAngle' in opts ? opts.newAngle : null;
      let time = opts && 'time' in opts ? opts.time : null;
    }
    get debugDoingThisPaint() {
      return this[_debugDoingThisPaint];
    }
    static get debugActivePaint() {
      return object$.RenderObject._debugActivePaint;
    }
    get isRepaintBoundary() {
      return false;
    }
    debugRegisterRepaintBoundaryPaint(opts) {
      let includedParent = opts && 'includedParent' in opts ? opts.includedParent : true;
      let includedChild = opts && 'includedChild' in opts ? opts.includedChild : false;
    }
    get alwaysNeedsCompositing() {
      return false;
    }
    get layer() {
      if (!(!dart.test(this.isRepaintBoundary) || this[_layer] == null || OffsetLayerL().is(this[_layer]))) dart.assertFailed(null, L4, 1974, 12, "!isRepaintBoundary || (_layer == null || _layer is OffsetLayer)");
      return this[_layer];
    }
    set layer(newLayer) {
      if (!!dart.test(this.isRepaintBoundary)) dart.assertFailed("Attempted to set a layer to a repaint boundary render object.\n" + "The framework creates and assigns an OffsetLayer to a repaint " + "boundary automatically.", L4, 1981, 7, "!isRepaintBoundary");
      this[_layer] = newLayer;
    }
    get debugLayer() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_layer];
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1999, 12, "() {\r\n      result = _layer;\r\n      return true;\r\n    }()");
      return result;
    }
    markNeedsCompositingBitsUpdate() {
      if (dart.test(this[_needsCompositingBitsUpdate])) return;
      this[_needsCompositingBitsUpdate] = true;
      if (RenderObjectL().is(this.parent)) {
        let parent = RenderObjectL().as(this.parent);
        if (dart.test(parent[_needsCompositingBitsUpdate])) return;
        if (!dart.test(this.isRepaintBoundary) && !dart.test(parent.isRepaintBoundary)) {
          parent.markNeedsCompositingBitsUpdate();
          return;
        }
      }
      if (!dart.test(dart.fn(() => {
        let parent = this.parent;
        if (RenderObjectL().is(parent)) return parent[_needsCompositing];
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2036, 12, "() {\r\n      final AbstractNode parent = this.parent;\r\n      if (parent is RenderObject)\r\n        return parent._needsCompositing;\r\n      return true;\r\n    }()");
      if (this.owner != null) this.owner[_nodesNeedingCompositingBitsUpdate][$add](this);
    }
    get needsCompositing() {
      if (!!dart.test(this[_needsCompositingBitsUpdate])) dart.assertFailed(null, L4, 2056, 12, "!_needsCompositingBitsUpdate");
      return this[_needsCompositing];
    }
    [_updateCompositingBits]() {
      if (!dart.test(this[_needsCompositingBitsUpdate])) return;
      let oldNeedsCompositing = this[_needsCompositing];
      this[_needsCompositing] = false;
      this.visitChildren(dart.fn(child => {
        child[_updateCompositingBits]();
        if (dart.test(child.needsCompositing)) this[_needsCompositing] = true;
      }, RenderObjectLToNullN()));
      if (dart.test(this.isRepaintBoundary) || dart.test(this.alwaysNeedsCompositing)) this[_needsCompositing] = true;
      if (!dart.equals(oldNeedsCompositing, this[_needsCompositing])) this.markNeedsPaint();
      this[_needsCompositingBitsUpdate] = false;
    }
    get debugNeedsPaint() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_needsPaint];
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2093, 12, "() {\r\n      result = _needsPaint;\r\n      return true;\r\n    }()");
      return result;
    }
    markNeedsPaint() {
      if (!(this.owner == null || !dart.test(this.owner.debugDoingPaint))) dart.assertFailed(null, L4, 2122, 12, "owner == null || !owner.debugDoingPaint");
      if (dart.test(this[_needsPaint])) return;
      this[_needsPaint] = true;
      if (dart.test(this.isRepaintBoundary)) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(debug$.debugPrintMarkNeedsPaintStacks)) assertions.debugPrintStack({label: "markNeedsPaint() called for " + dart.str(this)});
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 2127, 14, "() {\r\n        if (debugPrintMarkNeedsPaintStacks)\r\n          debugPrintStack(label: 'markNeedsPaint() called for $this');\r\n        return true;\r\n      }()");
        if (!OffsetLayerL().is(this[_layer])) dart.assertFailed(null, L4, 2134, 14, "_layer is OffsetLayer");
        if (this.owner != null) {
          this.owner[_nodesNeedingPaint][$add](this);
          this.owner.requestVisualUpdate();
        }
      } else if (RenderObjectL().is(this.parent)) {
        let parent = RenderObjectL().as(this.parent);
        parent.markNeedsPaint();
        if (!dart.equals(parent, this.parent)) dart.assertFailed(null, L4, 2142, 14, "parent == this.parent");
      } else {
        if (!dart.test(dart.fn(() => {
          if (dart.test(debug$.debugPrintMarkNeedsPaintStacks)) assertions.debugPrintStack({label: "markNeedsPaint() called for " + dart.str(this) + " (root of render tree)"});
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 2144, 14, "() {\r\n        if (debugPrintMarkNeedsPaintStacks)\r\n          debugPrintStack(label: 'markNeedsPaint() called for $this (root of render tree)');\r\n        return true;\r\n      }()");
        if (this.owner != null) this.owner.requestVisualUpdate();
      }
    }
    [_skippedPaintingOnLayer]() {
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 2164, 12, "attached");
      if (!dart.test(this.isRepaintBoundary)) dart.assertFailed(null, L4, 2165, 12, "isRepaintBoundary");
      if (!dart.test(this[_needsPaint])) dart.assertFailed(null, L4, 2166, 12, "_needsPaint");
      if (!(this[_layer] != null)) dart.assertFailed(null, L4, 2167, 12, "_layer != null");
      if (!!dart.test(this[_layer].attached)) dart.assertFailed(null, L4, 2168, 12, "!_layer.attached");
      let ancestor = this.parent;
      while (RenderObjectL().is(ancestor)) {
        let node = RenderObjectL().as(ancestor);
        if (dart.test(node.isRepaintBoundary)) {
          if (node[_layer] == null) break;
          if (dart.test(node[_layer].attached)) break;
          node[_needsPaint] = true;
        }
        ancestor = node.parent;
      }
    }
    scheduleInitialPaint(rootLayer) {
      if (!dart.test(rootLayer.attached)) dart.assertFailed(null, L4, 2190, 12, "rootLayer.attached");
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 2191, 12, "attached");
      if (!!RenderObjectL().is(this.parent)) dart.assertFailed(null, L4, 2192, 12, "parent is! RenderObject");
      if (!!dart.test(this.owner[_debugDoingPaint])) dart.assertFailed(null, L4, 2193, 12, "!owner._debugDoingPaint");
      if (!dart.test(this.isRepaintBoundary)) dart.assertFailed(null, L4, 2194, 12, "isRepaintBoundary");
      if (!(this[_layer] == null)) dart.assertFailed(null, L4, 2195, 12, "_layer == null");
      this[_layer] = rootLayer;
      if (!dart.test(this[_needsPaint])) dart.assertFailed(null, L4, 2197, 12, "_needsPaint");
      this.owner[_nodesNeedingPaint][$add](this);
    }
    replaceRootLayer(rootLayer) {
      if (!dart.test(rootLayer.attached)) dart.assertFailed(null, L4, 2207, 12, "rootLayer.attached");
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 2208, 12, "attached");
      if (!!RenderObjectL().is(this.parent)) dart.assertFailed(null, L4, 2209, 12, "parent is! RenderObject");
      if (!!dart.test(this.owner[_debugDoingPaint])) dart.assertFailed(null, L4, 2210, 12, "!owner._debugDoingPaint");
      if (!dart.test(this.isRepaintBoundary)) dart.assertFailed(null, L4, 2211, 12, "isRepaintBoundary");
      if (!(this[_layer] != null)) dart.assertFailed(null, L4, 2212, 12, "_layer != null");
      this[_layer].detach();
      this[_layer] = rootLayer;
      this.markNeedsPaint();
    }
    [_paintWithContext](context, offset) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(this[_debugDoingThisPaint])) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("Tried to paint a RenderObject reentrantly."), this.describeForError("The following RenderObject was already being painted when it was " + "painted again"), new assertions.ErrorDescription.new("Since this typically indicates an infinite recursion, it is " + "disallowed.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2219, 12, "() {\r\n      if (_debugDoingThisPaint) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Tried to paint a RenderObject reentrantly.'),\r\n          describeForError(\r\n            'The following RenderObject was already being painted when it was '\r\n            'painted again'\r\n          ),\r\n          ErrorDescription(\r\n            'Since this typically indicates an infinite recursion, it is '\r\n            'disallowed.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (dart.test(this[_needsLayout])) return;
      if (!dart.test(dart.fn(() => {
        if (dart.test(this[_needsCompositingBitsUpdate])) {
          if (RenderObjectL().is(this.parent)) {
            let parent = RenderObjectL().as(this.parent);
            let visitedByParent = false;
            parent.visitChildren(dart.fn(child => {
              if (dart.equals(child, this)) {
                visitedByParent = true;
              }
            }, RenderObjectLToNullN()));
            if (!visitedByParent) {
              dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("A RenderObject was not visited by the parent's visitChildren " + "during paint."), parent.describeForError("The parent was"), this.describeForError("The child that was not visited was"), new assertions.ErrorDescription.new("A RenderObject with children must implement visitChildren and " + "call the visitor exactly once for each child; it also should not " + "paint children that were removed with dropChild."), new assertions.ErrorHint.new("This usually indicates an error in the Flutter framework itself.")])));
            }
          }
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("Tried to paint a RenderObject before its compositing bits were " + "updated."), this.describeForError("The following RenderObject was marked as having dirty compositing " + "bits at the time that it was painted"), new assertions.ErrorDescription.new("A RenderObject that still has dirty compositing bits cannot be " + "painted because this indicates that the tree has not yet been " + "properly configured for creating the layer tree."), new assertions.ErrorHint.new("This usually indicates an error in the Flutter framework itself.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2244, 12, "() {\r\n      if (_needsCompositingBitsUpdate) {\r\n        if (parent is RenderObject) {\r\n          final RenderObject parent = this.parent as RenderObject;\r\n          bool visitedByParent = false;\r\n          parent.visitChildren((RenderObject child) {\r\n            if (child == this) {\r\n              visitedByParent = true;\r\n            }\r\n          });\r\n          if (!visitedByParent) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary(\r\n                \"A RenderObject was not visited by the parent's visitChildren \"\r\n                'during paint.',\r\n              ),\r\n              parent.describeForError(\r\n                'The parent was',\r\n              ),\r\n              describeForError(\r\n                'The child that was not visited was'\r\n              ),\r\n              ErrorDescription(\r\n                'A RenderObject with children must implement visitChildren and '\r\n                'call the visitor exactly once for each child; it also should not '\r\n                'paint children that were removed with dropChild.'\r\n              ),\r\n              ErrorHint(\r\n                'This usually indicates an error in the Flutter framework itself.'\r\n              ),\r\n            ]);\r\n          }\r\n        }\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'Tried to paint a RenderObject before its compositing bits were '\r\n            'updated.'\r\n          ),\r\n          describeForError(\r\n            'The following RenderObject was marked as having dirty compositing '\r\n            'bits at the time that it was painted',\r\n          ),\r\n          ErrorDescription(\r\n            'A RenderObject that still has dirty compositing bits cannot be '\r\n            'painted because this indicates that the tree has not yet been '\r\n            'properly configured for creating the layer tree.'\r\n          ),\r\n          ErrorHint(\r\n            'This usually indicates an error in the Flutter framework itself.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      let debugLastActivePaint = null;
      if (!dart.test(dart.fn(() => {
        this[_debugDoingThisPaint] = true;
        debugLastActivePaint = object$.RenderObject._debugActivePaint;
        object$.RenderObject._debugActivePaint = this;
        if (!(!dart.test(this.isRepaintBoundary) || this[_layer] != null)) dart.assertFailed(null, L4, 2303, 14, "!isRepaintBoundary || _layer != null");
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2299, 12, "() {\r\n      _debugDoingThisPaint = true;\r\n      debugLastActivePaint = _debugActivePaint;\r\n      _debugActivePaint = this;\r\n      assert(!isRepaintBoundary || _layer != null);\r\n      return true;\r\n    }()");
      this[_needsPaint] = false;
      try {
        this.paint(context, offset);
        if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L4, 2309, 14, "!_needsLayout");
        if (!!dart.test(this[_needsPaint])) dart.assertFailed(null, L4, 2310, 14, "!_needsPaint");
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stack = dart.stackTrace(e$);
        this[_debugReportException]("paint", e, stack);
      }
      if (!dart.test(dart.fn(() => {
        this.debugPaint(context, offset);
        object$.RenderObject._debugActivePaint = debugLastActivePaint;
        this[_debugDoingThisPaint] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2314, 12, "() {\r\n      debugPaint(context, offset);\r\n      _debugActivePaint = debugLastActivePaint;\r\n      _debugDoingThisPaint = false;\r\n      return true;\r\n    }()");
    }
    debugPaint(context, offset) {
    }
    paint(context, offset) {
    }
    applyPaintTransform(child, transform) {
      RenderObjectL().as(child);
      if (!dart.equals(child.parent, this)) dart.assertFailed(null, L4, 2357, 12, "child.parent == this");
    }
    getTransformTo(ancestor) {
      let ancestorSpecified = ancestor != null;
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 2374, 12, "attached");
      if (ancestor == null) {
        let rootNode = this.owner.rootNode;
        if (RenderObjectL().is(rootNode)) ancestor = rootNode;
      }
      let renderers = JSArrayOfRenderObjectL().of([]);
      for (let renderer = this; !dart.equals(renderer, ancestor); renderer = RenderObjectL().as(renderer.parent)) {
        if (!(renderer != null)) dart.assertFailed(null, L4, 2382, 14, "renderer != null");
        renderers[$add](renderer);
      }
      if (ancestorSpecified) renderers[$add](ancestor);
      let transform = vector_math_64.Matrix4.identity();
      for (let index = dart.notNull(renderers[$length]) - 1; index > 0; index = index - 1) {
        renderers[$_get](index).applyPaintTransform(renderers[$_get](index - 1), transform);
      }
      return transform;
    }
    describeApproximatePaintClip(child) {
      RenderObjectL().as(child);
      return null;
    }
    describeSemanticsClip(child) {
      RenderObjectL().as(child);
      return null;
    }
    scheduleInitialSemantics() {
      if (!dart.test(this.attached)) dart.assertFailed(null, L4, 2437, 12, "attached");
      if (!!RenderObjectL().is(this.parent)) dart.assertFailed(null, L4, 2438, 12, "parent is! RenderObject");
      if (!!dart.test(this.owner[_debugDoingSemantics])) dart.assertFailed(null, L4, 2439, 12, "!owner._debugDoingSemantics");
      if (!(this[_semantics] == null)) dart.assertFailed(null, L4, 2440, 12, "_semantics == null");
      if (!dart.test(this[_needsSemanticsUpdate])) dart.assertFailed(null, L4, 2441, 12, "_needsSemanticsUpdate");
      if (!(this.owner[_semanticsOwner] != null)) dart.assertFailed(null, L4, 2442, 12, "owner._semanticsOwner != null");
      this.owner[_nodesNeedingSemantics].add(this);
      this.owner.requestVisualUpdate();
    }
    describeSemanticsConfiguration(config) {
    }
    sendSemanticsEvent(semanticsEvent) {
      if (this.owner.semanticsOwner == null) return;
      if (this[_semantics] != null && !dart.test(this[_semantics].isMergedIntoParent)) {
        this[_semantics].sendEvent(semanticsEvent);
      } else if (this.parent != null) {
        let renderParent = RenderObjectL().as(this.parent);
        renderParent.sendSemanticsEvent(semanticsEvent);
      }
    }
    get [_semanticsConfiguration]() {
      if (this[_cachedSemanticsConfiguration] == null) {
        this[_cachedSemanticsConfiguration] = new semantics.SemanticsConfiguration.new();
        this.describeSemanticsConfiguration(this[_cachedSemanticsConfiguration]);
      }
      return this[_cachedSemanticsConfiguration];
    }
    get debugSemantics() {
      if (!false) {
        return this[_semantics];
      }
      return null;
    }
    clearSemantics() {
      this[_needsSemanticsUpdate] = true;
      this[_semantics] = null;
      this.visitChildren(dart.fn(child => {
        child.clearSemantics();
      }, RenderObjectLToNullN()));
    }
    markNeedsSemanticsUpdate() {
      let t4;
      if (!(!dart.test(this.attached) || !dart.test(this.owner[_debugDoingSemantics]))) dart.assertFailed(null, L4, 2559, 12, "!attached || !owner._debugDoingSemantics");
      if (!dart.test(this.attached) || this.owner[_semanticsOwner] == null) {
        this[_cachedSemanticsConfiguration] = null;
        return;
      }
      let wasSemanticsBoundary = this[_semantics] != null && dart.equals((t4 = this[_cachedSemanticsConfiguration], t4 == null ? null : t4.isSemanticBoundary), true);
      this[_cachedSemanticsConfiguration] = null;
      let isEffectiveSemanticsBoundary = dart.test(this[_semanticsConfiguration].isSemanticBoundary) && wasSemanticsBoundary;
      let node = this;
      while (!dart.test(isEffectiveSemanticsBoundary) && RenderObjectL().is(node.parent)) {
        if (!dart.equals(node, this) && dart.test(node[_needsSemanticsUpdate])) break;
        node[_needsSemanticsUpdate] = true;
        node = RenderObjectL().as(node.parent);
        isEffectiveSemanticsBoundary = node[_semanticsConfiguration].isSemanticBoundary;
        if (dart.test(isEffectiveSemanticsBoundary) && node[_semantics] == null) {
          return;
        }
      }
      if (!dart.equals(node, this) && this[_semantics] != null && dart.test(this[_needsSemanticsUpdate])) {
        this.owner[_nodesNeedingSemantics].remove(this);
      }
      if (!dart.test(node[_needsSemanticsUpdate])) {
        node[_needsSemanticsUpdate] = true;
        if (this.owner != null) {
          if (!(dart.test(node[_semanticsConfiguration].isSemanticBoundary) || !RenderObjectL().is(node.parent))) dart.assertFailed(null, L4, 2602, 16, "node._semanticsConfiguration.isSemanticBoundary || node.parent is! RenderObject");
          this.owner[_nodesNeedingSemantics].add(node);
          this.owner.requestVisualUpdate();
        }
      }
    }
    [_updateSemantics]() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4;
      if (!(dart.test(this[_semanticsConfiguration].isSemanticBoundary) || !RenderObjectL().is(this.parent))) dart.assertFailed(null, L4, 2611, 12, "_semanticsConfiguration.isSemanticBoundary || parent is! RenderObject");
      if (dart.test(this[_needsLayout])) {
        return;
      }
      let fragment = this[_getSemanticsForParent]({mergeIntoParent: (t4$0 = (t4$ = (t4 = this[_semantics], t4 == null ? null : t4.parent), t4$ == null ? null : t4$.isPartOfNodeMerging), t4$0 == null ? false : t4$0)});
      if (!_InterestingSemanticsFragmentL().is(fragment)) dart.assertFailed(null, L4, 2620, 12, "fragment is _InterestingSemanticsFragment");
      let interestingFragment = _InterestingSemanticsFragmentL().as(fragment);
      let node = interestingFragment.compileChildren({parentSemanticsClipRect: (t4$1 = this[_semantics], t4$1 == null ? null : t4$1.parentSemanticsClipRect), parentPaintClipRect: (t4$2 = this[_semantics], t4$2 == null ? null : t4$2.parentPaintClipRect), elevationAdjustment: (t4$4 = (t4$3 = this[_semantics], t4$3 == null ? null : t4$3.elevationAdjustment), t4$4 == null ? 0.0 : t4$4)})[$single];
      if (!(interestingFragment.config == null && dart.equals(node, this[_semantics]))) dart.assertFailed(null, L4, 2628, 12, "interestingFragment.config == null && node == _semantics");
    }
    [_getSemanticsForParent](opts) {
      let mergeIntoParent = opts && 'mergeIntoParent' in opts ? opts.mergeIntoParent : null;
      if (!(mergeIntoParent != null)) dart.assertFailed(null, L4, 2635, 12, "mergeIntoParent != null");
      if (!!dart.test(this[_needsLayout])) dart.assertFailed("Updated layout information required for " + dart.str(this) + " to calculate semantics.", L4, 2636, 12, "!_needsLayout");
      let config = this[_semanticsConfiguration];
      let dropSemanticsOfPreviousSiblings = config.isBlockingSemanticsOfPreviouslyPaintedNodes;
      let producesForkingFragment = !dart.test(config.hasBeenAnnotated) && !dart.test(config.isSemanticBoundary);
      let fragments = JSArrayOf_InterestingSemanticsFragmentL().of([]);
      let toBeMarkedExplicit = LinkedHashSetOf_InterestingSemanticsFragmentL().new();
      let childrenMergeIntoParent = dart.test(mergeIntoParent) || dart.test(config.isMergingSemanticsOfDescendants);
      let abortWalk = false;
      this.visitChildrenForSemantics(dart.fn(renderChild => {
        if (abortWalk || dart.test(this[_needsLayout])) {
          abortWalk = true;
          return;
        }
        let parentFragment = renderChild[_getSemanticsForParent]({mergeIntoParent: childrenMergeIntoParent});
        if (dart.test(parentFragment.abortsWalk)) {
          abortWalk = true;
          return;
        }
        if (dart.test(parentFragment.dropsSemanticsOfPreviousSiblings)) {
          fragments[$clear]();
          toBeMarkedExplicit.clear();
          if (!dart.test(config.isSemanticBoundary)) dropSemanticsOfPreviousSiblings = true;
        }
        for (let fragment of parentFragment.interestingFragments) {
          fragments[$add](fragment);
          fragment.addAncestor(this);
          fragment.addTags(config.tagsForChildren);
          if (dart.test(config.explicitChildNodes) || !RenderObjectL().is(this.parent)) {
            fragment.markAsExplicit();
            continue;
          }
          if (!dart.test(fragment.hasConfigForParent) || producesForkingFragment) continue;
          if (!dart.test(config.isCompatibleWith(fragment.config))) toBeMarkedExplicit.add(fragment);
          for (let siblingFragment of fragments[$sublist](0, dart.notNull(fragments[$length]) - 1)) {
            if (!dart.test(fragment.config.isCompatibleWith(siblingFragment.config))) {
              toBeMarkedExplicit.add(fragment);
              toBeMarkedExplicit.add(siblingFragment);
            }
          }
        }
      }, RenderObjectLToNullN()));
      if (abortWalk) {
        return new object$._AbortingSemanticsFragment.new({owner: this});
      }
      for (let fragment of toBeMarkedExplicit)
        fragment.markAsExplicit();
      this[_needsSemanticsUpdate] = false;
      let result = null;
      if (!RenderObjectL().is(this.parent)) {
        if (!!dart.test(config.hasBeenAnnotated)) dart.assertFailed(null, L4, 2704, 14, "!config.hasBeenAnnotated");
        if (!!dart.test(mergeIntoParent)) dart.assertFailed(null, L4, 2705, 14, "!mergeIntoParent");
        result = new object$._RootSemanticsFragment.new({owner: this, dropsSemanticsOfPreviousSiblings: dropSemanticsOfPreviousSiblings});
      } else if (producesForkingFragment) {
        result = new object$._ContainerSemanticsFragment.new({dropsSemanticsOfPreviousSiblings: dropSemanticsOfPreviousSiblings});
      } else {
        result = new object$._SwitchableSemanticsFragment.new({config: config, mergeIntoParent: mergeIntoParent, owner: this, dropsSemanticsOfPreviousSiblings: dropSemanticsOfPreviousSiblings});
        if (dart.test(config.isSemanticBoundary)) {
          let fragment = _SwitchableSemanticsFragmentL().as(result);
          fragment.markAsExplicit();
        }
      }
      result.addAll(fragments);
      return result;
    }
    visitChildrenForSemantics(visitor) {
      this.visitChildren(visitor);
    }
    assembleSemanticsNode(node, config, children) {
      if (!dart.equals(node, this[_semantics])) dart.assertFailed(null, L4, 2762, 12, "node == _semantics");
      node.updateWith({config: config, childrenInInversePaintOrder: ListLOfSemanticsNodeL().as(children)});
    }
    handleEvent(event, entry) {
      HitTestEntryL().as(entry);
    }
    toStringShort() {
      let header = diagnostics.describeIdentity(this);
      if (this[_relayoutBoundary] != null && !dart.equals(this[_relayoutBoundary], this)) {
        let count = 1;
        let target = RenderObjectL().as(this.parent);
        while (target != null && !dart.equals(target, this[_relayoutBoundary])) {
          target = RenderObjectL().as(target.parent);
          count = count + 1;
        }
        header = dart.notNull(header) + (" relayoutBoundary=up" + dart.str(count));
      }
      if (dart.test(this[_needsLayout])) header = dart.notNull(header) + " NEEDS-LAYOUT";
      if (dart.test(this[_needsPaint])) header = dart.notNull(header) + " NEEDS-PAINT";
      if (dart.test(this[_needsCompositingBitsUpdate])) header = dart.notNull(header) + " NEEDS-COMPOSITING-BITS-UPDATE";
      if (!dart.test(this.attached)) header = dart.notNull(header) + " DETACHED";
      return header;
    }
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C14 || CT.C14;
      return this.toStringShort();
    }
    toStringDeep(opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : "";
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C15 || CT.C15;
      let debugPreviousActiveLayout = null;
      if (!dart.test(dart.fn(() => {
        debugPreviousActiveLayout = object$.RenderObject._debugActiveLayout;
        object$.RenderObject._debugActiveLayout = null;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2831, 12, "() {\r\n      debugPreviousActiveLayout = _debugActiveLayout;\r\n      _debugActiveLayout = null;\r\n      return true;\r\n    }()");
      let result = super.toStringDeep({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel});
      if (!dart.test(dart.fn(() => {
        object$.RenderObject._debugActiveLayout = debugPreviousActiveLayout;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2841, 12, "() {\r\n      _debugActiveLayout = debugPreviousActiveLayout;\r\n      return true;\r\n    }()");
      return result;
    }
    toStringShallow(opts) {
      let joiner = opts && 'joiner' in opts ? opts.joiner : ", ";
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C15 || CT.C15;
      let debugPreviousActiveLayout = null;
      if (!dart.test(dart.fn(() => {
        debugPreviousActiveLayout = object$.RenderObject._debugActiveLayout;
        object$.RenderObject._debugActiveLayout = null;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2859, 12, "() {\r\n      debugPreviousActiveLayout = _debugActiveLayout;\r\n      _debugActiveLayout = null;\r\n      return true;\r\n    }()");
      let result = super.toStringShallow({joiner: joiner, minLevel: minLevel});
      if (!dart.test(dart.fn(() => {
        object$.RenderObject._debugActiveLayout = debugPreviousActiveLayout;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 2865, 12, "() {\r\n      _debugActiveLayout = debugPreviousActiveLayout;\r\n      return true;\r\n    }()");
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("needsCompositing", {value: this[_needsCompositing], ifTrue: "needs compositing"}));
      properties.add(new diagnostics.DiagnosticsProperty.new("creator", this.debugCreator, {defaultValue: null, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfParentDataL()).new("parentData", this.parentData, {tooltip: dart.equals(this[_debugCanParentUseSize], true) ? "can use size" : null, missingIfNull: true}));
      properties.add(new (DiagnosticsPropertyOfConstraintsL()).new("constraints", this.constraints, {missingIfNull: true}));
      properties.add(new (DiagnosticsPropertyOfContainerLayerL()).new("layer", this[_layer], {defaultValue: null}));
      properties.add(new (DiagnosticsPropertyOfSemanticsNodeL()).new("semantics node", this[_semantics], {defaultValue: null}));
      properties.add(new diagnostics.FlagProperty.new("isBlockingSemanticsOfPreviouslyPaintedNodes", {value: this[_semanticsConfiguration].isBlockingSemanticsOfPreviouslyPaintedNodes, ifTrue: "blocks semantics of earlier render objects below the common boundary"}));
      properties.add(new diagnostics.FlagProperty.new("isSemanticBoundary", {value: this[_semanticsConfiguration].isSemanticBoundary, ifTrue: "semantic boundary"}));
    }
    debugDescribeChildren() {
      return JSArrayOfDiagnosticsNodeL().of([]);
    }
    showOnScreen(opts) {
      let t4;
      let descendant = opts && 'descendant' in opts ? opts.descendant : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let duration = opts && 'duration' in opts ? opts.duration : C16 || CT.C16;
      let curve = opts && 'curve' in opts ? opts.curve : C17 || CT.C17;
      if (RenderObjectL().is(this.parent)) {
        let renderParent = RenderObjectL().as(this.parent);
        renderParent.showOnScreen({descendant: (t4 = descendant, t4 == null ? this : t4), rect: rect, duration: duration, curve: curve});
      }
    }
    describeForError(name, opts) {
      let style = opts && 'style' in opts ? opts.style : C18 || CT.C18;
      return this.toDiagnosticsNode({name: name, style: style});
    }
  };
  (object$.RenderObject.new = function() {
    this[parentData] = null;
    this[debugCreator$] = null;
    this[_debugDoingThisResize] = false;
    this[_debugDoingThisLayout] = false;
    this[_debugCanParentUseSize] = null;
    this[_debugMutationsLocked] = false;
    this[_needsLayout] = true;
    this[_relayoutBoundary] = null;
    this[_doingThisLayoutWithCallback] = false;
    this[_constraints] = null;
    this[_debugDoingThisPaint] = false;
    this[_layer] = null;
    this[_needsCompositingBitsUpdate] = false;
    this[_needsCompositing] = null;
    this[_needsPaint] = true;
    this[_cachedSemanticsConfiguration] = null;
    this[_needsSemanticsUpdate] = true;
    this[_semantics] = null;
    object$.RenderObject.__proto__.new.call(this);
    this[_needsCompositing] = dart.test(this.isRepaintBoundary) || dart.test(this.alwaysNeedsCompositing);
  }).prototype = object$.RenderObject.prototype;
  dart.addTypeTests(object$.RenderObject);
  dart.addTypeCaches(object$.RenderObject);
  object$.RenderObject[dart.implements] = () => [hit_test.HitTestTarget];
  dart.setMethodSignature(object$.RenderObject, () => ({
    __proto__: dart.getMethods(object$.RenderObject.__proto__),
    reassemble: dart.fnType(dart.void, []),
    setupParentData: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    adoptChild: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    dropChild: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    visitChildren: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.RenderObject)]))]),
    [_debugReportException]: dart.fnType(dart.void, [dart.legacy(core.String), dart.dynamic, dart.legacy(core.StackTrace)]),
    attach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayout]: dart.fnType(dart.legacy(core.bool), []),
    markNeedsLayout: dart.fnType(dart.void, []),
    markParentNeedsLayout: dart.fnType(dart.void, []),
    markNeedsLayoutForSizedByParentChange: dart.fnType(dart.void, []),
    [_cleanRelayoutBoundary]: dart.fnType(dart.void, []),
    scheduleInitialLayout: dart.fnType(dart.void, []),
    [_layoutWithoutResize]: dart.fnType(dart.void, []),
    layout: dart.fnType(dart.void, [dart.legacy(object$.Constraints)], {parentUsesSize: dart.legacy(core.bool)}, {}),
    debugResetSize: dart.fnType(dart.void, []),
    invokeLayoutCallback: dart.gFnType(T => [dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]], T => [dart.legacy(object$.Constraints)]),
    rotate: dart.fnType(dart.void, [], {newAngle: dart.legacy(core.int), oldAngle: dart.legacy(core.int), time: dart.legacy(core.Duration)}, {}),
    debugRegisterRepaintBoundaryPaint: dart.fnType(dart.void, [], {includedChild: dart.legacy(core.bool), includedParent: dart.legacy(core.bool)}, {}),
    markNeedsCompositingBitsUpdate: dart.fnType(dart.void, []),
    [_updateCompositingBits]: dart.fnType(dart.void, []),
    markNeedsPaint: dart.fnType(dart.void, []),
    [_skippedPaintingOnLayer]: dart.fnType(dart.void, []),
    scheduleInitialPaint: dart.fnType(dart.void, [dart.legacy(layer$.ContainerLayer)]),
    replaceRootLayer: dart.fnType(dart.void, [dart.legacy(layer$.OffsetLayer)]),
    [_paintWithContext]: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
    debugPaint: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
    paint: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
    applyPaintTransform: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(vector_math_64.Matrix4)]),
    getTransformTo: dart.fnType(dart.legacy(vector_math_64.Matrix4), [dart.legacy(object$.RenderObject)]),
    describeApproximatePaintClip: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.Object)]),
    describeSemanticsClip: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.Object)]),
    scheduleInitialSemantics: dart.fnType(dart.void, []),
    describeSemanticsConfiguration: dart.fnType(dart.void, [dart.legacy(semantics.SemanticsConfiguration)]),
    sendSemanticsEvent: dart.fnType(dart.void, [dart.legacy(semantics_event.SemanticsEvent)]),
    clearSemantics: dart.fnType(dart.void, []),
    markNeedsSemanticsUpdate: dart.fnType(dart.void, []),
    [_updateSemantics]: dart.fnType(dart.void, []),
    [_getSemanticsForParent]: dart.fnType(dart.legacy(object$._SemanticsFragment), [], {mergeIntoParent: dart.legacy(core.bool)}, {}),
    visitChildrenForSemantics: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.RenderObject)]))]),
    assembleSemanticsNode: dart.fnType(dart.void, [dart.legacy(semantics.SemanticsNode), dart.legacy(semantics.SemanticsConfiguration), dart.legacy(core.Iterable$(dart.legacy(semantics.SemanticsNode)))]),
    handleEvent: dart.fnType(dart.void, [dart.legacy(events.PointerEvent), dart.legacy(core.Object)]),
    toStringShort: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), [], {minLevel: dart.legacy(diagnostics.DiagnosticLevel)}, {}),
    [$toString]: dart.fnType(dart.legacy(core.String), [], {minLevel: dart.legacy(diagnostics.DiagnosticLevel)}, {}),
    toStringDeep: dart.fnType(dart.legacy(core.String), [], {minLevel: dart.legacy(diagnostics.DiagnosticLevel), prefixLineOne: dart.legacy(core.String), prefixOtherLines: dart.legacy(core.String)}, {}),
    toStringShallow: dart.fnType(dart.legacy(core.String), [], {joiner: dart.legacy(core.String), minLevel: dart.legacy(diagnostics.DiagnosticLevel)}, {}),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)]),
    debugDescribeChildren: dart.fnType(dart.legacy(core.List$(dart.legacy(diagnostics.DiagnosticsNode))), []),
    showOnScreen: dart.fnType(dart.void, [], {curve: dart.legacy(curves.Curve), descendant: dart.legacy(object$.RenderObject), duration: dart.legacy(core.Duration), rect: dart.legacy(ui.Rect)}, {}),
    describeForError: dart.fnType(dart.legacy(diagnostics.DiagnosticsNode), [dart.legacy(core.String)], {style: dart.legacy(diagnostics.DiagnosticsTreeStyle)}, {})
  }));
  dart.setGetterSignature(object$.RenderObject, () => ({
    __proto__: dart.getGetters(object$.RenderObject.__proto__),
    debugDoingThisResize: dart.legacy(core.bool),
    debugDoingThisLayout: dart.legacy(core.bool),
    debugCanParentUseSize: dart.legacy(core.bool),
    [_debugCanPerformMutations]: dart.legacy(core.bool),
    owner: dart.legacy(object$.PipelineOwner),
    debugNeedsLayout: dart.legacy(core.bool),
    constraints: dart.legacy(object$.Constraints),
    sizedByParent: dart.legacy(core.bool),
    debugDoingThisPaint: dart.legacy(core.bool),
    isRepaintBoundary: dart.legacy(core.bool),
    alwaysNeedsCompositing: dart.legacy(core.bool),
    layer: dart.legacy(layer$.ContainerLayer),
    debugLayer: dart.legacy(layer$.ContainerLayer),
    needsCompositing: dart.legacy(core.bool),
    debugNeedsPaint: dart.legacy(core.bool),
    [_semanticsConfiguration]: dart.legacy(semantics.SemanticsConfiguration),
    debugSemantics: dart.legacy(semantics.SemanticsNode)
  }));
  dart.setSetterSignature(object$.RenderObject, () => ({
    __proto__: dart.getSetters(object$.RenderObject.__proto__),
    layer: dart.legacy(layer$.ContainerLayer)
  }));
  dart.setLibraryUri(object$.RenderObject, L5);
  dart.setFieldSignature(object$.RenderObject, () => ({
    __proto__: dart.getFields(object$.RenderObject.__proto__),
    parentData: dart.fieldType(dart.legacy(object$.ParentData)),
    debugCreator: dart.fieldType(dart.dynamic),
    [_debugDoingThisResize]: dart.fieldType(dart.legacy(core.bool)),
    [_debugDoingThisLayout]: dart.fieldType(dart.legacy(core.bool)),
    [_debugCanParentUseSize]: dart.fieldType(dart.legacy(core.bool)),
    [_debugMutationsLocked]: dart.fieldType(dart.legacy(core.bool)),
    [_needsLayout]: dart.fieldType(dart.legacy(core.bool)),
    [_relayoutBoundary]: dart.fieldType(dart.legacy(object$.RenderObject)),
    [_doingThisLayoutWithCallback]: dart.fieldType(dart.legacy(core.bool)),
    [_constraints]: dart.fieldType(dart.legacy(object$.Constraints)),
    [_debugDoingThisPaint]: dart.fieldType(dart.legacy(core.bool)),
    [_layer]: dart.fieldType(dart.legacy(layer$.ContainerLayer)),
    [_needsCompositingBitsUpdate]: dart.fieldType(dart.legacy(core.bool)),
    [_needsCompositing]: dart.fieldType(dart.legacy(core.bool)),
    [_needsPaint]: dart.fieldType(dart.legacy(core.bool)),
    [_cachedSemanticsConfiguration]: dart.fieldType(dart.legacy(semantics.SemanticsConfiguration)),
    [_needsSemanticsUpdate]: dart.fieldType(dart.legacy(core.bool)),
    [_semantics]: dart.fieldType(dart.legacy(semantics.SemanticsNode))
  }));
  dart.defineExtensionMethods(object$.RenderObject, ['toString']);
  dart.defineLazy(object$.RenderObject, {
    /*object$.RenderObject._debugActiveLayout*/get _debugActiveLayout() {
      return null;
    },
    set _debugActiveLayout(_) {},
    /*object$.RenderObject.debugCheckingIntrinsics*/get debugCheckingIntrinsics() {
      return false;
    },
    set debugCheckingIntrinsics(_) {},
    /*object$.RenderObject._debugActivePaint*/get _debugActivePaint() {
      return null;
    },
    set _debugActivePaint(_) {}
  }, true);
  var _child = dart.privateName(object$, "_child");
  const _is_RenderObjectWithChildMixin_default = Symbol('_is_RenderObjectWithChildMixin_default');
  object$.RenderObjectWithChildMixin$ = dart.generic(ChildType => {
    var ChildTypeL = () => (ChildTypeL = dart.constFn(dart.legacy(ChildType)))();
    class RenderObjectWithChildMixin extends object$.RenderObject {}
    RenderObjectWithChildMixin[dart.mixinOn] = RenderObject => class RenderObjectWithChildMixin extends RenderObject {
      debugValidateChild(child) {
        if (!dart.test(dart.fn(() => {
          if (!ChildTypeL().is(child)) {
            dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("A " + dart.str(this.runtimeType) + " expected a child of type " + dart.str(dart.wrapType(ChildTypeL())) + " but received a " + "child of type " + dart.str(dart.runtimeType(child)) + "."), new assertions.ErrorDescription.new("RenderObjects expect specific types of children because they " + "coordinate with their children during layout and paint. For " + "example, a RenderSliver cannot be the child of a RenderBox because " + "a RenderSliver does not understand the RenderBox layout protocol."), new assertions.ErrorSpacer.new(), new diagnostics.DiagnosticsProperty.new("The " + dart.str(this.runtimeType) + " that expected a " + dart.str(dart.wrapType(ChildTypeL())) + " child was created by", this.debugCreator, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new assertions.ErrorSpacer.new(), new diagnostics.DiagnosticsProperty.new("The " + dart.str(dart.runtimeType(child)) + " that did not match the expected child type " + "was created by", child.debugCreator, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 2956, 12, "() {\r\n      if (child is! ChildType) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'A $runtimeType expected a child of type $ChildType but received a '\r\n            'child of type ${child.runtimeType}.'\r\n          ),\r\n          ErrorDescription(\r\n            'RenderObjects expect specific types of children because they '\r\n            'coordinate with their children during layout and paint. For '\r\n            'example, a RenderSliver cannot be the child of a RenderBox because '\r\n            'a RenderSliver does not understand the RenderBox layout protocol.',\r\n          ),\r\n          ErrorSpacer(),\r\n          DiagnosticsProperty<dynamic>(\r\n            'The $runtimeType that expected a $ChildType child was created by',\r\n            debugCreator,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          ),\r\n          ErrorSpacer(),\r\n          DiagnosticsProperty<dynamic>(\r\n            'The ${child.runtimeType} that did not match the expected child type '\r\n            'was created by',\r\n            child.debugCreator,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
        return true;
      }
      get child() {
        return this[_child];
      }
      set child(value) {
        ChildTypeL().as(value);
        if (this[_child] != null) this.dropChild(this[_child]);
        this[_child] = value;
        if (this[_child] != null) this.adoptChild(this[_child]);
      }
      attach(owner) {
        PipelineOwnerL().as(owner);
        super.attach(owner);
        if (this[_child] != null) this[_child].attach(owner);
      }
      detach() {
        super.detach();
        if (this[_child] != null) this[_child].detach();
      }
      redepthChildren() {
        if (this[_child] != null) this.redepthChild(this[_child]);
      }
      visitChildren(visitor) {
        if (this[_child] != null) visitor(this[_child]);
      }
      debugDescribeChildren() {
        return this.child != null ? JSArrayOfDiagnosticsNodeL().of([this.child.toDiagnosticsNode({name: "child"})]) : JSArrayOfDiagnosticsNodeL().of([]);
      }
    };
    (RenderObjectWithChildMixin[dart.mixinNew] = function() {
      this[_child] = null;
    }).prototype = RenderObjectWithChildMixin.prototype;
    dart.addTypeTests(RenderObjectWithChildMixin);
    RenderObjectWithChildMixin.prototype[_is_RenderObjectWithChildMixin_default] = true;
    dart.addTypeCaches(RenderObjectWithChildMixin);
    RenderObjectWithChildMixin[dart.implements] = () => [object$.RenderObject];
    dart.setMethodSignature(RenderObjectWithChildMixin, () => ({
      __proto__: dart.getMethods(RenderObjectWithChildMixin.__proto__),
      debugValidateChild: dart.fnType(dart.legacy(core.bool), [dart.legacy(object$.RenderObject)])
    }));
    dart.setGetterSignature(RenderObjectWithChildMixin, () => ({
      __proto__: dart.getGetters(RenderObjectWithChildMixin.__proto__),
      child: dart.legacy(ChildType)
    }));
    dart.setSetterSignature(RenderObjectWithChildMixin, () => ({
      __proto__: dart.getSetters(RenderObjectWithChildMixin.__proto__),
      child: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(RenderObjectWithChildMixin, L5);
    dart.setFieldSignature(RenderObjectWithChildMixin, () => ({
      __proto__: dart.getFields(RenderObjectWithChildMixin.__proto__),
      [_child]: dart.fieldType(dart.legacy(ChildType))
    }));
    return RenderObjectWithChildMixin;
  });
  object$.RenderObjectWithChildMixin = object$.RenderObjectWithChildMixin$();
  dart.addTypeTests(object$.RenderObjectWithChildMixin, _is_RenderObjectWithChildMixin_default);
  var _cachedIntrinsicDimensions = dart.privateName(box, "_cachedIntrinsicDimensions");
  var _size$ = dart.privateName(box, "_size");
  var _cachedBaselines = dart.privateName(box, "_cachedBaselines");
  var _debugActivePointers = dart.privateName(box, "_debugActivePointers");
  var _computeIntrinsicDimension = dart.privateName(box, "_computeIntrinsicDimension");
  var _owner$ = dart.privateName(box, "_owner");
  var _canBeUsedByParent$ = dart.privateName(box, "_canBeUsedByParent");
  var C19;
  var C20;
  var C21;
  box.RenderBox = class RenderBox extends object$.RenderObject {
    setupParentData(child) {
      RenderObjectL().as(child);
      if (!BoxParentDataL().is(child.parentData)) child.parentData = new box.BoxParentData.new();
    }
    [_computeIntrinsicDimension](dimension, argument, computer) {
      if (!(dart.test(object$.RenderObject.debugCheckingIntrinsics) || !dart.test(this.debugDoingThisResize))) dart.assertFailed(null, L6, 1300, 12, "RenderObject.debugCheckingIntrinsics || !debugDoingThisResize");
      let shouldCache = true;
      if (!dart.test(dart.fn(() => {
        if (dart.test(object$.RenderObject.debugCheckingIntrinsics)) shouldCache = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1302, 12, "() {\r\n      // we don't want the checked-mode intrinsic tests to affect\r\n      // who gets marked dirty, etc.\r\n      if (RenderObject.debugCheckingIntrinsics)\r\n        shouldCache = false;\r\n      return true;\r\n    }()");
      if (shouldCache) {
        this[_cachedIntrinsicDimensions] == null ? this[_cachedIntrinsicDimensions] = new (LinkedMapOf_IntrinsicDimensionsCacheEntryL$doubleL()).new() : null;
        return this[_cachedIntrinsicDimensions][$putIfAbsent](new box._IntrinsicDimensionsCacheEntry.new(dimension, argument), dart.fn(() => computer(argument), VoidTodoubleL()));
      }
      return computer(argument);
    }
    getMinIntrinsicWidth(height) {
      if (!dart.test(dart.fn(() => {
        if (height == null) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The height argument to getMinIntrinsicWidth was null."), new assertions.ErrorDescription.new("The argument to getMinIntrinsicWidth must not be negative or null."), new assertions.ErrorHint.new("If you do not have a specific height in mind, then pass double.infinity instead.")])));
        }
        if (dart.notNull(height) < 0.0) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The height argument to getMinIntrinsicWidth was negative."), new assertions.ErrorDescription.new("The argument to getMinIntrinsicWidth must not be negative or null."), new assertions.ErrorHint.new("If you perform computations on another height before passing it to " + "getMinIntrinsicWidth, consider using math.max() or double.clamp() " + "to force the value into the valid range.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1336, 12, "() {\r\n      if (height == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The height argument to getMinIntrinsicWidth was null.'),\r\n          ErrorDescription('The argument to getMinIntrinsicWidth must not be negative or null.'),\r\n          ErrorHint('If you do not have a specific height in mind, then pass double.infinity instead.'),\r\n        ]);\r\n      }\r\n      if (height < 0.0) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The height argument to getMinIntrinsicWidth was negative.'),\r\n          ErrorDescription('The argument to getMinIntrinsicWidth must not be negative or null.'),\r\n          ErrorHint(\r\n            'If you perform computations on another height before passing it to '\r\n            'getMinIntrinsicWidth, consider using math.max() or double.clamp() '\r\n            'to force the value into the valid range.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return this[_computeIntrinsicDimension](box._IntrinsicDimension.minWidth, height, dart.bind(this, 'computeMinIntrinsicWidth'));
    }
    computeMinIntrinsicWidth(height) {
      return 0.0;
    }
    getMaxIntrinsicWidth(height) {
      if (!dart.test(dart.fn(() => {
        if (height == null) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The height argument to getMaxIntrinsicWidth was null."), new assertions.ErrorDescription.new("The argument to getMaxIntrinsicWidth must not be negative or null."), new assertions.ErrorHint.new("If you do not have a specific height in mind, then pass double.infinity instead.")])));
        }
        if (dart.notNull(height) < 0.0) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The height argument to getMaxIntrinsicWidth was negative."), new assertions.ErrorDescription.new("The argument to getMaxIntrinsicWidth must not be negative or null."), new assertions.ErrorHint.new("If you perform computations on another height before passing it to " + "getMaxIntrinsicWidth, consider using math.max() or double.clamp() " + "to force the value into the valid range.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1481, 12, "() {\r\n      if (height == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The height argument to getMaxIntrinsicWidth was null.'),\r\n          ErrorDescription('The argument to getMaxIntrinsicWidth must not be negative or null.'),\r\n          ErrorHint('If you do not have a specific height in mind, then pass double.infinity instead.'),\r\n        ]);\r\n      }\r\n      if (height < 0.0) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The height argument to getMaxIntrinsicWidth was negative.'),\r\n          ErrorDescription('The argument to getMaxIntrinsicWidth must not be negative or null.'),\r\n          ErrorHint(\r\n            'If you perform computations on another height before passing it to '\r\n            'getMaxIntrinsicWidth, consider using math.max() or double.clamp() '\r\n            'to force the value into the valid range.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return this[_computeIntrinsicDimension](box._IntrinsicDimension.maxWidth, height, dart.bind(this, 'computeMaxIntrinsicWidth'));
    }
    computeMaxIntrinsicWidth(height) {
      return 0.0;
    }
    getMinIntrinsicHeight(width) {
      if (!dart.test(dart.fn(() => {
        if (width == null) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The width argument to getMinIntrinsicHeight was null."), new assertions.ErrorDescription.new("The argument to getMinIntrinsicHeight must not be negative or null."), new assertions.ErrorHint.new("If you do not have a specific width in mind, then pass double.infinity instead.")])));
        }
        if (dart.notNull(width) < 0.0) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The width argument to getMinIntrinsicHeight was negative."), new assertions.ErrorDescription.new("The argument to getMinIntrinsicHeight must not be negative or null."), new assertions.ErrorHint.new("If you perform computations on another width before passing it to " + "getMinIntrinsicHeight, consider using math.max() or double.clamp() " + "to force the value into the valid range.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1560, 12, "() {\r\n      if (width == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The width argument to getMinIntrinsicHeight was null.'),\r\n          ErrorDescription('The argument to getMinIntrinsicHeight must not be negative or null.'),\r\n          ErrorHint('If you do not have a specific width in mind, then pass double.infinity instead.'),\r\n        ]);\r\n      }\r\n      if (width < 0.0) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The width argument to getMinIntrinsicHeight was negative.'),\r\n          ErrorDescription('The argument to getMinIntrinsicHeight must not be negative or null.'),\r\n          ErrorHint(\r\n            'If you perform computations on another width before passing it to '\r\n            'getMinIntrinsicHeight, consider using math.max() or double.clamp() '\r\n            'to force the value into the valid range.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return this[_computeIntrinsicDimension](box._IntrinsicDimension.minHeight, width, dart.bind(this, 'computeMinIntrinsicHeight'));
    }
    computeMinIntrinsicHeight(width) {
      return 0.0;
    }
    getMaxIntrinsicHeight(width) {
      if (!dart.test(dart.fn(() => {
        if (width == null) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The width argument to getMaxIntrinsicHeight was null."), new assertions.ErrorDescription.new("The argument to getMaxIntrinsicHeight must not be negative or null."), new assertions.ErrorHint.new("If you do not have a specific width in mind, then pass double.infinity instead.")])));
        }
        if (dart.notNull(width) < 0.0) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The width argument to getMaxIntrinsicHeight was negative."), new assertions.ErrorDescription.new("The argument to getMaxIntrinsicHeight must not be negative or null."), new assertions.ErrorHint.new("If you perform computations on another width before passing it to " + "getMaxIntrinsicHeight, consider using math.max() or double.clamp() " + "to force the value into the valid range.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1638, 12, "() {\r\n      if (width == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The width argument to getMaxIntrinsicHeight was null.'),\r\n          ErrorDescription('The argument to getMaxIntrinsicHeight must not be negative or null.'),\r\n          ErrorHint('If you do not have a specific width in mind, then pass double.infinity instead.'),\r\n        ]);\r\n      }\r\n      if (width < 0.0) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('The width argument to getMaxIntrinsicHeight was negative.'),\r\n          ErrorDescription('The argument to getMaxIntrinsicHeight must not be negative or null.'),\r\n          ErrorHint(\r\n            'If you perform computations on another width before passing it to '\r\n            'getMaxIntrinsicHeight, consider using math.max() or double.clamp() '\r\n            'to force the value into the valid range.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return this[_computeIntrinsicDimension](box._IntrinsicDimension.maxHeight, width, dart.bind(this, 'computeMaxIntrinsicHeight'));
    }
    computeMaxIntrinsicHeight(width) {
      return 0.0;
    }
    get hasSize() {
      return this[_size$] != null;
    }
    get size() {
      if (!dart.test(this.hasSize)) dart.assertFailed("RenderBox was not laid out: " + dart.str(this.toString()), L6, 1713, 12, "hasSize");
      if (!dart.test(dart.fn(() => {
        let _size = this[_size$];
        if (_DebugSizeL().is(_size)) {
          if (!dart.equals(_size[_owner$], this)) dart.assertFailed(null, L6, 1717, 16, "_size._owner == this");
          if (object$.RenderObject.debugActiveLayout != null) {
            if (!(dart.test(this.debugDoingThisResize) || dart.test(this.debugDoingThisLayout) || dart.equals(object$.RenderObject.debugActiveLayout, this.parent) && dart.test(_size[_canBeUsedByParent$]))) dart.assertFailed("RenderBox.size accessed beyond the scope of resize, layout, or " + "permitted parent access. RenderBox can always access its own size, " + "otherwise, the only object that is allowed to read RenderBox.size " + "is its parent, if they have said they will. It you hit this assert " + "trying to access a child's size, pass \"parentUsesSize: true\" to " + "that child's layout().", L6, 1720, 13, "debugDoingThisResize || debugDoingThisLayout ||\r\n              (RenderObject.debugActiveLayout == parent && _size._canBeUsedByParent)");
          }
          if (!dart.equals(_size, this[_size$])) dart.assertFailed(null, L6, 1730, 16, "_size == this._size");
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1714, 12, "() {\r\n      final Size _size = this._size;\r\n      if (_size is _DebugSize) {\r\n        assert(_size._owner == this);\r\n        if (RenderObject.debugActiveLayout != null) {\r\n          assert(\r\n            debugDoingThisResize || debugDoingThisLayout ||\r\n              (RenderObject.debugActiveLayout == parent && _size._canBeUsedByParent),\r\n            'RenderBox.size accessed beyond the scope of resize, layout, or '\r\n            'permitted parent access. RenderBox can always access its own size, '\r\n            'otherwise, the only object that is allowed to read RenderBox.size '\r\n            'is its parent, if they have said they will. It you hit this assert '\r\n            'trying to access a child\\'s size, pass \"parentUsesSize: true\" to '\r\n            'that child\\'s layout().'\r\n          );\r\n        }\r\n        assert(_size == this._size);\r\n      }\r\n      return true;\r\n    }()");
      return this[_size$];
    }
    set size(value) {
      if (!!(dart.test(this.debugDoingThisResize) && dart.test(this.debugDoingThisLayout))) dart.assertFailed(null, L6, 1742, 12, "!(debugDoingThisResize && debugDoingThisLayout)");
      if (!(dart.test(this.sizedByParent) || !dart.test(this.debugDoingThisResize))) dart.assertFailed(null, L6, 1743, 12, "sizedByParent || !debugDoingThisResize");
      if (!dart.test(dart.fn(() => {
        if (dart.test(this.sizedByParent) && dart.test(this.debugDoingThisResize) || !dart.test(this.sizedByParent) && dart.test(this.debugDoingThisLayout)) return true;
        if (!!dart.test(this.debugDoingThisResize)) dart.assertFailed(null, L6, 1748, 14, "!debugDoingThisResize");
        let information = JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("RenderBox size setter called incorrectly.")]);
        if (dart.test(this.debugDoingThisLayout)) {
          if (!dart.test(this.sizedByParent)) dart.assertFailed(null, L6, 1753, 16, "sizedByParent");
          information[$add](new assertions.ErrorDescription.new("It appears that the size setter was called from performLayout()."));
        } else {
          information[$add](new assertions.ErrorDescription.new("The size setter was called from outside layout (neither performResize() nor performLayout() were being run for this object)."));
          if (this.owner != null && dart.test(this.owner.debugDoingLayout)) information[$add](new assertions.ErrorDescription.new("Only the object itself can set its size. It is a contract violation for other objects to set it."));
        }
        if (dart.test(this.sizedByParent))
          information[$add](new assertions.ErrorDescription.new("Because this RenderBox has sizedByParent set to true, it must set its size in performResize()."));
        else
          information[$add](new assertions.ErrorDescription.new("Because this RenderBox has sizedByParent set to false, it must set its size in performLayout()."));
        dart.throw(new assertions.FlutterError.fromParts(information));
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1744, 12, "() {\r\n      if ((sizedByParent && debugDoingThisResize) ||\r\n          (!sizedByParent && debugDoingThisLayout))\r\n        return true;\r\n      assert(!debugDoingThisResize);\r\n      final List<DiagnosticsNode> information = <DiagnosticsNode>[\r\n        ErrorSummary('RenderBox size setter called incorrectly.'),\r\n      ];\r\n      if (debugDoingThisLayout) {\r\n        assert(sizedByParent);\r\n        information.add(ErrorDescription('It appears that the size setter was called from performLayout().'));\r\n      } else {\r\n        information.add(ErrorDescription(\r\n          'The size setter was called from outside layout (neither performResize() nor performLayout() were being run for this object).'\r\n        ));\r\n        if (owner != null && owner.debugDoingLayout)\r\n          information.add(ErrorDescription('Only the object itself can set its size. It is a contract violation for other objects to set it.'));\r\n      }\r\n      if (sizedByParent)\r\n        information.add(ErrorDescription('Because this RenderBox has sizedByParent set to true, it must set its size in performResize().'));\r\n      else\r\n        information.add(ErrorDescription('Because this RenderBox has sizedByParent set to false, it must set its size in performLayout().'));\r\n      throw FlutterError.fromParts(information);\r\n    }()");
      if (!dart.test(dart.fn(() => {
        value = this.debugAdoptSize(value);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1768, 12, "() {\r\n      value = debugAdoptSize(value);\r\n      return true;\r\n    }()");
      this[_size$] = value;
      if (!dart.test(dart.fn(() => {
        this.debugAssertDoesMeetConstraints();
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1773, 12, "() {\r\n      debugAssertDoesMeetConstraints();\r\n      return true;\r\n    }()");
    }
    debugAdoptSize(value) {
      let result = value;
      if (!dart.test(dart.fn(() => {
        if (_DebugSizeL().is(value)) {
          if (!dart.equals(value[_owner$], this)) {
            if (!dart.equals(value[_owner$].parent, this)) {
              dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("The size property was assigned a size inappropriately."), this.describeForError("The following render object"), value[_owner$].describeForError("...was assigned a size obtained from"), new assertions.ErrorDescription.new("However, this second render object is not, or is no longer, a " + "child of the first, and it is therefore a violation of the " + "RenderBox layout protocol to use that size in the layout of the " + "first render object."), new assertions.ErrorHint.new("If the size was obtained at a time where it was valid to read " + "the size (because the second render object above was a child " + "of the first at the time), then it should be adopted using " + "debugAdoptSize at that time."), new assertions.ErrorHint.new("If the size comes from a grandchild or a render object from an " + "entirely different part of the render tree, then there is no " + "way to be notified when the size changes and therefore attempts " + "to read that size are almost certainly a source of bugs. A different " + "approach should be used.")])));
            }
            if (!dart.test(value[_canBeUsedByParent$])) {
              dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("A child's size was used without setting parentUsesSize."), this.describeForError("The following render object"), value[_owner$].describeForError("...was assigned a size obtained from its child"), new assertions.ErrorDescription.new("However, when the child was laid out, the parentUsesSize argument " + "was not set or set to false. Subsequently this transpired to be " + "inaccurate: the size was nonetheless used by the parent.\n" + "It is important to tell the framework if the size will be used or not " + "as several important performance optimizations can be made if the " + "size will not be used by the parent.")])));
            }
          }
        }
        result = new box._DebugSize.new(value, this, this.debugCanParentUseSize);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1794, 12, "() {\r\n      if (value is _DebugSize) {\r\n        if (value._owner != this) {\r\n          if (value._owner.parent != this) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('The size property was assigned a size inappropriately.'),\r\n              describeForError('The following render object'),\r\n              value._owner.describeForError('...was assigned a size obtained from'),\r\n              ErrorDescription(\r\n                'However, this second render object is not, or is no longer, a '\r\n                'child of the first, and it is therefore a violation of the '\r\n                'RenderBox layout protocol to use that size in the layout of the '\r\n                'first render object.'\r\n              ),\r\n              ErrorHint(\r\n                'If the size was obtained at a time where it was valid to read '\r\n                'the size (because the second render object above was a child '\r\n                'of the first at the time), then it should be adopted using '\r\n                'debugAdoptSize at that time.'\r\n              ),\r\n              ErrorHint(\r\n                'If the size comes from a grandchild or a render object from an '\r\n                'entirely different part of the render tree, then there is no '\r\n                'way to be notified when the size changes and therefore attempts '\r\n                'to read that size are almost certainly a source of bugs. A different '\r\n                'approach should be used.'\r\n              ),\r\n            ]);\r\n          }\r\n          if (!value._canBeUsedByParent) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary(\"A child's size was used without setting parentUsesSize.\"),\r\n              describeForError('The following render object'),\r\n              value._owner.describeForError('...was assigned a size obtained from its child'),\r\n              ErrorDescription(\r\n                'However, when the child was laid out, the parentUsesSize argument '\r\n                'was not set or set to false. Subsequently this transpired to be '\r\n                'inaccurate: the size was nonetheless used by the parent.\\n'\r\n                'It is important to tell the framework if the size will be used or not '\r\n                'as several important performance optimizations can be made if the '\r\n                'size will not be used by the parent.'\r\n              ),\r\n            ]);\r\n          }\r\n        }\r\n      }\r\n      result = _DebugSize(value, this, debugCanParentUseSize);\r\n      return true;\r\n    }()");
      return result;
    }
    get semanticBounds() {
      return ui.Offset.zero['&'](this.size);
    }
    debugResetSize() {
      this.size = this.size;
    }
    static _debugSetDoingBaseline(value) {
      box.RenderBox._debugDoingBaseline = value;
      return true;
    }
    getDistanceToBaseline(baseline, opts) {
      let onlyReal = opts && 'onlyReal' in opts ? opts.onlyReal : false;
      if (!!dart.test(box.RenderBox._debugDoingBaseline)) dart.assertFailed("Please see the documentation for computeDistanceToActualBaseline for the required calling conventions of this method.", L6, 1879, 12, "!_debugDoingBaseline");
      if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L6, 1880, 12, "!debugNeedsLayout");
      if (!dart.test(dart.fn(() => {
        let parent = RenderObjectL().as(this.parent);
        if (dart.test(this.owner.debugDoingLayout)) return dart.equals(object$.RenderObject.debugActiveLayout, parent) && dart.test(parent.debugDoingThisLayout);
        if (dart.test(this.owner.debugDoingPaint)) return dart.equals(object$.RenderObject.debugActivePaint, parent) && dart.test(parent.debugDoingThisPaint) || dart.equals(object$.RenderObject.debugActivePaint, this) && dart.test(this.debugDoingThisPaint);
        if (!dart.equals(parent, this.parent)) dart.assertFailed(null, L6, 1888, 14, "parent == this.parent");
        return false;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1881, 12, "() {\r\n      final RenderObject parent = this.parent as RenderObject;\r\n      if (owner.debugDoingLayout)\r\n        return (RenderObject.debugActiveLayout == parent) && parent.debugDoingThisLayout;\r\n      if (owner.debugDoingPaint)\r\n        return ((RenderObject.debugActivePaint == parent) && parent.debugDoingThisPaint) ||\r\n               ((RenderObject.debugActivePaint == this) && debugDoingThisPaint);\r\n      assert(parent == this.parent);\r\n      return false;\r\n    }()");
      if (!dart.test(box.RenderBox._debugSetDoingBaseline(true))) dart.assertFailed(null, L6, 1891, 12, "_debugSetDoingBaseline(true)");
      let result = this.getDistanceToActualBaseline(baseline);
      if (!dart.test(box.RenderBox._debugSetDoingBaseline(false))) dart.assertFailed(null, L6, 1893, 12, "_debugSetDoingBaseline(false)");
      if (result == null && !dart.test(onlyReal)) return this.size.height;
      return result;
    }
    getDistanceToActualBaseline(baseline) {
      if (!dart.test(box.RenderBox._debugDoingBaseline)) dart.assertFailed("Please see the documentation for computeDistanceToActualBaseline for the required calling conventions of this method.", L6, 1907, 12, "_debugDoingBaseline");
      this[_cachedBaselines] == null ? this[_cachedBaselines] = new (LinkedMapOfTextBaselineL$doubleL()).new() : null;
      this[_cachedBaselines][$putIfAbsent](baseline, dart.fn(() => this.computeDistanceToActualBaseline(baseline), VoidTodoubleL()));
      return this[_cachedBaselines][$_get](baseline);
    }
    computeDistanceToActualBaseline(baseline) {
      if (!dart.test(box.RenderBox._debugDoingBaseline)) dart.assertFailed("Please see the documentation for computeDistanceToActualBaseline for the required calling conventions of this method.", L6, 1939, 12, "_debugDoingBaseline");
      return null;
    }
    get constraints() {
      return BoxConstraintsL().as(super.constraints);
    }
    debugAssertDoesMeetConstraints() {
      if (!(this.constraints != null)) dart.assertFailed(null, L6, 1949, 12, "constraints != null");
      if (!dart.test(dart.fn(() => {
        if (!dart.test(this.hasSize)) {
          let contract = null;
          if (dart.test(this.sizedByParent))
            contract = new assertions.ErrorDescription.new("Because this RenderBox has sizedByParent set to true, it must set its size in performResize().");
          else
            contract = new assertions.ErrorDescription.new("Because this RenderBox has sizedByParent set to false, it must set its size in performLayout().");
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("RenderBox did not set its size during layout."), contract, new assertions.ErrorDescription.new("It appears that this did not happen; layout completed, but the size property is still null."), new (DiagnosticsPropertyOfRenderBoxL()).new("The RenderBox in question is", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
        }
        if (!dart.test(this[_size$].isFinite)) {
          let information = JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new(dart.str(this.runtimeType) + " object was given an infinite size during layout."), new assertions.ErrorDescription.new("This probably means that it is a render object that tries to be " + "as big as possible, but it was put inside another render object " + "that allows its children to pick their own size.")]);
          if (!dart.test(this.constraints.hasBoundedWidth)) {
            let node = this;
            while (!dart.test(node.constraints.hasBoundedWidth) && RenderBoxL().is(node.parent))
              node = RenderBoxL().as(node.parent);
            information[$add](node.describeForError("The nearest ancestor providing an unbounded width constraint is"));
          }
          if (!dart.test(this.constraints.hasBoundedHeight)) {
            let node = this;
            while (!dart.test(node.constraints.hasBoundedHeight) && RenderBoxL().is(node.parent))
              node = RenderBoxL().as(node.parent);
            information[$add](node.describeForError("The nearest ancestor providing an unbounded height constraint is"));
          }
          dart.throw(new assertions.FlutterError.fromParts((() => {
            let t4 = JSArrayOfDiagnosticsNodeL().of([]);
            for (let t5 of information)
              t4[$add](t5);
            t4[$add](new (DiagnosticsPropertyOfBoxConstraintsL()).new("The constraints that applied to the " + dart.str(this.runtimeType) + " were", this.constraints, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}));
            t4[$add](new (DiagnosticsPropertyOfSizeL()).new("The exact size it was given was", this[_size$], {style: diagnostics.DiagnosticsTreeStyle.errorProperty}));
            t4[$add](new assertions.ErrorHint.new("See https://flutter.dev/docs/development/ui/layout/box-constraints for more information."));
            return t4;
          })()));
        }
        if (!dart.test(this.constraints.isSatisfiedBy(this[_size$]))) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new(dart.str(this.runtimeType) + " does not meet its constraints."), new (DiagnosticsPropertyOfBoxConstraintsL()).new("Constraints", this.constraints, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new (DiagnosticsPropertyOfSizeL()).new("Size", this[_size$], {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new assertions.ErrorHint.new("If you are not writing your own RenderBox subclass, then this is not " + "your fault. Contact support: https://github.com/flutter/flutter/issues/new?template=BUG.md")])));
        }
        if (dart.test(debug$.debugCheckIntrinsicSizes)) {
          if (!!dart.test(object$.RenderObject.debugCheckingIntrinsics)) dart.assertFailed(null, L6, 2009, 16, "!RenderObject.debugCheckingIntrinsics");
          object$.RenderObject.debugCheckingIntrinsics = true;
          let failures = JSArrayOfDiagnosticsNodeL().of([]);
          function testIntrinsic($function, name, constraint) {
            let result = $function(constraint);
            if (dart.notNull(result) < 0) {
              failures[$add](new assertions.ErrorDescription.new(" * " + dart.str(name) + "(" + dart.str(constraint) + ") returned a negative value: " + dart.str(result)));
            }
            if (!result[$isFinite]) {
              failures[$add](new assertions.ErrorDescription.new(" * " + dart.str(name) + "(" + dart.str(constraint) + ") returned a non-finite value: " + dart.str(result)));
            }
            return result;
          }
          dart.fn(testIntrinsic, FnAndStringLAnddoubleLTodoubleL());
          function testIntrinsicsForValues(getMin, getMax, name, constraint) {
            let min = testIntrinsic(getMin, "getMinIntrinsic" + dart.str(name), constraint);
            let max = testIntrinsic(getMax, "getMaxIntrinsic" + dart.str(name), constraint);
            if (dart.notNull(min) > dart.notNull(max)) {
              failures[$add](new assertions.ErrorDescription.new(" * getMinIntrinsic" + dart.str(name) + "(" + dart.str(constraint) + ") returned a larger value (" + dart.str(min) + ") than getMaxIntrinsic" + dart.str(name) + "(" + dart.str(constraint) + ") (" + dart.str(max) + ")"));
            }
          }
          dart.fn(testIntrinsicsForValues, FnAndFnAndStringL__Tovoid());
          testIntrinsicsForValues(dart.bind(this, 'getMinIntrinsicWidth'), dart.bind(this, 'getMaxIntrinsicWidth'), "Width", 1 / 0);
          testIntrinsicsForValues(dart.bind(this, 'getMinIntrinsicHeight'), dart.bind(this, 'getMaxIntrinsicHeight'), "Height", 1 / 0);
          if (dart.test(this.constraints.hasBoundedWidth)) testIntrinsicsForValues(dart.bind(this, 'getMinIntrinsicWidth'), dart.bind(this, 'getMaxIntrinsicWidth'), "Width", this.constraints.maxHeight);
          if (dart.test(this.constraints.hasBoundedHeight)) testIntrinsicsForValues(dart.bind(this, 'getMinIntrinsicHeight'), dart.bind(this, 'getMaxIntrinsicHeight'), "Height", this.constraints.maxWidth);
          object$.RenderObject.debugCheckingIntrinsics = false;
          if (dart.test(failures[$isNotEmpty])) {
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t6 = JSArrayOfDiagnosticsNodeL().of([]);
              t6[$add](new assertions.ErrorSummary.new("The intrinsic dimension methods of the " + dart.str(this.runtimeType) + " class returned values that violate the intrinsic protocol contract."));
              t6[$add](new assertions.ErrorDescription.new("The following " + (dart.notNull(failures[$length]) > 1 ? "failures" : "failure") + " was detected:"));
              for (let t7 of failures)
                t6[$add](t7);
              t6[$add](new assertions.ErrorHint.new("If you are not writing your own RenderBox subclass, then this is not\n" + "your fault. Contact support: https://github.com/flutter/flutter/issues/new?template=BUG.md"));
              return t6;
            })()));
          }
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 1950, 12, "() {\r\n      if (!hasSize) {\r\n        DiagnosticsNode contract;\r\n        if (sizedByParent)\r\n          contract = ErrorDescription('Because this RenderBox has sizedByParent set to true, it must set its size in performResize().');\r\n        else\r\n          contract = ErrorDescription('Because this RenderBox has sizedByParent set to false, it must set its size in performLayout().');\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('RenderBox did not set its size during layout.'),\r\n          contract,\r\n          ErrorDescription('It appears that this did not happen; layout completed, but the size property is still null.'),\r\n          DiagnosticsProperty<RenderBox>('The RenderBox in question is', this, style: DiagnosticsTreeStyle.errorProperty),\r\n        ]);\r\n      }\r\n      // verify that the size is not infinite\r\n      if (!_size.isFinite) {\r\n        final List<DiagnosticsNode> information = <DiagnosticsNode>[\r\n          ErrorSummary('$runtimeType object was given an infinite size during layout.'),\r\n          ErrorDescription(\r\n            'This probably means that it is a render object that tries to be '\r\n            'as big as possible, but it was put inside another render object '\r\n            'that allows its children to pick their own size.'\r\n          ),\r\n        ];\r\n        if (!constraints.hasBoundedWidth) {\r\n          RenderBox node = this;\r\n          while (!node.constraints.hasBoundedWidth && node.parent is RenderBox)\r\n            node = node.parent as RenderBox;\r\n\r\n          information.add(node.describeForError('The nearest ancestor providing an unbounded width constraint is'));\r\n        }\r\n        if (!constraints.hasBoundedHeight) {\r\n          RenderBox node = this;\r\n          while (!node.constraints.hasBoundedHeight && node.parent is RenderBox)\r\n            node = node.parent as RenderBox;\r\n\r\n          information.add(node.describeForError('The nearest ancestor providing an unbounded height constraint is'));\r\n        }\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ...information,\r\n          DiagnosticsProperty<BoxConstraints>('The constraints that applied to the $runtimeType were', constraints, style: DiagnosticsTreeStyle.errorProperty),\r\n          DiagnosticsProperty<Size>('The exact size it was given was', _size, style: DiagnosticsTreeStyle.errorProperty),\r\n          ErrorHint('See https://flutter.dev/docs/development/ui/layout/box-constraints for more information.'),\r\n        ]);\r\n     }\r\n      // verify that the size is within the constraints\r\n      if (!constraints.isSatisfiedBy(_size)) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('$runtimeType does not meet its constraints.'),\r\n          DiagnosticsProperty<BoxConstraints>('Constraints', constraints, style: DiagnosticsTreeStyle.errorProperty),\r\n          DiagnosticsProperty<Size>('Size', _size, style: DiagnosticsTreeStyle.errorProperty),\r\n          ErrorHint(\r\n            'If you are not writing your own RenderBox subclass, then this is not '\r\n            'your fault. Contact support: https://github.com/flutter/flutter/issues/new?template=BUG.md'\r\n          ),\r\n        ]);\r\n      }\r\n      if (debugCheckIntrinsicSizes) {\r\n        // verify that the intrinsics are sane\r\n        assert(!RenderObject.debugCheckingIntrinsics);\r\n        RenderObject.debugCheckingIntrinsics = true;\r\n        final List<DiagnosticsNode> failures = <DiagnosticsNode>[];\r\n\r\n        double testIntrinsic(double function(double extent), String name, double constraint) {\r\n          final double result = function(constraint);\r\n          if (result < 0) {\r\n            failures.add(ErrorDescription(' * $name($constraint) returned a negative value: $result'));\r\n          }\r\n          if (!result.isFinite) {\r\n            failures.add(ErrorDescription(' * $name($constraint) returned a non-finite value: $result'));\r\n          }\r\n          return result;\r\n        }\r\n\r\n        void testIntrinsicsForValues(double getMin(double extent), double getMax(double extent), String name, double constraint) {\r\n          final double min = testIntrinsic(getMin, 'getMinIntrinsic$name', constraint);\r\n          final double max = testIntrinsic(getMax, 'getMaxIntrinsic$name', constraint);\r\n          if (min > max) {\r\n            failures.add(ErrorDescription(' * getMinIntrinsic$name($constraint) returned a larger value ($min) than getMaxIntrinsic$name($constraint) ($max)'));\r\n          }\r\n        }\r\n\r\n        testIntrinsicsForValues(getMinIntrinsicWidth, getMaxIntrinsicWidth, 'Width', double.infinity);\r\n        testIntrinsicsForValues(getMinIntrinsicHeight, getMaxIntrinsicHeight, 'Height', double.infinity);\r\n        if (constraints.hasBoundedWidth)\r\n          testIntrinsicsForValues(getMinIntrinsicWidth, getMaxIntrinsicWidth, 'Width', constraints.maxHeight);\r\n        if (constraints.hasBoundedHeight)\r\n          testIntrinsicsForValues(getMinIntrinsicHeight, getMaxIntrinsicHeight, 'Height', constraints.maxWidth);\r\n\r\n        // TODO(ianh): Test that values are internally consistent in more ways than the above.\r\n\r\n        RenderObject.debugCheckingIntrinsics = false;\r\n        if (failures.isNotEmpty) {\r\n          // TODO(jacobr): consider nesting the failures object so it is collapsible.\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('The intrinsic dimension methods of the $runtimeType class returned values that violate the intrinsic protocol contract.'),\r\n            ErrorDescription('The following ${failures.length > 1 ? \"failures\" : \"failure\"} was detected:'), // should this be tagged as an error or not?\r\n            ...failures,\r\n            ErrorHint(\r\n              'If you are not writing your own RenderBox subclass, then this is not\\n'\r\n              'your fault. Contact support: https://github.com/flutter/flutter/issues/new?template=BUG.md'\r\n            ),\r\n          ]);\r\n        }\r\n      }\r\n      return true;\r\n    }()");
    }
    markNeedsLayout() {
      let t8, t8$;
      if (this[_cachedBaselines] != null && dart.test(this[_cachedBaselines][$isNotEmpty]) || this[_cachedIntrinsicDimensions] != null && dart.test(this[_cachedIntrinsicDimensions][$isNotEmpty])) {
        t8 = this[_cachedBaselines];
        t8 == null ? null : t8[$clear]();
        t8$ = this[_cachedIntrinsicDimensions];
        t8$ == null ? null : t8$[$clear]();
        if (RenderObjectL().is(this.parent)) {
          this.markParentNeedsLayout();
          return;
        }
      }
      super.markNeedsLayout();
    }
    performResize() {
      this.size = this.constraints.smallest;
      if (!dart.test(this.size.isFinite)) dart.assertFailed(null, L6, 2082, 12, "size.isFinite");
    }
    performLayout() {
      if (!dart.test(dart.fn(() => {
        if (!dart.test(this.sizedByParent)) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new(dart.str(this.runtimeType) + " did not implement performLayout()."), new assertions.ErrorHint.new("RenderBox subclasses need to either override performLayout() to " + "set a size and lay out any children, or, set sizedByParent to true " + "so that performResize() sizes the render object.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2087, 12, "() {\r\n      if (!sizedByParent) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('$runtimeType did not implement performLayout().'),\r\n          ErrorHint(\r\n            'RenderBox subclasses need to either override performLayout() to '\r\n            'set a size and lay out any children, or, set sizedByParent to true '\r\n            'so that performResize() sizes the render object.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (!dart.test(dart.fn(() => {
        if (!dart.test(this.hasSize)) {
          if (dart.test(this.debugNeedsLayout)) {
            dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("Cannot hit test a render box that has never been laid out."), this.describeForError("The hitTest() method was called on this RenderBox"), new assertions.ErrorDescription.new("Unfortunately, this object's geometry is not known at this time, " + "probably because it has never been laid out. " + "This means it cannot be accurately hit-tested."), new assertions.ErrorHint.new("If you are trying " + "to perform a hit test during the layout phase itself, make sure " + "you only hit test nodes that have completed layout (e.g. the node's " + "children, after their layout() method has been called).")])));
          }
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("Cannot hit test a render box with no size."), this.describeForError("The hitTest() method was called on this RenderBox"), new assertions.ErrorDescription.new("Although this node is not marked as needing layout, " + "its size is not set."), new assertions.ErrorHint.new("A RenderBox object must have an " + "explicit size before it can be hit-tested. Make sure " + "that the RenderBox in question sets its size during layout.")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2127, 12, "() {\r\n      if (!hasSize) {\r\n        if (debugNeedsLayout) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Cannot hit test a render box that has never been laid out.'),\r\n            describeForError('The hitTest() method was called on this RenderBox'),\r\n            ErrorDescription(\r\n              \"Unfortunately, this object's geometry is not known at this time, \"\r\n              'probably because it has never been laid out. '\r\n              'This means it cannot be accurately hit-tested.'\r\n            ),\r\n            ErrorHint(\r\n              'If you are trying '\r\n              'to perform a hit test during the layout phase itself, make sure '\r\n              \"you only hit test nodes that have completed layout (e.g. the node's \"\r\n              'children, after their layout() method has been called).'\r\n            ),\r\n          ]);\r\n        }\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot hit test a render box with no size.'),\r\n          describeForError('The hitTest() method was called on this RenderBox'),\r\n          ErrorDescription(\r\n            'Although this node is not marked as needing layout, '\r\n            'its size is not set.'\r\n          ),\r\n          ErrorHint(\r\n            'A RenderBox object must have an '\r\n            'explicit size before it can be hit-tested. Make sure '\r\n            'that the RenderBox in question sets its size during layout.'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (dart.test(this[_size$].contains(position))) {
        if (dart.test(this.hitTestChildren(result, {position: position})) || dart.test(this.hitTestSelf(position))) {
          result.add(new box.BoxHitTestEntry.new(this, position));
          return true;
        }
      }
      return false;
    }
    hitTestSelf(position) {
      return false;
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return false;
    }
    applyPaintTransform(child, transform) {
      RenderObjectL().as(child);
      if (!(child != null)) dart.assertFailed(null, L6, 2225, 12, "child != null");
      if (!dart.equals(child.parent, this)) dart.assertFailed(null, L6, 2226, 12, "child.parent == this");
      if (!dart.test(dart.fn(() => {
        if (!BoxParentDataL().is(child.parentData)) {
          dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new(dart.str(this.runtimeType) + " does not implement applyPaintTransform."), this.describeForError("The following " + dart.str(this.runtimeType) + " object"), child.describeForError("...did not use a BoxParentData class for the parentData field of the following child"), new assertions.ErrorDescription.new("The " + dart.str(this.runtimeType) + " class inherits from RenderBox."), new assertions.ErrorHint.new("The default applyPaintTransform implementation provided by RenderBox assumes that the " + "children all use BoxParentData objects for their parentData field. " + "Since " + dart.str(this.runtimeType) + " does not in fact use that ParentData class for its children, it must " + "provide an implementation of applyPaintTransform that supports the specific ParentData " + "subclass used by its children (which apparently is " + dart.str(dart.runtimeType(child.parentData)) + ").")])));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2227, 12, "() {\r\n      if (child.parentData is! BoxParentData) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('$runtimeType does not implement applyPaintTransform.'),\r\n          describeForError('The following $runtimeType object'),\r\n          child.describeForError('...did not use a BoxParentData class for the parentData field of the following child'),\r\n          ErrorDescription('The $runtimeType class inherits from RenderBox.'),\r\n          ErrorHint(\r\n            'The default applyPaintTransform implementation provided by RenderBox assumes that the '\r\n            'children all use BoxParentData objects for their parentData field. '\r\n            'Since $runtimeType does not in fact use that ParentData class for its children, it must '\r\n            'provide an implementation of applyPaintTransform that supports the specific ParentData '\r\n            'subclass used by its children (which apparently is ${child.parentData.runtimeType}).'\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      let childParentData = BoxParentDataL().as(child.parentData);
      let offset = childParentData.offset;
      transform.translate(offset.dx, offset.dy);
    }
    globalToLocal(point, opts) {
      let ancestor = opts && 'ancestor' in opts ? opts.ancestor : null;
      let transform = this.getTransformTo(ancestor);
      let det = transform.invert();
      if (det === 0.0) return ui.Offset.zero;
      let n = vector_math_64.Vector3.new(0.0, 0.0, 1.0);
      let i = transform.perspectiveTransform(vector_math_64.Vector3.new(0.0, 0.0, 0.0));
      let d = transform.perspectiveTransform(vector_math_64.Vector3.new(0.0, 0.0, 1.0))['-'](i);
      let s = transform.perspectiveTransform(vector_math_64.Vector3.new(point.dx, point.dy, 0.0));
      let p = s['-'](d['*'](dart.notNull(n.dot(s)) / dart.notNull(n.dot(d))));
      return new ui.Offset.new(p.x, p.y);
    }
    localToGlobal(point, opts) {
      let ancestor = opts && 'ancestor' in opts ? opts.ancestor : null;
      return matrix_utils.MatrixUtils.transformPoint(this.getTransformTo(ancestor), point);
    }
    get paintBounds() {
      return ui.Offset.zero['&'](this.size);
    }
    handleEvent(event, entry) {
      BoxHitTestEntryL().as(entry);
      super.handleEvent(event, entry);
    }
    debugHandleEvent(event, entry) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugPaintPointersEnabled)) {
          if (PointerDownEventL().is(event)) {
            this[_debugActivePointers] = dart.notNull(this[_debugActivePointers]) + 1;
          } else if (PointerUpEventL().is(event) || PointerCancelEventL().is(event)) {
            this[_debugActivePointers] = dart.notNull(this[_debugActivePointers]) - 1;
          }
          this.markNeedsPaint();
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2356, 12, "() {\r\n      if (debugPaintPointersEnabled) {\r\n        if (event is PointerDownEvent) {\r\n          _debugActivePointers += 1;\r\n        } else if (event is PointerUpEvent || event is PointerCancelEvent) {\r\n          _debugActivePointers -= 1;\r\n        }\r\n        markNeedsPaint();\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugPaint(context, offset) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugPaintSizeEnabled)) this.debugPaintSize(context, offset);
        if (dart.test(debug$.debugPaintBaselinesEnabled)) this.debugPaintBaselines(context, offset);
        if (dart.test(debug$.debugPaintPointersEnabled)) this.debugPaintPointers(context, offset);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2372, 12, "() {\r\n      if (debugPaintSizeEnabled)\r\n        debugPaintSize(context, offset);\r\n      if (debugPaintBaselinesEnabled)\r\n        debugPaintBaselines(context, offset);\r\n      if (debugPaintPointersEnabled)\r\n        debugPaintPointers(context, offset);\r\n      return true;\r\n    }()");
    }
    debugPaintSize(context, offset) {
      if (!dart.test(dart.fn(() => {
        let t8;
        let paint = (t8 = ui.Paint.new(), (() => {
          t8.style = ui.PaintingStyle.stroke;
          t8.strokeWidth = 1.0;
          t8.color = C19 || CT.C19;
          return t8;
        })());
        context.canvas.drawRect(offset['&'](this.size).deflate(0.5), paint);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2388, 12, "() {\r\n      final Paint paint = Paint()\r\n       ..style = PaintingStyle.stroke\r\n       ..strokeWidth = 1.0\r\n       ..color = const Color(0xFF00FFFF);\r\n      context.canvas.drawRect((offset & size).deflate(0.5), paint);\r\n      return true;\r\n    }()");
    }
    debugPaintBaselines(context, offset) {
      if (!dart.test(dart.fn(() => {
        let t8;
        let paint = (t8 = ui.Paint.new(), (() => {
          t8.style = ui.PaintingStyle.stroke;
          t8.strokeWidth = 0.25;
          return t8;
        })());
        let path = null;
        let baselineI = this.getDistanceToBaseline(ui.TextBaseline.ideographic, {onlyReal: true});
        if (baselineI != null) {
          paint.color = C20 || CT.C20;
          path = ui.Path.new();
          path.moveTo(offset.dx, dart.notNull(offset.dy) + dart.notNull(baselineI));
          path.lineTo(dart.notNull(offset.dx) + dart.notNull(this.size.width), dart.notNull(offset.dy) + dart.notNull(baselineI));
          context.canvas.drawPath(path, paint);
        }
        let baselineA = this.getDistanceToBaseline(ui.TextBaseline.alphabetic, {onlyReal: true});
        if (baselineA != null) {
          paint.color = C21 || CT.C21;
          path = ui.Path.new();
          path.moveTo(offset.dx, dart.notNull(offset.dy) + dart.notNull(baselineA));
          path.lineTo(dart.notNull(offset.dx) + dart.notNull(this.size.width), dart.notNull(offset.dy) + dart.notNull(baselineA));
          context.canvas.drawPath(path, paint);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2403, 12, "() {\r\n      final Paint paint = Paint()\r\n       ..style = PaintingStyle.stroke\r\n       ..strokeWidth = 0.25;\r\n      Path path;\r\n      // ideographic baseline\r\n      final double baselineI = getDistanceToBaseline(TextBaseline.ideographic, onlyReal: true);\r\n      if (baselineI != null) {\r\n        paint.color = const Color(0xFFFFD000);\r\n        path = Path();\r\n        path.moveTo(offset.dx, offset.dy + baselineI);\r\n        path.lineTo(offset.dx + size.width, offset.dy + baselineI);\r\n        context.canvas.drawPath(path, paint);\r\n      }\r\n      // alphabetic baseline\r\n      final double baselineA = getDistanceToBaseline(TextBaseline.alphabetic, onlyReal: true);\r\n      if (baselineA != null) {\r\n        paint.color = const Color(0xFF00FF00);\r\n        path = Path();\r\n        path.moveTo(offset.dx, offset.dy + baselineA);\r\n        path.lineTo(offset.dx + size.width, offset.dy + baselineA);\r\n        context.canvas.drawPath(path, paint);\r\n      }\r\n      return true;\r\n    }()");
    }
    debugPaintPointers(context, offset) {
      if (!dart.test(dart.fn(() => {
        let t8;
        if (dart.notNull(this[_debugActivePointers]) > 0) {
          let paint = (t8 = ui.Paint.new(), (() => {
            t8.color = new ui.Color.new((48059 | (67108864 * dart.notNull(this.depth) & 4278190080) >>> 0) >>> 0);
            return t8;
          })());
          context.canvas.drawRect(offset['&'](this.size), paint);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 2439, 12, "() {\r\n      if (_debugActivePointers > 0) {\r\n        final Paint paint = Paint()\r\n         ..color = Color(0x00BBBB | ((0x04000000 * depth) & 0xFF000000));\r\n        context.canvas.drawRect(offset & size, paint);\r\n      }\r\n      return true;\r\n    }()");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfSizeL()).new("size", this[_size$], {missingIfNull: true}));
    }
  };
  (box.RenderBox.new = function() {
    this[_cachedIntrinsicDimensions] = null;
    this[_size$] = null;
    this[_cachedBaselines] = null;
    this[_debugActivePointers] = 0;
    box.RenderBox.__proto__.new.call(this);
    ;
  }).prototype = box.RenderBox.prototype;
  dart.addTypeTests(box.RenderBox);
  dart.addTypeCaches(box.RenderBox);
  dart.setMethodSignature(box.RenderBox, () => ({
    __proto__: dart.getMethods(box.RenderBox.__proto__),
    [_computeIntrinsicDimension]: dart.fnType(dart.legacy(core.double), [dart.legacy(box._IntrinsicDimension), dart.legacy(core.double), dart.legacy(dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]))]),
    getMinIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMinIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getMaxIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getMinIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMinIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getMaxIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    debugAdoptSize: dart.fnType(dart.legacy(ui.Size), [dart.legacy(ui.Size)]),
    getDistanceToBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)], {onlyReal: dart.legacy(core.bool)}, {}),
    getDistanceToActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
    computeDistanceToActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
    debugAssertDoesMeetConstraints: dart.fnType(dart.void, []),
    performResize: dart.fnType(dart.void, []),
    performLayout: dart.fnType(dart.void, []),
    hitTest: dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
    hitTestSelf: dart.fnType(dart.legacy(core.bool), [dart.legacy(ui.Offset)]),
    hitTestChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
    globalToLocal: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset)], {ancestor: dart.legacy(object$.RenderObject)}, {}),
    localToGlobal: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset)], {ancestor: dart.legacy(object$.RenderObject)}, {}),
    debugHandleEvent: dart.fnType(dart.legacy(core.bool), [dart.legacy(events.PointerEvent), dart.legacy(hit_test.HitTestEntry)]),
    debugPaintSize: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
    debugPaintBaselines: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
    debugPaintPointers: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)])
  }));
  dart.setGetterSignature(box.RenderBox, () => ({
    __proto__: dart.getGetters(box.RenderBox.__proto__),
    hasSize: dart.legacy(core.bool),
    size: dart.legacy(ui.Size),
    semanticBounds: dart.legacy(ui.Rect),
    constraints: dart.legacy(box.BoxConstraints),
    paintBounds: dart.legacy(ui.Rect)
  }));
  dart.setSetterSignature(box.RenderBox, () => ({
    __proto__: dart.getSetters(box.RenderBox.__proto__),
    size: dart.legacy(ui.Size)
  }));
  dart.setLibraryUri(box.RenderBox, L7);
  dart.setFieldSignature(box.RenderBox, () => ({
    __proto__: dart.getFields(box.RenderBox.__proto__),
    [_cachedIntrinsicDimensions]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(box._IntrinsicDimensionsCacheEntry), dart.legacy(core.double)))),
    [_size$]: dart.fieldType(dart.legacy(ui.Size)),
    [_cachedBaselines]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(ui.TextBaseline), dart.legacy(core.double)))),
    [_debugActivePointers]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(box.RenderBox, {
    /*box.RenderBox._debugDoingBaseline*/get _debugDoingBaseline() {
      return false;
    },
    set _debugDoingBaseline(_) {}
  }, true);
  var automaticSystemUiAdjustment = dart.privateName(view, "RenderView.automaticSystemUiAdjustment");
  const RenderObject_RenderObjectWithChildMixin$36 = class RenderObject_RenderObjectWithChildMixin extends object$.RenderObject {};
  (RenderObject_RenderObjectWithChildMixin$36.new = function() {
    object$.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox))[dart.mixinNew].call(this);
    RenderObject_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderObject_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderObject_RenderObjectWithChildMixin$36, object$.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox)));
  view.RenderView = class RenderView extends RenderObject_RenderObjectWithChildMixin$36 {
    get automaticSystemUiAdjustment() {
      return this[automaticSystemUiAdjustment];
    }
    set automaticSystemUiAdjustment(value) {
      this[automaticSystemUiAdjustment] = value;
    }
    get size() {
      return this[_size];
    }
    get configuration() {
      return this[_configuration];
    }
    set configuration(value) {
      if (!(value != null)) dart.assertFailed(null, L3, 83, 12, "value != null");
      if (dart.equals(this.configuration, value)) return;
      this[_configuration] = value;
      this.replaceRootLayer(this[_updateMatricesAndCreateNewRootLayer]());
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 88, 12, "_rootTransform != null");
      this.markNeedsLayout();
    }
    scheduleInitialFrame() {
      this.prepareInitialFrame();
      this.owner.requestVisualUpdate();
    }
    prepareInitialFrame() {
      if (!(this.owner != null)) dart.assertFailed(null, L3, 137, 12, "owner != null");
      if (!(this[_rootTransform] == null)) dart.assertFailed(null, L3, 138, 12, "_rootTransform == null");
      this.scheduleInitialLayout();
      this.scheduleInitialPaint(this[_updateMatricesAndCreateNewRootLayer]());
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 141, 12, "_rootTransform != null");
    }
    [_updateMatricesAndCreateNewRootLayer]() {
      this[_rootTransform] = this.configuration.toMatrix();
      let rootLayer = new layer$.TransformLayer.new({transform: this[_rootTransform]});
      rootLayer.attach(this);
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 150, 12, "_rootTransform != null");
      return rootLayer;
    }
    debugAssertDoesMeetConstraints() {
      if (!false) dart.assertFailed(null, L3, 157, 50, "false");
    }
    performResize() {
      if (!false) dart.assertFailed(null, L3, 161, 12, "false");
    }
    performLayout() {
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 166, 12, "_rootTransform != null");
      this[_size] = this.configuration.size;
      if (!dart.test(this[_size].isFinite)) dart.assertFailed(null, L3, 168, 12, "_size.isFinite");
      if (this.child != null) this.child.layout(new box.BoxConstraints.tight(this[_size]));
    }
    rotate(opts) {
      let oldAngle = opts && 'oldAngle' in opts ? opts.oldAngle : null;
      let newAngle = opts && 'newAngle' in opts ? opts.newAngle : null;
      let time = opts && 'time' in opts ? opts.time : null;
      if (!false) dart.assertFailed(null, L3, 176, 12, "false");
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.child != null) this.child.hitTest(new box.BoxHitTestResult.wrap(result), {position: position});
      result.add(new hit_test.HitTestEntry.new(this));
      return true;
    }
    hitTestMouseTrackers(position) {
      let result = new box.BoxHitTestResult.new();
      if (this.child != null) this.child.hitTest(result, {position: position});
      result.add(new hit_test.HitTestEntry.new(this));
      let annotations = LinkedHashMapLOfMouseTrackerAnnotationL$Matrix4L().as(new (LinkedMapOfMouseTrackerAnnotationL$Matrix4L()).new());
      for (let entry of result.path) {
        if (MouseTrackerAnnotationL().is(entry.target)) {
          annotations[$_set](MouseTrackerAnnotationL().as(entry.target), entry.transform);
        }
      }
      return annotations;
    }
    get isRepaintBoundary() {
      return true;
    }
    paint(context, offset) {
      if (this.child != null) context.paintChild(this.child, offset);
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 231, 12, "_rootTransform != null");
      transform.multiply(this[_rootTransform]);
      super.applyPaintTransform(child, transform);
    }
    compositeFrame() {
      developer.Timeline.startSync("Compositing", {arguments: debug.timelineArgumentsIndicatingLandmarkEvent});
      try {
        let builder = ui.SceneBuilder.new();
        let scene = this.layer.buildScene(builder);
        if (dart.test(this.automaticSystemUiAdjustment)) this[_updateSystemChrome]();
        this[_window].render(scene);
        scene.dispose();
        if (!dart.test(dart.fn(() => {
          if (dart.test(debug$.debugRepaintRainbowEnabled) || dart.test(debug$.debugRepaintTextRainbowEnabled)) debug$.debugCurrentRepaintColor = debug$.debugCurrentRepaintColor.withHue((dart.notNull(debug$.debugCurrentRepaintColor.hue) + 2.0)[$modulo](360.0));
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L3, 248, 14, "() {\r\n        if (debugRepaintRainbowEnabled || debugRepaintTextRainbowEnabled)\r\n          debugCurrentRepaintColor = debugCurrentRepaintColor.withHue((debugCurrentRepaintColor.hue + 2.0) % 360.0);\r\n        return true;\r\n      }()");
      } finally {
        developer.Timeline.finishSync();
      }
    }
    [_updateSystemChrome]() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let bounds = this.paintBounds;
      let top = new ui.Offset.new(bounds.center.dx, dart.notNull(this[_window].padding.top) / dart.notNull(this[_window].devicePixelRatio));
      let bottom = new ui.Offset.new(bounds.center.dx, dart.notNull(bounds.center.dy) - dart.notNull(this[_window].padding.bottom) / dart.notNull(this[_window].devicePixelRatio));
      let upperOverlayStyle = this.layer.find(SystemUiOverlayStyleL(), top);
      let lowerOverlayStyle = null;
      switch (platform.defaultTargetPlatform) {
        case C7 || CT.C7:
        {
          lowerOverlayStyle = this.layer.find(SystemUiOverlayStyleL(), bottom);
          break;
        }
        case C8 || CT.C8:
        case C9 || CT.C9:
        case C10 || CT.C10:
        case C11 || CT.C11:
        case C12 || CT.C12:
        {
          break;
        }
      }
      if (upperOverlayStyle != null || lowerOverlayStyle != null) {
        let overlayStyle = new system_chrome.SystemUiOverlayStyle.new({statusBarBrightness: (t0 = upperOverlayStyle, t0 == null ? null : t0.statusBarBrightness), statusBarIconBrightness: (t0$ = upperOverlayStyle, t0$ == null ? null : t0$.statusBarIconBrightness), statusBarColor: (t0$0 = upperOverlayStyle, t0$0 == null ? null : t0$0.statusBarColor), systemNavigationBarColor: (t0$1 = lowerOverlayStyle, t0$1 == null ? null : t0$1.systemNavigationBarColor), systemNavigationBarDividerColor: (t0$2 = lowerOverlayStyle, t0$2 == null ? null : t0$2.systemNavigationBarDividerColor), systemNavigationBarIconBrightness: (t0$3 = lowerOverlayStyle, t0$3 == null ? null : t0$3.systemNavigationBarIconBrightness)});
        system_chrome.SystemChrome.setSystemUIOverlayStyle(overlayStyle);
      }
    }
    get paintBounds() {
      return ui.Offset.zero['&'](this.size['*'](this.configuration.devicePixelRatio));
    }
    get semanticBounds() {
      if (!(this[_rootTransform] != null)) dart.assertFailed(null, L3, 295, 12, "_rootTransform != null");
      return matrix_utils.MatrixUtils.transformRect(this[_rootTransform], ui.Offset.zero['&'](this.size));
    }
    debugFillProperties(properties) {
      if (!dart.test(dart.fn(() => {
        properties.add(diagnostics.DiagnosticsNode.message("debug mode enabled - " + dart.str(true ? "Web" : io.Platform.operatingSystem)));
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L3, 304, 12, "() {\r\n      properties.add(DiagnosticsNode.message('debug mode enabled - ${kIsWeb ? 'Web' :  Platform.operatingSystem}'));\r\n      return true;\r\n    }()");
      properties.add(new (DiagnosticsPropertyOfSizeL()).new("window size", this[_window].physicalSize, {tooltip: "in physical pixels"}));
      properties.add(new diagnostics.DoubleProperty.new("device pixel ratio", this[_window].devicePixelRatio, {tooltip: "physical pixels per logical pixel"}));
      properties.add(new (DiagnosticsPropertyOfViewConfigurationL()).new("configuration", this.configuration, {tooltip: "in logical pixels"}));
      if (dart.test(this[_window].semanticsEnabled)) properties.add(diagnostics.DiagnosticsNode.message("semantics enabled"));
    }
  };
  (view.RenderView.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let configuration = opts && 'configuration' in opts ? opts.configuration : null;
    let window = opts && 'window' in opts ? opts.window : null;
    this[_size] = ui.Size.zero;
    this[automaticSystemUiAdjustment] = true;
    this[_rootTransform] = null;
    if (!(configuration != null)) dart.assertFailed(null, L3, 65, 15, "configuration != null");
    this[_configuration] = configuration;
    this[_window] = window;
    view.RenderView.__proto__.new.call(this);
    this.child = child;
  }).prototype = view.RenderView.prototype;
  dart.addTypeTests(view.RenderView);
  dart.addTypeCaches(view.RenderView);
  dart.setMethodSignature(view.RenderView, () => ({
    __proto__: dart.getMethods(view.RenderView.__proto__),
    scheduleInitialFrame: dart.fnType(dart.void, []),
    prepareInitialFrame: dart.fnType(dart.void, []),
    [_updateMatricesAndCreateNewRootLayer]: dart.fnType(dart.legacy(layer$.TransformLayer), []),
    debugAssertDoesMeetConstraints: dart.fnType(dart.void, []),
    performResize: dart.fnType(dart.void, []),
    performLayout: dart.fnType(dart.void, []),
    hitTest: dart.fnType(dart.legacy(core.bool), [dart.legacy(hit_test.HitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
    hitTestMouseTrackers: dart.fnType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4))), [dart.legacy(ui.Offset)]),
    compositeFrame: dart.fnType(dart.void, []),
    [_updateSystemChrome]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(view.RenderView, () => ({
    __proto__: dart.getGetters(view.RenderView.__proto__),
    size: dart.legacy(ui.Size),
    configuration: dart.legacy(view.ViewConfiguration),
    paintBounds: dart.legacy(ui.Rect),
    semanticBounds: dart.legacy(ui.Rect)
  }));
  dart.setSetterSignature(view.RenderView, () => ({
    __proto__: dart.getSetters(view.RenderView.__proto__),
    configuration: dart.legacy(view.ViewConfiguration)
  }));
  dart.setLibraryUri(view.RenderView, L2);
  dart.setFieldSignature(view.RenderView, () => ({
    __proto__: dart.getFields(view.RenderView.__proto__),
    [_size]: dart.fieldType(dart.legacy(ui.Size)),
    [_configuration]: dart.fieldType(dart.legacy(view.ViewConfiguration)),
    [_window]: dart.finalFieldType(dart.legacy(ui.Window)),
    automaticSystemUiAdjustment: dart.fieldType(dart.legacy(core.bool)),
    [_rootTransform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  var _lastSession = dart.privateName(mouse_cursor, "_lastSession");
  var _handleDeviceUpdateMouseCursor = dart.privateName(mouse_cursor, "_handleDeviceUpdateMouseCursor");
  var _findFirstCursor = dart.privateName(mouse_cursor, "_findFirstCursor");
  var _hasScheduledPostFrameCheck = dart.privateName(mouse_tracking, "_hasScheduledPostFrameCheck");
  var _mouseStates = dart.privateName(mouse_tracking, "_mouseStates");
  var _debugDuringDeviceUpdate = dart.privateName(mouse_tracking, "_debugDuringDeviceUpdate");
  var _router$ = dart.privateName(mouse_tracking, "_router");
  var _handleEvent = dart.privateName(mouse_tracking, "_handleEvent");
  var _updateAllDevices = dart.privateName(mouse_tracking, "_updateAllDevices");
  var _monitorMouseConnection = dart.privateName(mouse_tracking, "_monitorMouseConnection");
  var _deviceUpdatePhase = dart.privateName(mouse_tracking, "_deviceUpdatePhase");
  var _findAnnotations = dart.privateName(mouse_tracking, "_findAnnotations");
  var annotationFinder$ = dart.privateName(mouse_tracking, "BaseMouseTracker.annotationFinder");
  mouse_tracking.BaseMouseTracker = class BaseMouseTracker extends change_notifier.ChangeNotifier {
    get annotationFinder() {
      return this[annotationFinder$];
    }
    set annotationFinder(value) {
      super.annotationFinder = value;
    }
    dispose() {
      super.dispose();
      this[_router$].removeGlobalRoute(dart.bind(this, _handleEvent));
    }
    schedulePostFrameCheck() {
      if (!(binding.SchedulerBinding.instance.schedulerPhase == binding.SchedulerPhase.persistentCallbacks)) dart.assertFailed(null, L9, 353, 12, "SchedulerBinding.instance.schedulerPhase == SchedulerPhase.persistentCallbacks");
      if (!!dart.test(this[_debugDuringDeviceUpdate])) dart.assertFailed(null, L9, 354, 12, "!_debugDuringDeviceUpdate");
      if (!dart.test(this.mouseIsConnected)) return;
      if (!dart.test(this[_hasScheduledPostFrameCheck])) {
        this[_hasScheduledPostFrameCheck] = true;
        binding.SchedulerBinding.instance.addPostFrameCallback(dart.fn(duration => {
          if (!dart.test(this[_hasScheduledPostFrameCheck])) dart.assertFailed(null, L9, 360, 16, "_hasScheduledPostFrameCheck");
          this[_hasScheduledPostFrameCheck] = false;
          this[_updateAllDevices]();
        }, DurationLToNullN()));
      }
    }
    get mouseIsConnected() {
      return this[_mouseStates][$isNotEmpty];
    }
    [_monitorMouseConnection](task) {
      let mouseWasConnected = this.mouseIsConnected;
      task();
      if (!dart.equals(mouseWasConnected, this.mouseIsConnected)) this.notifyListeners();
    }
    [_deviceUpdatePhase](task) {
      if (!!dart.test(this[_debugDuringDeviceUpdate])) dart.assertFailed(null, L9, 392, 12, "!_debugDuringDeviceUpdate");
      if (!dart.test(dart.fn(() => {
        this[_debugDuringDeviceUpdate] = true;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L9, 393, 12, "() {\r\n      _debugDuringDeviceUpdate = true;\r\n      return true;\r\n    }()");
      task();
      if (!dart.test(dart.fn(() => {
        this[_debugDuringDeviceUpdate] = false;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L9, 398, 12, "() {\r\n      _debugDuringDeviceUpdate = false;\r\n      return true;\r\n    }()");
    }
    static _shouldMarkStateDirty(state, event) {
      if (state == null) return true;
      if (!(event != null)) dart.assertFailed(null, L9, 408, 12, "event != null");
      let lastEvent = state.latestEvent;
      if (!(event.device == lastEvent.device)) dart.assertFailed(null, L9, 410, 12, "event.device == lastEvent.device");
      if (!PointerAddedEventL().is(event)[$_equals](PointerRemovedEventL().is(lastEvent))) dart.assertFailed(null, L9, 413, 12, "(event is PointerAddedEvent) == (lastEvent is PointerRemovedEvent)");
      if (PointerSignalEventL().is(event)) return false;
      return PointerAddedEventL().is(lastEvent) || PointerRemovedEventL().is(event) || !dart.equals(lastEvent.position, event.position);
    }
    [_findAnnotations](state) {
      let t8;
      let globalPosition = state.latestEvent.position;
      let device = state.device;
      if (!dart.test(this[_mouseStates][$containsKey](device))) return LinkedHashMapLOfMouseTrackerAnnotationL$Matrix4L().as(new (LinkedMapOfMouseTrackerAnnotationL$Matrix4L()).new());
      t8 = globalPosition;
      return this.annotationFinder(t8);
    }
    handleDeviceUpdate(details) {
      if (!dart.test(this[_debugDuringDeviceUpdate])) dart.assertFailed(null, L9, 460, 12, "_debugDuringDeviceUpdate");
    }
    [_handleEvent](event) {
      if (!dart.equals(event.kind, ui.PointerDeviceKind.mouse)) return;
      if (PointerSignalEventL().is(event)) return;
      let device = event.device;
      let existingState = this[_mouseStates][$_get](device);
      if (!dart.test(mouse_tracking.BaseMouseTracker._shouldMarkStateDirty(existingState, event))) return;
      this[_monitorMouseConnection](dart.fn(() => {
        this[_deviceUpdatePhase](dart.fn(() => {
          let t8;
          if (existingState == null) {
            this[_mouseStates][$_set](device, new mouse_tracking._MouseState.new({initialEvent: event}));
          } else {
            if (!!PointerAddedEventL().is(event)) dart.assertFailed(null, L9, 484, 18, "event is! PointerAddedEvent");
            if (PointerRemovedEventL().is(event)) this[_mouseStates][$remove](event.device);
          }
          let targetState = (t8 = this[_mouseStates][$_get](device), t8 == null ? existingState : t8);
          let lastEvent = targetState.replaceLatestEvent(event);
          let nextAnnotations = this[_findAnnotations](targetState);
          let lastAnnotations = targetState.replaceAnnotations(nextAnnotations);
          this.handleDeviceUpdate(new mouse_tracking.MouseTrackerUpdateDetails.byPointerEvent({lastAnnotations: lastAnnotations, nextAnnotations: nextAnnotations, previousEvent: lastEvent, triggeringEvent: event}));
        }, VoidToNullN()));
      }, VoidToNullN()));
    }
    [_updateAllDevices]() {
      this[_deviceUpdatePhase](dart.fn(() => {
        for (let dirtyState of this[_mouseStates][$values]) {
          let lastEvent = dirtyState.latestEvent;
          let nextAnnotations = this[_findAnnotations](dirtyState);
          let lastAnnotations = dirtyState.replaceAnnotations(nextAnnotations);
          this.handleDeviceUpdate(new mouse_tracking.MouseTrackerUpdateDetails.byNewFrame({lastAnnotations: lastAnnotations, nextAnnotations: nextAnnotations, previousEvent: lastEvent}));
        }
      }, VoidToNullN()));
    }
  };
  (mouse_tracking.BaseMouseTracker.new = function(_router, annotationFinder) {
    this[_hasScheduledPostFrameCheck] = false;
    this[_mouseStates] = new (IdentityMapOfintL$_MouseStateL()).new();
    this[_debugDuringDeviceUpdate] = false;
    this[_router$] = _router;
    this[annotationFinder$] = annotationFinder;
    if (!(_router != null)) dart.assertFailed(null, L9, 315, 16, "_router != null");
    if (!(annotationFinder != null)) dart.assertFailed(null, L9, 316, 16, "annotationFinder != null");
    mouse_tracking.BaseMouseTracker.__proto__.new.call(this);
    this[_router$].addGlobalRoute(dart.bind(this, _handleEvent));
  }).prototype = mouse_tracking.BaseMouseTracker.prototype;
  dart.addTypeTests(mouse_tracking.BaseMouseTracker);
  dart.addTypeCaches(mouse_tracking.BaseMouseTracker);
  dart.setMethodSignature(mouse_tracking.BaseMouseTracker, () => ({
    __proto__: dart.getMethods(mouse_tracking.BaseMouseTracker.__proto__),
    schedulePostFrameCheck: dart.fnType(dart.void, []),
    [_monitorMouseConnection]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
    [_deviceUpdatePhase]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
    [_findAnnotations]: dart.fnType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4))), [dart.legacy(mouse_tracking._MouseState)]),
    handleDeviceUpdate: dart.fnType(dart.void, [dart.legacy(mouse_tracking.MouseTrackerUpdateDetails)]),
    [_handleEvent]: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    [_updateAllDevices]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(mouse_tracking.BaseMouseTracker, () => ({
    __proto__: dart.getGetters(mouse_tracking.BaseMouseTracker.__proto__),
    mouseIsConnected: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(mouse_tracking.BaseMouseTracker, L10);
  dart.setFieldSignature(mouse_tracking.BaseMouseTracker, () => ({
    __proto__: dart.getFields(mouse_tracking.BaseMouseTracker.__proto__),
    annotationFinder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4))), [dart.legacy(ui.Offset)]))),
    [_router$]: dart.finalFieldType(dart.legacy(pointer_router.PointerRouter)),
    [_hasScheduledPostFrameCheck]: dart.fieldType(dart.legacy(core.bool)),
    [_mouseStates]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(mouse_tracking._MouseState)))),
    [_debugDuringDeviceUpdate]: dart.fieldType(dart.legacy(core.bool))
  }));
  mouse_cursor.MouseTrackerCursorMixin = class MouseTrackerCursorMixin extends mouse_tracking.BaseMouseTracker {};
  mouse_cursor.MouseTrackerCursorMixin[dart.mixinOn] = BaseMouseTracker => class MouseTrackerCursorMixin extends BaseMouseTracker {
    debugDeviceActiveCursor(device) {
      let result = null;
      if (!dart.test(dart.fn(() => {
        let t8;
        result = (t8 = this[_lastSession][$_get](device), t8 == null ? null : t8.cursor);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L8, 32, 12, "() {\r\n      result = _lastSession[device]?.cursor;\r\n      return true;\r\n    }()");
      return result;
    }
    handleDeviceUpdate(details) {
      super.handleDeviceUpdate(details);
      this[_handleDeviceUpdateMouseCursor](details);
    }
    [_findFirstCursor](annotations) {
      let t8;
      t8 = mouse_cursor._DeferringMouseCursor.firstNonDeferred(annotations[$map](MouseCursorL(), dart.fn(annotation => annotation.cursor, MouseTrackerAnnotationLToMouseCursorL())));
      return t8 == null ? mouse_cursor.SystemMouseCursors.basic : t8;
    }
    [_handleDeviceUpdateMouseCursor](details) {
      let t8, t8$;
      let device = details.device;
      if (PointerRemovedEventL().is(details.triggeringEvent)) {
        this[_lastSession][$remove](device);
        return;
      }
      let lastSession = this[_lastSession][$_get](device);
      let nextCursor = this[_findFirstCursor](details.nextAnnotations[$keys]);
      if (dart.equals((t8 = lastSession, t8 == null ? null : t8.cursor), nextCursor)) return;
      let nextSession = nextCursor.createSession(device);
      this[_lastSession][$_set](device, nextSession);
      t8$ = lastSession;
      t8$ == null ? null : t8$.dispose();
      nextSession.activate();
    }
  };
  (mouse_cursor.MouseTrackerCursorMixin[dart.mixinNew] = function() {
    this[_lastSession] = new (IdentityMapOfintL$MouseCursorSessionL()).new();
  }).prototype = mouse_cursor.MouseTrackerCursorMixin.prototype;
  dart.addTypeTests(mouse_cursor.MouseTrackerCursorMixin);
  dart.addTypeCaches(mouse_cursor.MouseTrackerCursorMixin);
  mouse_cursor.MouseTrackerCursorMixin[dart.implements] = () => [mouse_tracking.BaseMouseTracker];
  dart.setMethodSignature(mouse_cursor.MouseTrackerCursorMixin, () => ({
    __proto__: dart.getMethods(mouse_cursor.MouseTrackerCursorMixin.__proto__),
    debugDeviceActiveCursor: dart.fnType(dart.legacy(mouse_cursor.MouseCursor), [dart.legacy(core.int)]),
    [_findFirstCursor]: dart.fnType(dart.legacy(mouse_cursor.MouseCursor), [dart.legacy(core.Iterable$(dart.legacy(mouse_tracking.MouseTrackerAnnotation)))]),
    [_handleDeviceUpdateMouseCursor]: dart.fnType(dart.void, [dart.legacy(mouse_tracking.MouseTrackerUpdateDetails)])
  }));
  dart.setLibraryUri(mouse_cursor.MouseTrackerCursorMixin, L11);
  dart.setFieldSignature(mouse_cursor.MouseTrackerCursorMixin, () => ({
    __proto__: dart.getFields(mouse_cursor.MouseTrackerCursorMixin.__proto__),
    [_lastSession]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(mouse_cursor.MouseCursorSession))))
  }));
  var cursor$ = dart.privateName(mouse_cursor, "MouseCursorSession.cursor");
  var device$ = dart.privateName(mouse_cursor, "MouseCursorSession.device");
  mouse_cursor.MouseCursorSession = class MouseCursorSession extends core.Object {
    get cursor() {
      return this[cursor$];
    }
    set cursor(value) {
      super.cursor = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
  };
  (mouse_cursor.MouseCursorSession.new = function(cursor, device) {
    this[cursor$] = cursor;
    this[device$] = device;
    if (!(cursor != null)) dart.assertFailed(null, L8, 106, 14, "cursor != null");
    if (!(device != null)) dart.assertFailed(null, L8, 107, 14, "device != null");
    ;
  }).prototype = mouse_cursor.MouseCursorSession.prototype;
  dart.addTypeTests(mouse_cursor.MouseCursorSession);
  dart.addTypeCaches(mouse_cursor.MouseCursorSession);
  dart.setLibraryUri(mouse_cursor.MouseCursorSession, L11);
  dart.setFieldSignature(mouse_cursor.MouseCursorSession, () => ({
    __proto__: dart.getFields(mouse_cursor.MouseCursorSession.__proto__),
    cursor: dart.finalFieldType(dart.legacy(mouse_cursor.MouseCursor)),
    device: dart.finalFieldType(dart.legacy(core.int))
  }));
  var C22;
  var C23;
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  mouse_cursor.MouseCursor = class MouseCursor extends Object_Diagnosticable$36 {
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C14 || CT.C14;
      let debugDescription = this.debugDescription;
      if (dart.notNull(minLevel.index) >= dart.notNull(diagnostics.DiagnosticLevel.info.index) && debugDescription != null) return debugDescription;
      return super.toString({minLevel: minLevel});
    }
  };
  (mouse_cursor.MouseCursor.new = function() {
    ;
  }).prototype = mouse_cursor.MouseCursor.prototype;
  dart.addTypeTests(mouse_cursor.MouseCursor);
  dart.addTypeCaches(mouse_cursor.MouseCursor);
  dart.setMethodSignature(mouse_cursor.MouseCursor, () => ({
    __proto__: dart.getMethods(mouse_cursor.MouseCursor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), [], {minLevel: dart.legacy(diagnostics.DiagnosticLevel)}, {}),
    [$toString]: dart.fnType(dart.legacy(core.String), [], {minLevel: dart.legacy(diagnostics.DiagnosticLevel)}, {})
  }));
  dart.setLibraryUri(mouse_cursor.MouseCursor, L11);
  dart.defineExtensionMethods(mouse_cursor.MouseCursor, ['toString']);
  dart.defineLazy(mouse_cursor.MouseCursor, {
    /*mouse_cursor.MouseCursor.defer*/get defer() {
      return C22 || CT.C22;
    },
    /*mouse_cursor.MouseCursor.uncontrolled*/get uncontrolled() {
      return C23 || CT.C23;
    }
  }, true);
  mouse_cursor._DeferringMouseCursor = class _DeferringMouseCursor extends mouse_cursor.MouseCursor {
    createSession(device) {
      if (!false) dart.assertFailed("_DeferringMouseCursor can not create a session", L8, 268, 12, "false");
      dart.throw(new core.UnimplementedError.new());
    }
    get debugDescription() {
      return "defer";
    }
    static firstNonDeferred(cursors) {
      for (let cursor of cursors) {
        if (!(cursor != null)) dart.assertFailed(null, L8, 278, 14, "cursor != null");
        if (!dart.equals(cursor, mouse_cursor.MouseCursor.defer)) return cursor;
      }
      return null;
    }
  };
  (mouse_cursor._DeferringMouseCursor.__ = function() {
    mouse_cursor._DeferringMouseCursor.__proto__.new.call(this);
    ;
  }).prototype = mouse_cursor._DeferringMouseCursor.prototype;
  dart.addTypeTests(mouse_cursor._DeferringMouseCursor);
  dart.addTypeCaches(mouse_cursor._DeferringMouseCursor);
  dart.setMethodSignature(mouse_cursor._DeferringMouseCursor, () => ({
    __proto__: dart.getMethods(mouse_cursor._DeferringMouseCursor.__proto__),
    createSession: dart.fnType(dart.legacy(mouse_cursor.MouseCursorSession), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(mouse_cursor._DeferringMouseCursor, () => ({
    __proto__: dart.getGetters(mouse_cursor._DeferringMouseCursor.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(mouse_cursor._DeferringMouseCursor, L11);
  mouse_cursor._NoopMouseCursorSession = class _NoopMouseCursorSession extends mouse_cursor.MouseCursorSession {
    activate() {
      return async.async(dart.void, function* activate() {
      });
    }
    dispose() {
    }
  };
  (mouse_cursor._NoopMouseCursorSession.new = function(cursor, device) {
    mouse_cursor._NoopMouseCursorSession.__proto__.new.call(this, cursor, device);
    ;
  }).prototype = mouse_cursor._NoopMouseCursorSession.prototype;
  dart.addTypeTests(mouse_cursor._NoopMouseCursorSession);
  dart.addTypeCaches(mouse_cursor._NoopMouseCursorSession);
  dart.setMethodSignature(mouse_cursor._NoopMouseCursorSession, () => ({
    __proto__: dart.getMethods(mouse_cursor._NoopMouseCursorSession.__proto__),
    activate: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(mouse_cursor._NoopMouseCursorSession, L11);
  mouse_cursor._NoopMouseCursor = class _NoopMouseCursor extends mouse_cursor.MouseCursor {
    createSession(device) {
      return new mouse_cursor._NoopMouseCursorSession.new(this, device);
    }
    get debugDescription() {
      return "uncontrolled";
    }
  };
  (mouse_cursor._NoopMouseCursor.__ = function() {
    mouse_cursor._NoopMouseCursor.__proto__.new.call(this);
    ;
  }).prototype = mouse_cursor._NoopMouseCursor.prototype;
  dart.addTypeTests(mouse_cursor._NoopMouseCursor);
  dart.addTypeCaches(mouse_cursor._NoopMouseCursor);
  dart.setMethodSignature(mouse_cursor._NoopMouseCursor, () => ({
    __proto__: dart.getMethods(mouse_cursor._NoopMouseCursor.__proto__),
    createSession: dart.fnType(dart.legacy(mouse_cursor._NoopMouseCursorSession), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(mouse_cursor._NoopMouseCursor, () => ({
    __proto__: dart.getGetters(mouse_cursor._NoopMouseCursor.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(mouse_cursor._NoopMouseCursor, L11);
  mouse_cursor._SystemMouseCursorSession = class _SystemMouseCursorSession extends mouse_cursor.MouseCursorSession {
    get cursor() {
      return SystemMouseCursorL().as(super.cursor);
    }
    activate() {
      return system_channels.SystemChannels.mouseCursor.invokeMethod(dart.void, "activateSystemCursor", new (IdentityMapOfStringL$dynamic()).from(["device", this.device, "kind", this.cursor.kind]));
    }
    dispose() {
    }
  };
  (mouse_cursor._SystemMouseCursorSession.new = function(cursor, device) {
    mouse_cursor._SystemMouseCursorSession.__proto__.new.call(this, cursor, device);
    ;
  }).prototype = mouse_cursor._SystemMouseCursorSession.prototype;
  dart.addTypeTests(mouse_cursor._SystemMouseCursorSession);
  dart.addTypeCaches(mouse_cursor._SystemMouseCursorSession);
  dart.setMethodSignature(mouse_cursor._SystemMouseCursorSession, () => ({
    __proto__: dart.getMethods(mouse_cursor._SystemMouseCursorSession.__proto__),
    activate: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(mouse_cursor._SystemMouseCursorSession, () => ({
    __proto__: dart.getGetters(mouse_cursor._SystemMouseCursorSession.__proto__),
    cursor: dart.legacy(mouse_cursor.SystemMouseCursor)
  }));
  dart.setLibraryUri(mouse_cursor._SystemMouseCursorSession, L11);
  var kind$ = dart.privateName(mouse_cursor, "SystemMouseCursor.kind");
  mouse_cursor.SystemMouseCursor = class SystemMouseCursor extends mouse_cursor.MouseCursor {
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get debugDescription() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.kind) + ")";
    }
    createSession(device) {
      return new mouse_cursor._SystemMouseCursorSession.new(this, device);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return SystemMouseCursorL().is(other) && other.kind == this.kind;
    }
    get hashCode() {
      return dart.hashCode(this.kind);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfStringL()).new("kind", this.kind, {level: diagnostics.DiagnosticLevel.debug}));
    }
  };
  (mouse_cursor.SystemMouseCursor.__ = function(opts) {
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[kind$] = kind;
    if (!(kind != null)) dart.assertFailed(null, L8, 374, 15, "kind != null");
    mouse_cursor.SystemMouseCursor.__proto__.new.call(this);
    ;
  }).prototype = mouse_cursor.SystemMouseCursor.prototype;
  dart.addTypeTests(mouse_cursor.SystemMouseCursor);
  dart.addTypeCaches(mouse_cursor.SystemMouseCursor);
  dart.setMethodSignature(mouse_cursor.SystemMouseCursor, () => ({
    __proto__: dart.getMethods(mouse_cursor.SystemMouseCursor.__proto__),
    createSession: dart.fnType(dart.legacy(mouse_cursor._SystemMouseCursorSession), [dart.legacy(core.int)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(mouse_cursor.SystemMouseCursor, () => ({
    __proto__: dart.getGetters(mouse_cursor.SystemMouseCursor.__proto__),
    debugDescription: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mouse_cursor.SystemMouseCursor, L11);
  dart.setFieldSignature(mouse_cursor.SystemMouseCursor, () => ({
    __proto__: dart.getFields(mouse_cursor.SystemMouseCursor.__proto__),
    kind: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mouse_cursor.SystemMouseCursor, ['_equals']);
  dart.defineExtensionAccessors(mouse_cursor.SystemMouseCursor, ['hashCode']);
  var C24;
  var C25;
  var C26;
  var C27;
  var C28;
  var C29;
  var C30;
  var C31;
  var C32;
  var C33;
  var C34;
  var C35;
  var C36;
  var C37;
  var C38;
  var C39;
  var C40;
  var C41;
  var C42;
  var C43;
  var C44;
  var C45;
  var C46;
  var C47;
  var C48;
  var C49;
  var C50;
  var C51;
  var C52;
  var C53;
  var C54;
  var C55;
  var C56;
  var C57;
  var C58;
  var C59;
  mouse_cursor.SystemMouseCursors = class SystemMouseCursors extends core.Object {
    static __() {
      return null;
    }
  };
  (mouse_cursor.SystemMouseCursors[dart.mixinNew] = function() {
  }).prototype = mouse_cursor.SystemMouseCursors.prototype;
  dart.addTypeTests(mouse_cursor.SystemMouseCursors);
  dart.addTypeCaches(mouse_cursor.SystemMouseCursors);
  dart.setLibraryUri(mouse_cursor.SystemMouseCursors, L11);
  dart.defineLazy(mouse_cursor.SystemMouseCursors, {
    /*mouse_cursor.SystemMouseCursors.none*/get none() {
      return C24 || CT.C24;
    },
    /*mouse_cursor.SystemMouseCursors.basic*/get basic() {
      return C25 || CT.C25;
    },
    /*mouse_cursor.SystemMouseCursors.click*/get click() {
      return C26 || CT.C26;
    },
    /*mouse_cursor.SystemMouseCursors.forbidden*/get forbidden() {
      return C27 || CT.C27;
    },
    /*mouse_cursor.SystemMouseCursors.wait*/get wait() {
      return C28 || CT.C28;
    },
    /*mouse_cursor.SystemMouseCursors.progress*/get progress() {
      return C29 || CT.C29;
    },
    /*mouse_cursor.SystemMouseCursors.contextMenu*/get contextMenu() {
      return C30 || CT.C30;
    },
    /*mouse_cursor.SystemMouseCursors.help*/get help() {
      return C31 || CT.C31;
    },
    /*mouse_cursor.SystemMouseCursors.text*/get text() {
      return C32 || CT.C32;
    },
    /*mouse_cursor.SystemMouseCursors.verticalText*/get verticalText() {
      return C33 || CT.C33;
    },
    /*mouse_cursor.SystemMouseCursors.cell*/get cell() {
      return C34 || CT.C34;
    },
    /*mouse_cursor.SystemMouseCursors.precise*/get precise() {
      return C35 || CT.C35;
    },
    /*mouse_cursor.SystemMouseCursors.move*/get move() {
      return C36 || CT.C36;
    },
    /*mouse_cursor.SystemMouseCursors.grab*/get grab() {
      return C37 || CT.C37;
    },
    /*mouse_cursor.SystemMouseCursors.grabbing*/get grabbing() {
      return C38 || CT.C38;
    },
    /*mouse_cursor.SystemMouseCursors.noDrop*/get noDrop() {
      return C39 || CT.C39;
    },
    /*mouse_cursor.SystemMouseCursors.alias*/get alias() {
      return C40 || CT.C40;
    },
    /*mouse_cursor.SystemMouseCursors.copy*/get copy() {
      return C41 || CT.C41;
    },
    /*mouse_cursor.SystemMouseCursors.disappearing*/get disappearing() {
      return C42 || CT.C42;
    },
    /*mouse_cursor.SystemMouseCursors.allScroll*/get allScroll() {
      return C43 || CT.C43;
    },
    /*mouse_cursor.SystemMouseCursors.resizeLeftRight*/get resizeLeftRight() {
      return C44 || CT.C44;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUpDown*/get resizeUpDown() {
      return C45 || CT.C45;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUpLeftDownRight*/get resizeUpLeftDownRight() {
      return C46 || CT.C46;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUpRightDownLeft*/get resizeUpRightDownLeft() {
      return C47 || CT.C47;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUp*/get resizeUp() {
      return C48 || CT.C48;
    },
    /*mouse_cursor.SystemMouseCursors.resizeDown*/get resizeDown() {
      return C49 || CT.C49;
    },
    /*mouse_cursor.SystemMouseCursors.resizeLeft*/get resizeLeft() {
      return C50 || CT.C50;
    },
    /*mouse_cursor.SystemMouseCursors.resizeRight*/get resizeRight() {
      return C51 || CT.C51;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUpLeft*/get resizeUpLeft() {
      return C52 || CT.C52;
    },
    /*mouse_cursor.SystemMouseCursors.resizeUpRight*/get resizeUpRight() {
      return C53 || CT.C53;
    },
    /*mouse_cursor.SystemMouseCursors.resizeDownLeft*/get resizeDownLeft() {
      return C54 || CT.C54;
    },
    /*mouse_cursor.SystemMouseCursors.resizeDownRight*/get resizeDownRight() {
      return C55 || CT.C55;
    },
    /*mouse_cursor.SystemMouseCursors.resizeColumn*/get resizeColumn() {
      return C56 || CT.C56;
    },
    /*mouse_cursor.SystemMouseCursors.resizeRow*/get resizeRow() {
      return C57 || CT.C57;
    },
    /*mouse_cursor.SystemMouseCursors.zoomIn*/get zoomIn() {
      return C58 || CT.C58;
    },
    /*mouse_cursor.SystemMouseCursors.zoomOut*/get zoomOut() {
      return C59 || CT.C59;
    }
  }, true);
  var onEnter$ = dart.privateName(mouse_tracking, "MouseTrackerAnnotation.onEnter");
  var onHover$ = dart.privateName(mouse_tracking, "MouseTrackerAnnotation.onHover");
  var onExit$ = dart.privateName(mouse_tracking, "MouseTrackerAnnotation.onExit");
  var cursor$0 = dart.privateName(mouse_tracking, "MouseTrackerAnnotation.cursor");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  mouse_tracking.MouseTrackerAnnotation = class MouseTrackerAnnotation extends Object_Diagnosticable$36$ {
    get onEnter() {
      return this[onEnter$];
    }
    set onEnter(value) {
      super.onEnter = value;
    }
    get onHover() {
      return this[onHover$];
    }
    set onHover(value) {
      super.onHover = value;
    }
    get onExit() {
      return this[onExit$];
    }
    set onExit(value) {
      super.onExit = value;
    }
    get cursor() {
      return this[cursor$0];
    }
    set cursor(value) {
      super.cursor = value;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (FlagsSummaryOfFunctionL()).new("callbacks", new (IdentityMapOfStringL$FunctionL()).from(["enter", this.onEnter, "hover", this.onHover, "exit", this.onExit]), {ifEmpty: "<none>"}));
      properties.add(new (DiagnosticsPropertyOfMouseCursorL()).new("cursor", this.cursor, {defaultValue: mouse_cursor.MouseCursor.defer}));
    }
  };
  (mouse_tracking.MouseTrackerAnnotation.new = function(opts) {
    let onEnter = opts && 'onEnter' in opts ? opts.onEnter : null;
    let onHover = opts && 'onHover' in opts ? opts.onHover : null;
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let cursor = opts && 'cursor' in opts ? opts.cursor : C22 || CT.C22;
    this[onEnter$] = onEnter;
    this[onHover$] = onHover;
    this[onExit$] = onExit;
    this[cursor$0] = cursor;
    if (!(cursor != null)) dart.assertFailed(null, L9, 62, 15, "cursor != null");
    ;
  }).prototype = mouse_tracking.MouseTrackerAnnotation.prototype;
  dart.addTypeTests(mouse_tracking.MouseTrackerAnnotation);
  dart.addTypeCaches(mouse_tracking.MouseTrackerAnnotation);
  dart.setMethodSignature(mouse_tracking.MouseTrackerAnnotation, () => ({
    __proto__: dart.getMethods(mouse_tracking.MouseTrackerAnnotation.__proto__),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(mouse_tracking.MouseTrackerAnnotation, L10);
  dart.setFieldSignature(mouse_tracking.MouseTrackerAnnotation, () => ({
    __proto__: dart.getFields(mouse_tracking.MouseTrackerAnnotation.__proto__),
    onEnter: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEnterEvent)]))),
    onHover: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerHoverEvent)]))),
    onExit: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerExitEvent)]))),
    cursor: dart.finalFieldType(dart.legacy(mouse_cursor.MouseCursor))
  }));
  var _annotations = dart.privateName(mouse_tracking, "_annotations");
  var _latestEvent = dart.privateName(mouse_tracking, "_latestEvent");
  mouse_tracking._MouseState = class _MouseState extends core.Object {
    get annotations() {
      return this[_annotations];
    }
    replaceAnnotations(value) {
      if (!(value != null)) dart.assertFailed(null, L9, 153, 12, "value != null");
      let previous = this[_annotations];
      this[_annotations] = value;
      return previous;
    }
    get latestEvent() {
      return this[_latestEvent];
    }
    replaceLatestEvent(value) {
      if (!(value != null)) dart.assertFailed(null, L9, 164, 12, "value != null");
      if (!(value.device == this[_latestEvent].device)) dart.assertFailed(null, L9, 165, 12, "value.device == _latestEvent.device");
      let previous = this[_latestEvent];
      this[_latestEvent] = value;
      return previous;
    }
    get device() {
      return this.latestEvent.device;
    }
    toString() {
      function describeEvent(event) {
        return event == null ? "null" : diagnostics.describeIdentity(event);
      }
      dart.fn(describeEvent, PointerEventLToStringL());
      let describeLatestEvent = "latestEvent: " + dart.str(describeEvent(this.latestEvent));
      let describeAnnotations = "annotations: [list of " + dart.str(this.annotations[$length]) + "]";
      return dart.str(diagnostics.describeIdentity(this)) + "(" + describeLatestEvent + ", " + describeAnnotations + ")";
    }
  };
  (mouse_tracking._MouseState.new = function(opts) {
    let initialEvent = opts && 'initialEvent' in opts ? opts.initialEvent : null;
    this[_annotations] = new (LinkedMapOfMouseTrackerAnnotationL$Matrix4L()).new();
    if (!(initialEvent != null)) dart.assertFailed(null, L9, 143, 15, "initialEvent != null");
    this[_latestEvent] = initialEvent;
    ;
  }).prototype = mouse_tracking._MouseState.prototype;
  dart.addTypeTests(mouse_tracking._MouseState);
  dart.addTypeCaches(mouse_tracking._MouseState);
  dart.setMethodSignature(mouse_tracking._MouseState, () => ({
    __proto__: dart.getMethods(mouse_tracking._MouseState.__proto__),
    replaceAnnotations: dart.fnType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4))), [dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4)))]),
    replaceLatestEvent: dart.fnType(dart.legacy(events.PointerEvent), [dart.legacy(events.PointerEvent)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mouse_tracking._MouseState, () => ({
    __proto__: dart.getGetters(mouse_tracking._MouseState.__proto__),
    annotations: dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4))),
    latestEvent: dart.legacy(events.PointerEvent),
    device: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mouse_tracking._MouseState, L10);
  dart.setFieldSignature(mouse_tracking._MouseState, () => ({
    __proto__: dart.getFields(mouse_tracking._MouseState.__proto__),
    [_annotations]: dart.fieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4)))),
    [_latestEvent]: dart.fieldType(dart.legacy(events.PointerEvent))
  }));
  dart.defineExtensionMethods(mouse_tracking._MouseState, ['toString']);
  var lastAnnotations$ = dart.privateName(mouse_tracking, "MouseTrackerUpdateDetails.lastAnnotations");
  var nextAnnotations$ = dart.privateName(mouse_tracking, "MouseTrackerUpdateDetails.nextAnnotations");
  var previousEvent$ = dart.privateName(mouse_tracking, "MouseTrackerUpdateDetails.previousEvent");
  var triggeringEvent$ = dart.privateName(mouse_tracking, "MouseTrackerUpdateDetails.triggeringEvent");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  mouse_tracking.MouseTrackerUpdateDetails = class MouseTrackerUpdateDetails extends Object_Diagnosticable$36$0 {
    get lastAnnotations() {
      return this[lastAnnotations$];
    }
    set lastAnnotations(value) {
      super.lastAnnotations = value;
    }
    get nextAnnotations() {
      return this[nextAnnotations$];
    }
    set nextAnnotations(value) {
      super.nextAnnotations = value;
    }
    get previousEvent() {
      return this[previousEvent$];
    }
    set previousEvent(value) {
      super.previousEvent = value;
    }
    get triggeringEvent() {
      return this[triggeringEvent$];
    }
    set triggeringEvent(value) {
      super.triggeringEvent = value;
    }
    get device() {
      let t8;
      let result = (t8 = this.previousEvent, t8 == null ? this.triggeringEvent : t8).device;
      if (!(result != null)) dart.assertFailed(null, L9, 245, 12, "result != null");
      return result;
    }
    get latestEvent() {
      let t8;
      let result = (t8 = this.triggeringEvent, t8 == null ? this.previousEvent : t8);
      if (!(result != null)) dart.assertFailed(null, L9, 254, 12, "result != null");
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.IntProperty.new("device", this.device));
      properties.add(new (DiagnosticsPropertyOfPointerEventL()).new("previousEvent", this.previousEvent));
      properties.add(new (DiagnosticsPropertyOfPointerEventL()).new("triggeringEvent", this.triggeringEvent));
      properties.add(new (DiagnosticsPropertyOfMapLOfMouseTrackerAnnotationL$Matrix4L()).new("lastAnnotations", this.lastAnnotations));
      properties.add(new (DiagnosticsPropertyOfMapLOfMouseTrackerAnnotationL$Matrix4L()).new("nextAnnotations", this.nextAnnotations));
    }
  };
  (mouse_tracking.MouseTrackerUpdateDetails.byNewFrame = function(opts) {
    let lastAnnotations = opts && 'lastAnnotations' in opts ? opts.lastAnnotations : null;
    let nextAnnotations = opts && 'nextAnnotations' in opts ? opts.nextAnnotations : null;
    let previousEvent = opts && 'previousEvent' in opts ? opts.previousEvent : null;
    this[lastAnnotations$] = lastAnnotations;
    this[nextAnnotations$] = nextAnnotations;
    this[previousEvent$] = previousEvent;
    if (!(previousEvent != null)) dart.assertFailed(null, L9, 199, 15, "previousEvent != null");
    if (!(lastAnnotations != null)) dart.assertFailed(null, L9, 200, 15, "lastAnnotations != null");
    if (!(nextAnnotations != null)) dart.assertFailed(null, L9, 201, 15, "nextAnnotations != null");
    this[triggeringEvent$] = null;
    ;
  }).prototype = mouse_tracking.MouseTrackerUpdateDetails.prototype;
  (mouse_tracking.MouseTrackerUpdateDetails.byPointerEvent = function(opts) {
    let lastAnnotations = opts && 'lastAnnotations' in opts ? opts.lastAnnotations : null;
    let nextAnnotations = opts && 'nextAnnotations' in opts ? opts.nextAnnotations : null;
    let previousEvent = opts && 'previousEvent' in opts ? opts.previousEvent : null;
    let triggeringEvent = opts && 'triggeringEvent' in opts ? opts.triggeringEvent : null;
    this[lastAnnotations$] = lastAnnotations;
    this[nextAnnotations$] = nextAnnotations;
    this[previousEvent$] = previousEvent;
    this[triggeringEvent$] = triggeringEvent;
    if (!(triggeringEvent != null)) dart.assertFailed(null, L9, 213, 15, "triggeringEvent != null");
    if (!(lastAnnotations != null)) dart.assertFailed(null, L9, 214, 15, "lastAnnotations != null");
    if (!(nextAnnotations != null)) dart.assertFailed(null, L9, 215, 15, "nextAnnotations != null");
    ;
  }).prototype = mouse_tracking.MouseTrackerUpdateDetails.prototype;
  dart.addTypeTests(mouse_tracking.MouseTrackerUpdateDetails);
  dart.addTypeCaches(mouse_tracking.MouseTrackerUpdateDetails);
  dart.setMethodSignature(mouse_tracking.MouseTrackerUpdateDetails, () => ({
    __proto__: dart.getMethods(mouse_tracking.MouseTrackerUpdateDetails.__proto__),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(mouse_tracking.MouseTrackerUpdateDetails, () => ({
    __proto__: dart.getGetters(mouse_tracking.MouseTrackerUpdateDetails.__proto__),
    device: dart.legacy(core.int),
    latestEvent: dart.legacy(events.PointerEvent)
  }));
  dart.setLibraryUri(mouse_tracking.MouseTrackerUpdateDetails, L10);
  dart.setFieldSignature(mouse_tracking.MouseTrackerUpdateDetails, () => ({
    __proto__: dart.getFields(mouse_tracking.MouseTrackerUpdateDetails.__proto__),
    lastAnnotations: dart.finalFieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4)))),
    nextAnnotations: dart.finalFieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(mouse_tracking.MouseTrackerAnnotation), dart.legacy(vector_math_64.Matrix4)))),
    previousEvent: dart.finalFieldType(dart.legacy(events.PointerEvent)),
    triggeringEvent: dart.finalFieldType(dart.legacy(events.PointerEvent))
  }));
  mouse_tracking._MouseTrackerEventMixin = class _MouseTrackerEventMixin extends mouse_tracking.BaseMouseTracker {
    static _handleDeviceUpdateMouseEvents(details) {
      let t9, t8, t9$, t8$;
      let previousEvent = details.previousEvent;
      let triggeringEvent = details.triggeringEvent;
      let latestEvent = details.latestEvent;
      let lastAnnotations = details.lastAnnotations;
      let nextAnnotations = details.nextAnnotations;
      let baseExitEvent = new events.PointerExitEvent.fromMouseEvent(latestEvent);
      lastAnnotations[$forEach](dart.fn((annotation, transform) => {
        let t9, t8;
        if (!dart.test(nextAnnotations[$containsKey](annotation))) if (annotation.onExit != null) {
          t8 = annotation;
          t9 = baseExitEvent.transformed(lastAnnotations[$_get](annotation));
          t8.onExit(t9);
        }
      }, MouseTrackerAnnotationLAndMatrix4LToNullN()));
      let enteringAnnotations = nextAnnotations[$keys][$where](dart.fn(annotation => !dart.test(lastAnnotations[$containsKey](annotation)), MouseTrackerAnnotationLToboolL()))[$toList]();
      let baseEnterEvent = new events.PointerEnterEvent.fromMouseEvent(latestEvent);
      for (let annotation of enteringAnnotations[$reversed]) {
        if (annotation.onEnter != null) {
          t8 = annotation;
          t9 = baseEnterEvent.transformed(nextAnnotations[$_get](annotation));
          t8.onEnter(t9);
        }
      }
      if (PointerHoverEventL().is(triggeringEvent)) {
        let hoverPositionBeforeUpdate = PointerHoverEventL().is(previousEvent) ? previousEvent.position : null;
        let pointerHasMoved = hoverPositionBeforeUpdate == null || !dart.equals(hoverPositionBeforeUpdate, triggeringEvent.position);
        let hoveringAnnotations = pointerHasMoved ? nextAnnotations[$keys][$toList]()[$reversed] : enteringAnnotations;
        for (let annotation of hoveringAnnotations) {
          if (annotation.onHover != null) {
            t8$ = annotation;
            t9$ = triggeringEvent.transformed(nextAnnotations[$_get](annotation));
            t8$.onHover(t9$);
          }
        }
      }
    }
  };
  mouse_tracking._MouseTrackerEventMixin[dart.mixinOn] = BaseMouseTracker => class _MouseTrackerEventMixin extends BaseMouseTracker {
    handleDeviceUpdate(details) {
      super.handleDeviceUpdate(details);
      mouse_tracking._MouseTrackerEventMixin._handleDeviceUpdateMouseEvents(details);
    }
  };
  dart.addTypeTests(mouse_tracking._MouseTrackerEventMixin);
  dart.addTypeCaches(mouse_tracking._MouseTrackerEventMixin);
  mouse_tracking._MouseTrackerEventMixin[dart.implements] = () => [mouse_tracking.BaseMouseTracker];
  dart.setLibraryUri(mouse_tracking._MouseTrackerEventMixin, L10);
  const BaseMouseTracker_MouseTrackerCursorMixin$36 = class BaseMouseTracker_MouseTrackerCursorMixin extends mouse_tracking.BaseMouseTracker {};
  (BaseMouseTracker_MouseTrackerCursorMixin$36.new = function(_router, annotationFinder) {
    mouse_cursor.MouseTrackerCursorMixin[dart.mixinNew].call(this);
    BaseMouseTracker_MouseTrackerCursorMixin$36.__proto__.new.call(this, _router, annotationFinder);
  }).prototype = BaseMouseTracker_MouseTrackerCursorMixin$36.prototype;
  dart.applyMixin(BaseMouseTracker_MouseTrackerCursorMixin$36, mouse_cursor.MouseTrackerCursorMixin);
  const BaseMouseTracker__MouseTrackerEventMixin$36 = class BaseMouseTracker__MouseTrackerEventMixin extends BaseMouseTracker_MouseTrackerCursorMixin$36 {};
  (BaseMouseTracker__MouseTrackerEventMixin$36.new = function(_router, annotationFinder) {
    BaseMouseTracker__MouseTrackerEventMixin$36.__proto__.new.call(this, _router, annotationFinder);
  }).prototype = BaseMouseTracker__MouseTrackerEventMixin$36.prototype;
  dart.applyMixin(BaseMouseTracker__MouseTrackerEventMixin$36, mouse_tracking._MouseTrackerEventMixin);
  mouse_tracking.MouseTracker = class MouseTracker extends BaseMouseTracker__MouseTrackerEventMixin$36 {};
  (mouse_tracking.MouseTracker.new = function(router, annotationFinder) {
    mouse_tracking.MouseTracker.__proto__.new.call(this, router, annotationFinder);
    ;
  }).prototype = mouse_tracking.MouseTracker.prototype;
  dart.addTypeTests(mouse_tracking.MouseTracker);
  dart.addTypeCaches(mouse_tracking.MouseTracker);
  dart.setLibraryUri(mouse_tracking.MouseTracker, L10);
  var _mouseTracker = dart.privateName(binding$4, "_mouseTracker");
  var _pipelineOwner = dart.privateName(binding$4, "_pipelineOwner");
  var _semanticsHandle = dart.privateName(binding$4, "_semanticsHandle");
  var _firstFrameDeferredCount = dart.privateName(binding$4, "_firstFrameDeferredCount");
  var _firstFrameSent = dart.privateName(binding$4, "_firstFrameSent");
  var _handleSemanticsOwnerCreated = dart.privateName(binding$4, "_handleSemanticsOwnerCreated");
  var _handleSemanticsOwnerDisposed = dart.privateName(binding$4, "_handleSemanticsOwnerDisposed");
  var _handleSemanticsEnabledChanged = dart.privateName(binding$4, "_handleSemanticsEnabledChanged");
  var _handleSemanticsAction = dart.privateName(binding$4, "_handleSemanticsAction");
  var _handlePersistentFrameCallback = dart.privateName(binding$4, "_handlePersistentFrameCallback");
  var _forceRepaint = dart.privateName(binding$4, "_forceRepaint");
  var C60;
  const performReassemble = Symbol("performReassemble");
  binding$4.RendererBinding = class RendererBinding extends core.Object {
    static get instance() {
      return binding$4.RendererBinding._instance;
    }
  };
  binding$4.RendererBinding[dart.mixinOn] = _RendererBinding$36BindingBase$36ServicesBinding$36SchedulerBinding$36GestureBinding$36SemanticsBinding$36HitTestable => class RendererBinding extends _RendererBinding$36BindingBase$36ServicesBinding$36SchedulerBinding$36GestureBinding$36SemanticsBinding$36HitTestable {
    initInstances() {
      let t8;
      super.initInstances();
      binding$4.RendererBinding._instance = this;
      this[_pipelineOwner] = new object$.PipelineOwner.new({onNeedVisualUpdate: dart.bind(this, 'ensureVisualUpdate'), onSemanticsOwnerCreated: dart.bind(this, _handleSemanticsOwnerCreated), onSemanticsOwnerDisposed: dart.bind(this, _handleSemanticsOwnerDisposed)});
      t8 = this.window;
      (() => {
        t8.onMetricsChanged = dart.bind(this, 'handleMetricsChanged');
        t8.onTextScaleFactorChanged = dart.bind(this, 'handleTextScaleFactorChanged');
        t8.onPlatformBrightnessChanged = dart.bind(this, 'handlePlatformBrightnessChanged');
        t8.onSemanticsEnabledChanged = dart.bind(this, _handleSemanticsEnabledChanged);
        t8.onSemanticsAction = dart.bind(this, _handleSemanticsAction);
        return t8;
      })();
      this.initRenderView();
      this[_handleSemanticsEnabledChanged]();
      if (!(this.renderView != null)) dart.assertFailed(null, L12, 47, 12, "renderView != null");
      this.addPersistentFrameCallback(dart.bind(this, _handlePersistentFrameCallback));
      this.initMouseTracker();
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      if (!dart.test(dart.fn(() => {
        this.registerBoolServiceExtension({name: "debugPaint", getter: dart.fn(() => async.async(boolL(), function*() {
            return debug$.debugPaintSizeEnabled;
          }), VoidToFutureLOfboolL()), setter: dart.fn(value => {
            if (dart.equals(debug$.debugPaintSizeEnabled, value)) return FutureOfvoid().value();
            debug$.debugPaintSizeEnabled = value;
            return this[_forceRepaint]();
          }, boolLToFutureLOfvoid())});
        this.registerBoolServiceExtension({name: "debugPaintBaselinesEnabled", getter: dart.fn(() => async.async(boolL(), function*() {
            return debug$.debugPaintBaselinesEnabled;
          }), VoidToFutureLOfboolL()), setter: dart.fn(value => {
            if (dart.equals(debug$.debugPaintBaselinesEnabled, value)) return FutureOfvoid().value();
            debug$.debugPaintBaselinesEnabled = value;
            return this[_forceRepaint]();
          }, boolLToFutureLOfvoid())});
        this.registerBoolServiceExtension({name: "repaintRainbow", getter: dart.fn(() => async.async(boolL(), function*() {
            return debug$.debugRepaintRainbowEnabled;
          }), VoidToFutureLOfboolL()), setter: dart.fn(value => {
            let repaint = dart.test(debug$.debugRepaintRainbowEnabled) && !dart.test(value);
            debug$.debugRepaintRainbowEnabled = value;
            if (repaint) return this[_forceRepaint]();
            return FutureOfvoid().value();
          }, boolLToFutureLOfvoid())});
        this.registerBoolServiceExtension({name: "debugCheckElevationsEnabled", getter: dart.fn(() => async.async(boolL(), function*() {
            return debug$.debugCheckElevationsEnabled;
          }), VoidToFutureLOfboolL()), setter: dart.fn(value => {
            if (dart.equals(debug$.debugCheckElevationsEnabled, value)) {
              return FutureOfvoid().value();
            }
            debug$.debugCheckElevationsEnabled = value;
            return this[_forceRepaint]();
          }, boolLToFutureLOfvoid())});
        this.registerSignalServiceExtension({name: "debugDumpLayerTree", callback: dart.fn(() => {
            binding$4.debugDumpLayerTree();
            return print.debugPrintDone;
          }, VoidToFutureLOfvoid())});
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L12, 60, 12, "() {\r\n      // these service extensions only work in debug mode\r\n      registerBoolServiceExtension(\r\n        name: 'debugPaint',\r\n        getter: () async => debugPaintSizeEnabled,\r\n        setter: (bool value) {\r\n          if (debugPaintSizeEnabled == value)\r\n            return Future<void>.value();\r\n          debugPaintSizeEnabled = value;\r\n          return _forceRepaint();\r\n        },\r\n      );\r\n      registerBoolServiceExtension(\r\n        name: 'debugPaintBaselinesEnabled',\r\n        getter: () async => debugPaintBaselinesEnabled,\r\n        setter: (bool value) {\r\n          if (debugPaintBaselinesEnabled == value)\r\n            return Future<void>.value();\r\n          debugPaintBaselinesEnabled = value;\r\n          return _forceRepaint();\r\n        },\r\n      );\r\n      registerBoolServiceExtension(\r\n        name: 'repaintRainbow',\r\n        getter: () async => debugRepaintRainbowEnabled,\r\n        setter: (bool value) {\r\n          final bool repaint = debugRepaintRainbowEnabled && !value;\r\n          debugRepaintRainbowEnabled = value;\r\n          if (repaint)\r\n            return _forceRepaint();\r\n          return Future<void>.value();\r\n        },\r\n      );\r\n      registerBoolServiceExtension(\r\n        name: 'debugCheckElevationsEnabled',\r\n        getter: () async => debugCheckElevationsEnabled,\r\n        setter: (bool value) {\r\n          if (debugCheckElevationsEnabled == value) {\r\n            return Future<void>.value();\r\n          }\r\n          debugCheckElevationsEnabled = value;\r\n          return _forceRepaint();\r\n        },\r\n      );\r\n      registerSignalServiceExtension(\r\n        name: 'debugDumpLayerTree',\r\n        callback: () {\r\n          debugDumpLayerTree();\r\n          return debugPrintDone;\r\n        },\r\n      );\r\n      return true;\r\n    }()");
      if (!false) {
        this.registerSignalServiceExtension({name: "debugDumpRenderTree", callback: dart.fn(() => {
            binding$4.debugDumpRenderTree();
            return print.debugPrintDone;
          }, VoidToFutureLOfvoid())});
        this.registerSignalServiceExtension({name: "debugDumpSemanticsTreeInTraversalOrder", callback: dart.fn(() => {
            binding$4.debugDumpSemanticsTree(semantics.DebugSemanticsDumpOrder.traversalOrder);
            return print.debugPrintDone;
          }, VoidToFutureLOfvoid())});
        this.registerSignalServiceExtension({name: "debugDumpSemanticsTreeInInverseHitTestOrder", callback: dart.fn(() => {
            binding$4.debugDumpSemanticsTree(semantics.DebugSemanticsDumpOrder.inverseHitTest);
            return print.debugPrintDone;
          }, VoidToFutureLOfvoid())});
      }
    }
    initRenderView() {
      if (!(this.renderView == null)) dart.assertFailed(null, L12, 148, 12, "renderView == null");
      this.renderView = new view.RenderView.new({configuration: this.createViewConfiguration(), window: this.window});
      this.renderView.prepareInitialFrame();
    }
    get mouseTracker() {
      return this[_mouseTracker];
    }
    get pipelineOwner() {
      return this[_pipelineOwner];
    }
    get renderView() {
      return RenderViewL().as(this[_pipelineOwner].rootNode);
    }
    set renderView(value) {
      if (!(value != null)) dart.assertFailed(null, L12, 168, 12, "value != null");
      this[_pipelineOwner].rootNode = value;
    }
    handleMetricsChanged() {
      if (!(this.renderView != null)) dart.assertFailed(null, L12, 177, 12, "renderView != null");
      this.renderView.configuration = this.createViewConfiguration();
      this.scheduleForcedFrame();
    }
    handleTextScaleFactorChanged() {
    }
    handlePlatformBrightnessChanged() {
    }
    createViewConfiguration() {
      let devicePixelRatio = this.window.devicePixelRatio;
      return new view.ViewConfiguration.new({size: this.window.physicalSize['/'](devicePixelRatio), devicePixelRatio: devicePixelRatio});
    }
    initMouseTracker(tracker = null) {
      let t8, t8$;
      t8 = this[_mouseTracker];
      t8 == null ? null : t8.dispose();
      this[_mouseTracker] = (t8$ = tracker, t8$ == null ? new mouse_tracking.MouseTracker.new(this.pointerRouter, dart.bind(this.renderView, 'hitTestMouseTrackers')) : t8$);
    }
    [_handleSemanticsEnabledChanged]() {
      this.setSemanticsEnabled(this.window.semanticsEnabled);
    }
    setSemanticsEnabled(enabled) {
      let t8;
      if (dart.test(enabled)) {
        this[_semanticsHandle] == null ? this[_semanticsHandle] = this[_pipelineOwner].ensureSemantics() : null;
      } else {
        t8 = this[_semanticsHandle];
        t8 == null ? null : t8.dispose();
        this[_semanticsHandle] = null;
      }
    }
    [_handleSemanticsAction](id, action, args) {
      let t8;
      t8 = this[_pipelineOwner].semanticsOwner;
      t8 == null ? null : t8.performAction(id, action, args != null ? (C60 || CT.C60).decodeMessage(args) : null);
    }
    [_handleSemanticsOwnerCreated]() {
      this.renderView.scheduleInitialSemantics();
    }
    [_handleSemanticsOwnerDisposed]() {
      this.renderView.clearSemantics();
    }
    [_handlePersistentFrameCallback](timeStamp) {
      this.drawFrame();
      this[_mouseTracker].schedulePostFrameCheck();
    }
    get sendFramesToEngine() {
      return dart.test(this[_firstFrameSent]) || this[_firstFrameDeferredCount] === 0;
    }
    deferFirstFrame() {
      if (!(dart.notNull(this[_firstFrameDeferredCount]) >= 0)) dart.assertFailed(null, L12, 315, 12, "_firstFrameDeferredCount >= 0");
      this[_firstFrameDeferredCount] = dart.notNull(this[_firstFrameDeferredCount]) + 1;
    }
    allowFirstFrame() {
      if (!(dart.notNull(this[_firstFrameDeferredCount]) > 0)) dart.assertFailed(null, L12, 328, 12, "_firstFrameDeferredCount > 0");
      this[_firstFrameDeferredCount] = dart.notNull(this[_firstFrameDeferredCount]) - 1;
      if (!dart.test(this[_firstFrameSent])) this.scheduleWarmUpFrame();
    }
    resetFirstFrameSent() {
      this[_firstFrameSent] = false;
    }
    drawFrame() {
      if (!(this.renderView != null)) dart.assertFailed(null, L12, 403, 12, "renderView != null");
      this.pipelineOwner.flushLayout();
      this.pipelineOwner.flushCompositingBits();
      this.pipelineOwner.flushPaint();
      if (dart.test(this.sendFramesToEngine)) {
        this.renderView.compositeFrame();
        this.pipelineOwner.flushSemantics();
        this[_firstFrameSent] = true;
      }
    }
    performReassemble() {
      return async.async(dart.void, (function* performReassemble$() {
        yield this[performReassemble]();
        developer.Timeline.startSync("Dirty Render Tree", {arguments: debug.timelineArgumentsIndicatingLandmarkEvent});
        try {
          this.renderView.reassemble();
        } finally {
          developer.Timeline.finishSync();
        }
        this.scheduleWarmUpFrame();
        yield this.endOfFrame;
      }).bind(this));
    }
    hitTest(result, position) {
      if (!(this.renderView != null)) dart.assertFailed(null, L12, 429, 12, "renderView != null");
      this.renderView.hitTest(result, {position: position});
      super.hitTest(result, position);
    }
    [_forceRepaint]() {
      let t8, t8$;
      let visitor = null;
      visitor = dart.fn(child => {
        child.markNeedsPaint();
        child.visitChildren(visitor);
      }, RenderObjectLToNullN());
      t8$ = (t8 = binding$4.RendererBinding.instance, t8 == null ? null : t8.renderView);
      t8$ == null ? null : t8$.visitChildren(visitor);
      return this.endOfFrame;
    }
    [performReassemble]() {
      return super.performReassemble();
    }
  };
  (binding$4.RendererBinding[dart.mixinNew] = function() {
    this[_mouseTracker] = null;
    this[_pipelineOwner] = null;
    this[_semanticsHandle] = null;
    this[_firstFrameDeferredCount] = 0;
    this[_firstFrameSent] = false;
  }).prototype = binding$4.RendererBinding.prototype;
  dart.addTypeTests(binding$4.RendererBinding);
  dart.addTypeCaches(binding$4.RendererBinding);
  binding$4.RendererBinding[dart.implements] = () => [hit_test.HitTestable, binding$0.SemanticsBinding, binding$1.GestureBinding, binding.SchedulerBinding, binding$.ServicesBinding, binding$2.BindingBase];
  dart.setMethodSignature(binding$4.RendererBinding, () => ({
    __proto__: dart.getMethods(binding$4.RendererBinding.__proto__),
    initInstances: dart.fnType(dart.void, []),
    initServiceExtensions: dart.fnType(dart.void, []),
    initRenderView: dart.fnType(dart.void, []),
    handleMetricsChanged: dart.fnType(dart.void, []),
    handleTextScaleFactorChanged: dart.fnType(dart.void, []),
    handlePlatformBrightnessChanged: dart.fnType(dart.void, []),
    createViewConfiguration: dart.fnType(dart.legacy(view.ViewConfiguration), []),
    initMouseTracker: dart.fnType(dart.void, [], [dart.legacy(mouse_tracking.MouseTracker)]),
    [_handleSemanticsEnabledChanged]: dart.fnType(dart.void, []),
    setSemanticsEnabled: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_handleSemanticsAction]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(ui.SemanticsAction), dart.legacy(typed_data.ByteData)]),
    [_handleSemanticsOwnerCreated]: dart.fnType(dart.void, []),
    [_handleSemanticsOwnerDisposed]: dart.fnType(dart.void, []),
    [_handlePersistentFrameCallback]: dart.fnType(dart.void, [dart.legacy(core.Duration)]),
    deferFirstFrame: dart.fnType(dart.void, []),
    allowFirstFrame: dart.fnType(dart.void, []),
    resetFirstFrameSent: dart.fnType(dart.void, []),
    drawFrame: dart.fnType(dart.void, []),
    performReassemble: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    hitTest: dart.fnType(dart.void, [dart.legacy(hit_test.HitTestResult), dart.legacy(ui.Offset)]),
    [_forceRepaint]: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setGetterSignature(binding$4.RendererBinding, () => ({
    __proto__: dart.getGetters(binding$4.RendererBinding.__proto__),
    mouseTracker: dart.legacy(mouse_tracking.MouseTracker),
    pipelineOwner: dart.legacy(object$.PipelineOwner),
    renderView: dart.legacy(view.RenderView),
    sendFramesToEngine: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(binding$4.RendererBinding, () => ({
    __proto__: dart.getSetters(binding$4.RendererBinding.__proto__),
    renderView: dart.legacy(view.RenderView)
  }));
  dart.setLibraryUri(binding$4.RendererBinding, L13);
  dart.setFieldSignature(binding$4.RendererBinding, () => ({
    __proto__: dart.getFields(binding$4.RendererBinding.__proto__),
    [_mouseTracker]: dart.fieldType(dart.legacy(mouse_tracking.MouseTracker)),
    [_pipelineOwner]: dart.fieldType(dart.legacy(object$.PipelineOwner)),
    [_semanticsHandle]: dart.fieldType(dart.legacy(object$.SemanticsHandle)),
    [_firstFrameDeferredCount]: dart.fieldType(dart.legacy(core.int)),
    [_firstFrameSent]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(binding$4.RendererBinding, {
    /*binding$4.RendererBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  const BindingBase_GestureBinding$36 = class BindingBase_GestureBinding extends binding$2.BindingBase {};
  (BindingBase_GestureBinding$36.new = function() {
    binding$1.GestureBinding[dart.mixinNew].call(this);
    BindingBase_GestureBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_GestureBinding$36.prototype;
  dart.applyMixin(BindingBase_GestureBinding$36, binding$1.GestureBinding);
  const BindingBase_SchedulerBinding$36 = class BindingBase_SchedulerBinding extends BindingBase_GestureBinding$36 {};
  (BindingBase_SchedulerBinding$36.new = function() {
    binding.SchedulerBinding[dart.mixinNew].call(this);
    BindingBase_SchedulerBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_SchedulerBinding$36.prototype;
  dart.applyMixin(BindingBase_SchedulerBinding$36, binding.SchedulerBinding);
  const BindingBase_ServicesBinding$36 = class BindingBase_ServicesBinding extends BindingBase_SchedulerBinding$36 {};
  (BindingBase_ServicesBinding$36.new = function() {
    binding$.ServicesBinding[dart.mixinNew].call(this);
    BindingBase_ServicesBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_ServicesBinding$36.prototype;
  dart.applyMixin(BindingBase_ServicesBinding$36, binding$.ServicesBinding);
  const BindingBase_SemanticsBinding$36 = class BindingBase_SemanticsBinding extends BindingBase_ServicesBinding$36 {};
  (BindingBase_SemanticsBinding$36.new = function() {
    binding$0.SemanticsBinding[dart.mixinNew].call(this);
    BindingBase_SemanticsBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_SemanticsBinding$36.prototype;
  dart.applyMixin(BindingBase_SemanticsBinding$36, binding$0.SemanticsBinding);
  const BindingBase_PaintingBinding$36 = class BindingBase_PaintingBinding extends BindingBase_SemanticsBinding$36 {};
  (BindingBase_PaintingBinding$36.new = function() {
    binding$3.PaintingBinding[dart.mixinNew].call(this);
    BindingBase_PaintingBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_PaintingBinding$36.prototype;
  dart.applyMixin(BindingBase_PaintingBinding$36, binding$3.PaintingBinding);
  const BindingBase_RendererBinding$36 = class BindingBase_RendererBinding extends BindingBase_PaintingBinding$36 {};
  (BindingBase_RendererBinding$36.new = function() {
    binding$4.RendererBinding[dart.mixinNew].call(this);
    BindingBase_RendererBinding$36.__proto__.new.call(this);
  }).prototype = BindingBase_RendererBinding$36.prototype;
  dart.applyMixin(BindingBase_RendererBinding$36, binding$4.RendererBinding);
  binding$4.RenderingFlutterBinding = class RenderingFlutterBinding extends BindingBase_RendererBinding$36 {};
  (binding$4.RenderingFlutterBinding.new = function(opts) {
    let root = opts && 'root' in opts ? opts.root : null;
    binding$4.RenderingFlutterBinding.__proto__.new.call(this);
    if (!(this.renderView != null)) dart.assertFailed(null, L12, 478, 12, "renderView != null");
    this.renderView.child = root;
  }).prototype = binding$4.RenderingFlutterBinding.prototype;
  dart.addTypeTests(binding$4.RenderingFlutterBinding);
  dart.addTypeCaches(binding$4.RenderingFlutterBinding);
  dart.setLibraryUri(binding$4.RenderingFlutterBinding, L13);
  binding$4.debugDumpRenderTree = function debugDumpRenderTree() {
    let t8, t8$, t8$0;
    print.debugPrint((t8$0 = (t8$ = (t8 = binding$4.RendererBinding.instance, t8 == null ? null : t8.renderView), t8$ == null ? null : t8$.toStringDeep()), t8$0 == null ? "Render tree unavailable." : t8$0));
  };
  binding$4.debugDumpLayerTree = function debugDumpLayerTree() {
    let t8, t8$, t8$0, t8$1;
    print.debugPrint((t8$1 = (t8$0 = (t8$ = (t8 = binding$4.RendererBinding.instance, t8 == null ? null : t8.renderView), t8$ == null ? null : t8$.debugLayer), t8$0 == null ? null : t8$0.toStringDeep()), t8$1 == null ? "Layer tree unavailable." : t8$1));
  };
  binding$4.debugDumpSemanticsTree = function debugDumpSemanticsTree(childOrder) {
    let t8, t8$, t8$0, t8$1;
    print.debugPrint((t8$1 = (t8$0 = (t8$ = (t8 = binding$4.RendererBinding.instance, t8 == null ? null : t8.renderView), t8$ == null ? null : t8$.debugSemantics), t8$0 == null ? null : t8$0.toStringDeep({childOrder: childOrder})), t8$1 == null ? "Semantics not collected." : t8$1));
  };
  object$.ParentData = class ParentData extends core.Object {
    detach() {
    }
    toString() {
      return "<none>";
    }
  };
  (object$.ParentData.new = function() {
    ;
  }).prototype = object$.ParentData.prototype;
  dart.addTypeTests(object$.ParentData);
  dart.addTypeCaches(object$.ParentData);
  dart.setMethodSignature(object$.ParentData, () => ({
    __proto__: dart.getMethods(object$.ParentData.__proto__),
    detach: dart.fnType(dart.void, []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(object$.ParentData, L5);
  dart.defineExtensionMethods(object$.ParentData, ['toString']);
  var _currentLayer = dart.privateName(object$, "_currentLayer");
  var _recorder = dart.privateName(object$, "_recorder");
  var _canvas = dart.privateName(object$, "_canvas");
  var _containerLayer$ = dart.privateName(object$, "_containerLayer");
  var _compositeChild = dart.privateName(object$, "_compositeChild");
  var _isRecording = dart.privateName(object$, "_isRecording");
  var _startRecording = dart.privateName(object$, "_startRecording");
  var C61;
  var estimatedBounds$ = dart.privateName(object$, "PaintingContext.estimatedBounds");
  object$.PaintingContext = class PaintingContext extends clip.ClipContext {
    get estimatedBounds() {
      return this[estimatedBounds$];
    }
    set estimatedBounds(value) {
      super.estimatedBounds = value;
    }
    static repaintCompositedChild(child, opts) {
      let debugAlsoPaintedParent = opts && 'debugAlsoPaintedParent' in opts ? opts.debugAlsoPaintedParent : false;
      if (!dart.test(child[_needsPaint])) dart.assertFailed(null, L4, 101, 12, "child._needsPaint");
      object$.PaintingContext._repaintCompositedChild(child, {debugAlsoPaintedParent: debugAlsoPaintedParent});
    }
    static _repaintCompositedChild(child, opts) {
      let debugAlsoPaintedParent = opts && 'debugAlsoPaintedParent' in opts ? opts.debugAlsoPaintedParent : false;
      let childContext = opts && 'childContext' in opts ? opts.childContext : null;
      if (!dart.test(child.isRepaintBoundary)) dart.assertFailed(null, L4, 113, 12, "child.isRepaintBoundary");
      if (!dart.test(dart.fn(() => {
        child.debugRegisterRepaintBoundaryPaint({includedParent: debugAlsoPaintedParent, includedChild: true});
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 114, 12, "() {\r\n      // register the call for RepaintBoundary metrics\r\n      child.debugRegisterRepaintBoundaryPaint(\r\n        includedParent: debugAlsoPaintedParent,\r\n        includedChild: true,\r\n      );\r\n      return true;\r\n    }()");
      let childLayer = OffsetLayerL().as(child[_layer]);
      if (childLayer == null) {
        if (!dart.test(debugAlsoPaintedParent)) dart.assertFailed(null, L4, 124, 14, "debugAlsoPaintedParent");
        child[_layer] = childLayer = new layer$.OffsetLayer.new();
      } else {
        if (!OffsetLayerL().is(childLayer)) dart.assertFailed(null, L4, 131, 14, "childLayer is OffsetLayer");
        if (!(dart.test(debugAlsoPaintedParent) || dart.test(childLayer.attached))) dart.assertFailed(null, L4, 132, 14, "debugAlsoPaintedParent || childLayer.attached");
        childLayer.removeAllChildren();
      }
      if (!(childLayer == child[_layer])) dart.assertFailed(null, L4, 135, 12, "identical(childLayer, child._layer)");
      if (!OffsetLayerL().is(child[_layer])) dart.assertFailed(null, L4, 136, 12, "child._layer is OffsetLayer");
      if (!dart.test(dart.fn(() => {
        let t8;
        child[_layer].debugCreator = (t8 = child.debugCreator, t8 == null ? dart.runtimeType(child) : t8);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 137, 12, "() {\r\n      child._layer.debugCreator = child.debugCreator ?? child.runtimeType;\r\n      return true;\r\n    }()");
      childContext == null ? childContext = new object$.PaintingContext.new(child[_layer], child.paintBounds) : null;
      child[_paintWithContext](childContext, ui.Offset.zero);
      if (!(childLayer == child[_layer])) dart.assertFailed(null, L4, 146, 12, "identical(childLayer, child._layer)");
      childContext.stopRecordingIfNeeded();
    }
    static debugInstrumentRepaintCompositedChild(child, opts) {
      let debugAlsoPaintedParent = opts && 'debugAlsoPaintedParent' in opts ? opts.debugAlsoPaintedParent : false;
      let customContext = opts && 'customContext' in opts ? opts.customContext : null;
      if (!dart.test(dart.fn(() => {
        object$.PaintingContext._repaintCompositedChild(child, {debugAlsoPaintedParent: debugAlsoPaintedParent, childContext: customContext});
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 163, 12, "() {\r\n      _repaintCompositedChild(\r\n        child,\r\n        debugAlsoPaintedParent: debugAlsoPaintedParent,\r\n        childContext: customContext,\r\n      );\r\n      return true;\r\n    }()");
    }
    paintChild(child, offset) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugProfilePaintsEnabled)) developer.Timeline.startSync(dart.str(dart.runtimeType(child)), {arguments: debug.timelineArgumentsIndicatingLandmarkEvent});
        if (debug$.debugOnProfilePaint != null) debug$.debugOnProfilePaint(child);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 179, 12, "() {\r\n      if (debugProfilePaintsEnabled)\r\n        Timeline.startSync('${child.runtimeType}', arguments: timelineArgumentsIndicatingLandmarkEvent);\r\n      if (debugOnProfilePaint != null)\r\n        debugOnProfilePaint(child);\r\n      return true;\r\n    }()");
      if (dart.test(child.isRepaintBoundary)) {
        this.stopRecordingIfNeeded();
        this[_compositeChild](child, offset);
      } else {
        child[_paintWithContext](this, offset);
      }
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugProfilePaintsEnabled)) developer.Timeline.finishSync();
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 194, 12, "() {\r\n      if (debugProfilePaintsEnabled)\r\n        Timeline.finishSync();\r\n      return true;\r\n    }()");
    }
    [_compositeChild](child, offset) {
      if (!!dart.test(this[_isRecording])) dart.assertFailed(null, L4, 202, 12, "!_isRecording");
      if (!dart.test(child.isRepaintBoundary)) dart.assertFailed(null, L4, 203, 12, "child.isRepaintBoundary");
      if (!(this[_canvas] == null || this[_canvas].getSaveCount() === 1)) dart.assertFailed(null, L4, 204, 12, "_canvas == null || _canvas.getSaveCount() == 1");
      if (dart.test(child[_needsPaint])) {
        object$.PaintingContext.repaintCompositedChild(child, {debugAlsoPaintedParent: true});
      } else {
        if (!dart.test(dart.fn(() => {
          let t8;
          child.debugRegisterRepaintBoundaryPaint({includedParent: true, includedChild: false});
          child[_layer].debugCreator = (t8 = child.debugCreator, t8 == null ? child : t8);
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 210, 14, "() {\r\n        // register the call for RepaintBoundary metrics\r\n        child.debugRegisterRepaintBoundaryPaint(\r\n          includedParent: true,\r\n          includedChild: false,\r\n        );\r\n        child._layer.debugCreator = child.debugCreator ?? child;\r\n        return true;\r\n      }()");
      }
      if (!OffsetLayerL().is(child[_layer])) dart.assertFailed(null, L4, 220, 12, "child._layer is OffsetLayer");
      let childOffsetLayer = OffsetLayerL().as(child[_layer]);
      childOffsetLayer.offset = offset;
      this.appendLayer(child[_layer]);
    }
    appendLayer(layer) {
      if (!!dart.test(this[_isRecording])) dart.assertFailed(null, L4, 237, 12, "!_isRecording");
      layer.remove();
      this[_containerLayer$].append(layer);
    }
    get [_isRecording]() {
      let hasCanvas = this[_canvas] != null;
      if (!dart.test(dart.fn(() => {
        if (hasCanvas) {
          if (!(this[_currentLayer] != null)) dart.assertFailed(null, L4, 246, 16, "_currentLayer != null");
          if (!(this[_recorder] != null)) dart.assertFailed(null, L4, 247, 16, "_recorder != null");
          if (!(this[_canvas] != null)) dart.assertFailed(null, L4, 248, 16, "_canvas != null");
        } else {
          if (!(this[_currentLayer] == null)) dart.assertFailed(null, L4, 250, 16, "_currentLayer == null");
          if (!(this[_recorder] == null)) dart.assertFailed(null, L4, 251, 16, "_recorder == null");
          if (!(this[_canvas] == null)) dart.assertFailed(null, L4, 252, 16, "_canvas == null");
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 244, 12, "() {\r\n      if (hasCanvas) {\r\n        assert(_currentLayer != null);\r\n        assert(_recorder != null);\r\n        assert(_canvas != null);\r\n      } else {\r\n        assert(_currentLayer == null);\r\n        assert(_recorder == null);\r\n        assert(_canvas == null);\r\n      }\r\n      return true;\r\n    }()");
      return hasCanvas;
    }
    get canvas() {
      if (this[_canvas] == null) this[_startRecording]();
      return this[_canvas];
    }
    [_startRecording]() {
      if (!!dart.test(this[_isRecording])) dart.assertFailed(null, L4, 277, 12, "!_isRecording");
      this[_currentLayer] = new layer$.PictureLayer.new(this.estimatedBounds);
      this[_recorder] = ui.PictureRecorder.new();
      this[_canvas] = ui.Canvas.new(this[_recorder]);
      this[_containerLayer$].append(this[_currentLayer]);
    }
    stopRecordingIfNeeded() {
      if (!dart.test(this[_isRecording])) return;
      if (!dart.test(dart.fn(() => {
        let t8, t8$;
        if (dart.test(debug$.debugRepaintRainbowEnabled)) {
          let paint = (t8 = ui.Paint.new(), (() => {
            t8.style = ui.PaintingStyle.stroke;
            t8.strokeWidth = 6.0;
            t8.color = debug$.debugCurrentRepaintColor.toColor();
            return t8;
          })());
          this.canvas.drawRect(this.estimatedBounds.deflate(3.0), paint);
        }
        if (dart.test(debug$.debugPaintLayerBordersEnabled)) {
          let paint = (t8$ = ui.Paint.new(), (() => {
            t8$.style = ui.PaintingStyle.stroke;
            t8$.strokeWidth = 1.0;
            t8$.color = C61 || CT.C61;
            return t8$;
          })());
          this.canvas.drawRect(this.estimatedBounds, paint);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 299, 12, "() {\r\n      if (debugRepaintRainbowEnabled) {\r\n        final Paint paint = Paint()\r\n          ..style = PaintingStyle.stroke\r\n          ..strokeWidth = 6.0\r\n          ..color = debugCurrentRepaintColor.toColor();\r\n        canvas.drawRect(estimatedBounds.deflate(3.0), paint);\r\n      }\r\n      if (debugPaintLayerBordersEnabled) {\r\n        final Paint paint = Paint()\r\n          ..style = PaintingStyle.stroke\r\n          ..strokeWidth = 1.0\r\n          ..color = const Color(0xFFFF9800);\r\n        canvas.drawRect(estimatedBounds, paint);\r\n      }\r\n      return true;\r\n    }()");
      this[_currentLayer].picture = this[_recorder].endRecording();
      this[_currentLayer] = null;
      this[_recorder] = null;
      this[_canvas] = null;
    }
    setIsComplexHint() {
      let t8;
      t8 = this[_currentLayer];
      t8 == null ? null : t8.isComplexHint = true;
    }
    setWillChangeHint() {
      let t8;
      t8 = this[_currentLayer];
      t8 == null ? null : t8.willChangeHint = true;
    }
    addLayer(layer) {
      this.stopRecordingIfNeeded();
      this.appendLayer(layer);
    }
    pushLayer(childLayer, painter, offset, opts) {
      let t8;
      let childPaintBounds = opts && 'childPaintBounds' in opts ? opts.childPaintBounds : null;
      if (!(painter != null)) dart.assertFailed(null, L4, 389, 12, "painter != null");
      if (dart.test(childLayer.hasChildren)) {
        childLayer.removeAllChildren();
      }
      this.stopRecordingIfNeeded();
      this.appendLayer(childLayer);
      let childContext = this.createChildContext(childLayer, (t8 = childPaintBounds, t8 == null ? this.estimatedBounds : t8));
      painter(childContext, offset);
      childContext.stopRecordingIfNeeded();
    }
    createChildContext(childLayer, bounds) {
      return new object$.PaintingContext.new(childLayer, bounds);
    }
    pushClipRect(needsCompositing, offset, clipRect, painter, opts) {
      let t8, t8$;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C3 || CT.C3;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let offsetClipRect = clipRect.shift(offset);
      if (dart.test(needsCompositing)) {
        let layer = (t8 = oldLayer, t8 == null ? new layer$.ClipRectLayer.new() : t8);
        t8$ = layer;
        (() => {
          t8$.clipRect = offsetClipRect;
          t8$.clipBehavior = clipBehavior;
          return t8$;
        })();
        this.pushLayer(layer, painter, offset, {childPaintBounds: offsetClipRect});
        return layer;
      } else {
        this.clipRectAndPaint(offsetClipRect, clipBehavior, offsetClipRect, dart.fn(() => painter(this, offset), VoidTovoid()));
        return null;
      }
    }
    pushClipRRect(needsCompositing, offset, bounds, clipRRect, painter, opts) {
      let t8, t8$;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C4 || CT.C4;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(clipBehavior != null)) dart.assertFailed(null, L4, 482, 12, "clipBehavior != null");
      let offsetBounds = bounds.shift(offset);
      let offsetClipRRect = clipRRect.shift(offset);
      if (dart.test(needsCompositing)) {
        let layer = (t8 = oldLayer, t8 == null ? new layer$.ClipRRectLayer.new() : t8);
        t8$ = layer;
        (() => {
          t8$.clipRRect = offsetClipRRect;
          t8$.clipBehavior = clipBehavior;
          return t8$;
        })();
        this.pushLayer(layer, painter, offset, {childPaintBounds: offsetBounds});
        return layer;
      } else {
        this.clipRRectAndPaint(offsetClipRRect, clipBehavior, offsetBounds, dart.fn(() => painter(this, offset), VoidTovoid()));
        return null;
      }
    }
    pushClipPath(needsCompositing, offset, bounds, clipPath, painter, opts) {
      let t8, t8$;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C4 || CT.C4;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(clipBehavior != null)) dart.assertFailed(null, L4, 518, 12, "clipBehavior != null");
      let offsetBounds = bounds.shift(offset);
      let offsetClipPath = clipPath.shift(offset);
      if (dart.test(needsCompositing)) {
        let layer = (t8 = oldLayer, t8 == null ? new layer$.ClipPathLayer.new() : t8);
        t8$ = layer;
        (() => {
          t8$.clipPath = offsetClipPath;
          t8$.clipBehavior = clipBehavior;
          return t8$;
        })();
        this.pushLayer(layer, painter, offset, {childPaintBounds: offsetBounds});
        return layer;
      } else {
        this.clipPathAndPaint(offsetClipPath, clipBehavior, offsetBounds, dart.fn(() => painter(this, offset), VoidTovoid()));
        return null;
      }
    }
    pushColorFilter(offset, colorFilter, painter, opts) {
      let t8;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(colorFilter != null)) dart.assertFailed(null, L4, 551, 12, "colorFilter != null");
      let layer = (t8 = oldLayer, t8 == null ? new layer$.ColorFilterLayer.new() : t8);
      layer.colorFilter = colorFilter;
      this.pushLayer(layer, painter, offset);
      return layer;
    }
    pushTransform(needsCompositing, offset, transform, painter, opts) {
      let t8, t8$, t8$0;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let effectiveTransform = (t8 = vector_math_64.Matrix4.translationValues(offset.dx, offset.dy, 0.0), (() => {
        t8.multiply(transform);
        t8.translate(-dart.notNull(offset.dx), -dart.notNull(offset.dy));
        return t8;
      })());
      if (dart.test(needsCompositing)) {
        let layer = (t8$ = oldLayer, t8$ == null ? new layer$.TransformLayer.new() : t8$);
        layer.transform = effectiveTransform;
        this.pushLayer(layer, painter, offset, {childPaintBounds: matrix_utils.MatrixUtils.inverseTransformRect(effectiveTransform, this.estimatedBounds)});
        return layer;
      } else {
        t8$0 = this.canvas;
        (() => {
          t8$0.save();
          t8$0.transform(effectiveTransform.storage);
          return t8$0;
        })();
        painter(this, offset);
        this.canvas.restore();
        return null;
      }
    }
    pushOpacity(offset, alpha, painter, opts) {
      let t8, t8$;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let layer = (t8 = oldLayer, t8 == null ? new layer$.OpacityLayer.new() : t8);
      t8$ = layer;
      (() => {
        t8$.alpha = alpha;
        t8$.offset = offset;
        return t8$;
      })();
      this.pushLayer(layer, painter, ui.Offset.zero);
      return layer;
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "PaintingContext")) + "#" + dart.str(this.hashCode) + "(layer: " + dart.str(this[_containerLayer$]) + ", canvas bounds: " + dart.str(this.estimatedBounds) + ")";
    }
  };
  (object$.PaintingContext.new = function(_containerLayer, estimatedBounds) {
    this[_currentLayer] = null;
    this[_recorder] = null;
    this[_canvas] = null;
    this[_containerLayer$] = _containerLayer;
    this[estimatedBounds$] = estimatedBounds;
    if (!(_containerLayer != null)) dart.assertFailed(null, L4, 76, 14, "_containerLayer != null");
    if (!(estimatedBounds != null)) dart.assertFailed(null, L4, 77, 14, "estimatedBounds != null");
    ;
  }).prototype = object$.PaintingContext.prototype;
  dart.addTypeTests(object$.PaintingContext);
  dart.addTypeCaches(object$.PaintingContext);
  dart.setMethodSignature(object$.PaintingContext, () => ({
    __proto__: dart.getMethods(object$.PaintingContext.__proto__),
    paintChild: dart.fnType(dart.void, [dart.legacy(object$.RenderObject), dart.legacy(ui.Offset)]),
    [_compositeChild]: dart.fnType(dart.void, [dart.legacy(object$.RenderObject), dart.legacy(ui.Offset)]),
    appendLayer: dart.fnType(dart.void, [dart.legacy(layer$.Layer)]),
    [_startRecording]: dart.fnType(dart.void, []),
    stopRecordingIfNeeded: dart.fnType(dart.void, []),
    setIsComplexHint: dart.fnType(dart.void, []),
    setWillChangeHint: dart.fnType(dart.void, []),
    addLayer: dart.fnType(dart.void, [dart.legacy(layer$.Layer)]),
    pushLayer: dart.fnType(dart.void, [dart.legacy(layer$.ContainerLayer), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)])), dart.legacy(ui.Offset)], {childPaintBounds: dart.legacy(ui.Rect)}, {}),
    createChildContext: dart.fnType(dart.legacy(object$.PaintingContext), [dart.legacy(layer$.ContainerLayer), dart.legacy(ui.Rect)]),
    pushClipRect: dart.fnType(dart.legacy(layer$.ClipRectLayer), [dart.legacy(core.bool), dart.legacy(ui.Offset), dart.legacy(ui.Rect), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {clipBehavior: dart.legacy(ui.Clip), oldLayer: dart.legacy(layer$.ClipRectLayer)}, {}),
    pushClipRRect: dart.fnType(dart.legacy(layer$.ClipRRectLayer), [dart.legacy(core.bool), dart.legacy(ui.Offset), dart.legacy(ui.Rect), dart.legacy(ui.RRect), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {clipBehavior: dart.legacy(ui.Clip), oldLayer: dart.legacy(layer$.ClipRRectLayer)}, {}),
    pushClipPath: dart.fnType(dart.legacy(layer$.ClipPathLayer), [dart.legacy(core.bool), dart.legacy(ui.Offset), dart.legacy(ui.Rect), dart.legacy(ui.Path), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {clipBehavior: dart.legacy(ui.Clip), oldLayer: dart.legacy(layer$.ClipPathLayer)}, {}),
    pushColorFilter: dart.fnType(dart.legacy(layer$.ColorFilterLayer), [dart.legacy(ui.Offset), dart.legacy(ui.ColorFilter), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {oldLayer: dart.legacy(layer$.ColorFilterLayer)}, {}),
    pushTransform: dart.fnType(dart.legacy(layer$.TransformLayer), [dart.legacy(core.bool), dart.legacy(ui.Offset), dart.legacy(vector_math_64.Matrix4), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {oldLayer: dart.legacy(layer$.TransformLayer)}, {}),
    pushOpacity: dart.fnType(dart.legacy(layer$.OpacityLayer), [dart.legacy(ui.Offset), dart.legacy(core.int), dart.legacy(dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]))], {oldLayer: dart.legacy(layer$.OpacityLayer)}, {}),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(object$.PaintingContext, () => ({
    __proto__: dart.getGetters(object$.PaintingContext.__proto__),
    [_isRecording]: dart.legacy(core.bool),
    canvas: dart.legacy(ui.Canvas)
  }));
  dart.setLibraryUri(object$.PaintingContext, L5);
  dart.setFieldSignature(object$.PaintingContext, () => ({
    __proto__: dart.getFields(object$.PaintingContext.__proto__),
    [_containerLayer$]: dart.finalFieldType(dart.legacy(layer$.ContainerLayer)),
    estimatedBounds: dart.finalFieldType(dart.legacy(ui.Rect)),
    [_currentLayer]: dart.fieldType(dart.legacy(layer$.PictureLayer)),
    [_recorder]: dart.fieldType(dart.legacy(ui.PictureRecorder)),
    [_canvas]: dart.fieldType(dart.legacy(ui.Canvas))
  }));
  dart.defineExtensionMethods(object$.PaintingContext, ['toString']);
  object$.Constraints = class Constraints extends core.Object {
    debugAssertIsValid(opts) {
      let isAppliedConstraint = opts && 'isAppliedConstraint' in opts ? opts.isAppliedConstraint : false;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, L4, 710, 12, "isNormalized");
      return this.isNormalized;
    }
  };
  (object$.Constraints.new = function() {
    ;
  }).prototype = object$.Constraints.prototype;
  dart.addTypeTests(object$.Constraints);
  dart.addTypeCaches(object$.Constraints);
  dart.setMethodSignature(object$.Constraints, () => ({
    __proto__: dart.getMethods(object$.Constraints.__proto__),
    debugAssertIsValid: dart.fnType(dart.legacy(core.bool), [], {informationCollector: dart.legacy(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), [])), isAppliedConstraint: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(object$.Constraints, L5);
  var _owner$0 = dart.privateName(object$, "_owner");
  var _didDisposeSemanticsHandle = dart.privateName(object$, "_didDisposeSemanticsHandle");
  var listener$ = dart.privateName(object$, "SemanticsHandle.listener");
  object$.SemanticsHandle = class SemanticsHandle extends core.Object {
    get listener() {
      return this[listener$];
    }
    set listener(value) {
      super.listener = value;
    }
    dispose() {
      if (!dart.test(dart.fn(() => {
        if (this[_owner$0] == null) {
          dart.throw(assertions.FlutterError.new("SemanticsHandle has already been disposed.\n" + "Each SemanticsHandle should be disposed exactly once."));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 763, 12, "() {\r\n      if (_owner == null) {\r\n        throw FlutterError(\r\n          'SemanticsHandle has already been disposed.\\n'\r\n          'Each SemanticsHandle should be disposed exactly once.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (this[_owner$0] != null) {
        if (this.listener != null) this[_owner$0].semanticsOwner.removeListener(this.listener);
        this[_owner$0][_didDisposeSemanticsHandle]();
        this[_owner$0] = null;
      }
    }
  };
  (object$.SemanticsHandle.__ = function(_owner, listener) {
    this[_owner$0] = _owner;
    this[listener$] = listener;
    if (!(_owner != null)) dart.assertFailed(null, L4, 745, 16, "_owner != null");
    if (this.listener != null) this[_owner$0].semanticsOwner.addListener(this.listener);
  }).prototype = object$.SemanticsHandle.prototype;
  dart.addTypeTests(object$.SemanticsHandle);
  dart.addTypeCaches(object$.SemanticsHandle);
  dart.setMethodSignature(object$.SemanticsHandle, () => ({
    __proto__: dart.getMethods(object$.SemanticsHandle.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(object$.SemanticsHandle, L5);
  dart.setFieldSignature(object$.SemanticsHandle, () => ({
    __proto__: dart.getFields(object$.SemanticsHandle.__proto__),
    [_owner$0]: dart.fieldType(dart.legacy(object$.PipelineOwner)),
    listener: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  var _rootNode = dart.privateName(object$, "_rootNode");
  var _outstandingSemanticsHandles = dart.privateName(object$, "_outstandingSemanticsHandles");
  var onNeedVisualUpdate$ = dart.privateName(object$, "PipelineOwner.onNeedVisualUpdate");
  var onSemanticsOwnerCreated$ = dart.privateName(object$, "PipelineOwner.onSemanticsOwnerCreated");
  var onSemanticsOwnerDisposed$ = dart.privateName(object$, "PipelineOwner.onSemanticsOwnerDisposed");
  object$.PipelineOwner = class PipelineOwner extends core.Object {
    get onNeedVisualUpdate() {
      return this[onNeedVisualUpdate$];
    }
    set onNeedVisualUpdate(value) {
      super.onNeedVisualUpdate = value;
    }
    get onSemanticsOwnerCreated() {
      return this[onSemanticsOwnerCreated$];
    }
    set onSemanticsOwnerCreated(value) {
      super.onSemanticsOwnerCreated = value;
    }
    get onSemanticsOwnerDisposed() {
      return this[onSemanticsOwnerDisposed$];
    }
    set onSemanticsOwnerDisposed(value) {
      super.onSemanticsOwnerDisposed = value;
    }
    requestVisualUpdate() {
      if (this.onNeedVisualUpdate != null) this.onNeedVisualUpdate();
    }
    get rootNode() {
      return this[_rootNode];
    }
    set rootNode(value) {
      let t8, t8$;
      if (dart.equals(this[_rootNode], value)) return;
      t8 = this[_rootNode];
      t8 == null ? null : t8.detach();
      this[_rootNode] = value;
      t8$ = this[_rootNode];
      t8$ == null ? null : t8$.attach(this);
    }
    get debugDoingLayout() {
      return this[_debugDoingLayout];
    }
    flushLayout() {
      let t8;
      if (!false) {
        developer.Timeline.startSync("Layout", {arguments: debug.timelineArgumentsIndicatingLandmarkEvent});
      }
      if (!dart.test(dart.fn(() => {
        this[_debugDoingLayout] = true;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 885, 12, "() {\r\n      _debugDoingLayout = true;\r\n      return true;\r\n    }()");
      try {
        while (dart.test(this[_nodesNeedingLayout][$isNotEmpty])) {
          let dirtyNodes = this[_nodesNeedingLayout];
          this[_nodesNeedingLayout] = JSArrayOfRenderObjectL().of([]);
          for (let node of (t8 = dirtyNodes, (() => {
            t8[$sort](dart.fn((a, b) => dart.notNull(a.depth) - dart.notNull(b.depth), RenderObjectLAndRenderObjectLTointL()));
            return t8;
          })())) {
            if (dart.test(node[_needsLayout]) && dart.equals(node.owner, this)) node[_layoutWithoutResize]();
          }
        }
      } finally {
        if (!dart.test(dart.fn(() => {
          this[_debugDoingLayout] = false;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 900, 14, "() {\r\n        _debugDoingLayout = false;\r\n        return true;\r\n      }()");
        if (!false) {
          developer.Timeline.finishSync();
        }
      }
    }
    [_enableMutationsToDirtySubtrees](callback) {
      if (!dart.test(this[_debugDoingLayout])) dart.assertFailed(null, L4, 919, 12, "_debugDoingLayout");
      let oldState = null;
      if (!dart.test(dart.fn(() => {
        oldState = this[_debugAllowMutationsToDirtySubtrees];
        this[_debugAllowMutationsToDirtySubtrees] = true;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 921, 12, "() {\r\n      oldState = _debugAllowMutationsToDirtySubtrees;\r\n      _debugAllowMutationsToDirtySubtrees = true;\r\n      return true;\r\n    }()");
      try {
        callback();
      } finally {
        if (!dart.test(dart.fn(() => {
          this[_debugAllowMutationsToDirtySubtrees] = oldState;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 929, 14, "() {\r\n        _debugAllowMutationsToDirtySubtrees = oldState;\r\n        return true;\r\n      }()");
      }
    }
    flushCompositingBits() {
      if (!false) {
        developer.Timeline.startSync("Compositing bits");
      }
      this[_nodesNeedingCompositingBitsUpdate][$sort](dart.fn((a, b) => dart.notNull(a.depth) - dart.notNull(b.depth), RenderObjectLAndRenderObjectLTointL()));
      for (let node of this[_nodesNeedingCompositingBitsUpdate]) {
        if (dart.test(node[_needsCompositingBitsUpdate]) && dart.equals(node.owner, this)) node[_updateCompositingBits]();
      }
      this[_nodesNeedingCompositingBitsUpdate][$clear]();
      if (!false) {
        developer.Timeline.finishSync();
      }
    }
    get debugDoingPaint() {
      return this[_debugDoingPaint];
    }
    flushPaint() {
      let t8;
      if (!false) {
        developer.Timeline.startSync("Paint", {arguments: debug.timelineArgumentsIndicatingLandmarkEvent});
      }
      if (!dart.test(dart.fn(() => {
        this[_debugDoingPaint] = true;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 977, 12, "() {\r\n      _debugDoingPaint = true;\r\n      return true;\r\n    }()");
      try {
        let dirtyNodes = this[_nodesNeedingPaint];
        this[_nodesNeedingPaint] = JSArrayOfRenderObjectL().of([]);
        for (let node of (t8 = dirtyNodes, (() => {
          t8[$sort](dart.fn((a, b) => dart.notNull(b.depth) - dart.notNull(a.depth), RenderObjectLAndRenderObjectLTointL()));
          return t8;
        })())) {
          if (!(node[_layer] != null)) dart.assertFailed(null, L4, 986, 16, "node._layer != null");
          if (dart.test(node[_needsPaint]) && dart.equals(node.owner, this)) {
            if (dart.test(node[_layer].attached)) {
              object$.PaintingContext.repaintCompositedChild(node);
            } else {
              node[_skippedPaintingOnLayer]();
            }
          }
        }
        if (!dart.test(this[_nodesNeedingPaint][$isEmpty])) dart.assertFailed(null, L4, 995, 14, "_nodesNeedingPaint.isEmpty");
      } finally {
        if (!dart.test(dart.fn(() => {
          this[_debugDoingPaint] = false;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 997, 14, "() {\r\n        _debugDoingPaint = false;\r\n        return true;\r\n      }()");
        if (!false) {
          developer.Timeline.finishSync();
        }
      }
    }
    get semanticsOwner() {
      return this[_semanticsOwner];
    }
    get debugOutstandingSemanticsHandles() {
      return this[_outstandingSemanticsHandles];
    }
    ensureSemantics(opts) {
      let listener = opts && 'listener' in opts ? opts.listener : null;
      this[_outstandingSemanticsHandles] = dart.notNull(this[_outstandingSemanticsHandles]) + 1;
      if (this[_outstandingSemanticsHandles] === 1) {
        if (!(this[_semanticsOwner] == null)) dart.assertFailed(null, L4, 1042, 14, "_semanticsOwner == null");
        this[_semanticsOwner] = new semantics.SemanticsOwner.new();
        if (this.onSemanticsOwnerCreated != null) this.onSemanticsOwnerCreated();
      }
      return new object$.SemanticsHandle.__(this, listener);
    }
    [_didDisposeSemanticsHandle]() {
      if (!(this[_semanticsOwner] != null)) dart.assertFailed(null, L4, 1051, 12, "_semanticsOwner != null");
      this[_outstandingSemanticsHandles] = dart.notNull(this[_outstandingSemanticsHandles]) - 1;
      if (this[_outstandingSemanticsHandles] === 0) {
        this[_semanticsOwner].dispose();
        this[_semanticsOwner] = null;
        if (this.onSemanticsOwnerDisposed != null) this.onSemanticsOwnerDisposed();
      }
    }
    flushSemantics() {
      let t8;
      if (this[_semanticsOwner] == null) return;
      if (!false) {
        developer.Timeline.startSync("Semantics");
      }
      if (!(this[_semanticsOwner] != null)) dart.assertFailed(null, L4, 1081, 12, "_semanticsOwner != null");
      if (!dart.test(dart.fn(() => {
        this[_debugDoingSemantics] = true;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 1082, 12, "() {\r\n      _debugDoingSemantics = true;\r\n      return true;\r\n    }()");
      try {
        let nodesToProcess = (t8 = this[_nodesNeedingSemantics][$toList](), (() => {
          t8[$sort](dart.fn((a, b) => dart.notNull(a.depth) - dart.notNull(b.depth), RenderObjectLAndRenderObjectLTointL()));
          return t8;
        })());
        this[_nodesNeedingSemantics].clear();
        for (let node of nodesToProcess) {
          if (dart.test(node[_needsSemanticsUpdate]) && dart.equals(node.owner, this)) node[_updateSemantics]();
        }
        this[_semanticsOwner].sendSemanticsUpdate();
      } finally {
        if (!dart.test(this[_nodesNeedingSemantics][$isEmpty])) dart.assertFailed(null, L4, 1096, 14, "_nodesNeedingSemantics.isEmpty");
        if (!dart.test(dart.fn(() => {
          this[_debugDoingSemantics] = false;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 1097, 14, "() {\r\n        _debugDoingSemantics = false;\r\n        return true;\r\n      }()");
        if (!false) {
          developer.Timeline.finishSync();
        }
      }
    }
  };
  (object$.PipelineOwner.new = function(opts) {
    let onNeedVisualUpdate = opts && 'onNeedVisualUpdate' in opts ? opts.onNeedVisualUpdate : null;
    let onSemanticsOwnerCreated = opts && 'onSemanticsOwnerCreated' in opts ? opts.onSemanticsOwnerCreated : null;
    let onSemanticsOwnerDisposed = opts && 'onSemanticsOwnerDisposed' in opts ? opts.onSemanticsOwnerDisposed : null;
    this[_rootNode] = null;
    this[_nodesNeedingLayout] = JSArrayOfRenderObjectL().of([]);
    this[_debugDoingLayout] = false;
    this[_debugAllowMutationsToDirtySubtrees] = false;
    this[_nodesNeedingCompositingBitsUpdate] = JSArrayOfRenderObjectL().of([]);
    this[_nodesNeedingPaint] = JSArrayOfRenderObjectL().of([]);
    this[_debugDoingPaint] = false;
    this[_semanticsOwner] = null;
    this[_outstandingSemanticsHandles] = 0;
    this[_debugDoingSemantics] = false;
    this[_nodesNeedingSemantics] = LinkedHashSetOfRenderObjectL().new();
    this[onNeedVisualUpdate$] = onNeedVisualUpdate;
    this[onSemanticsOwnerCreated$] = onSemanticsOwnerCreated;
    this[onSemanticsOwnerDisposed$] = onSemanticsOwnerDisposed;
    ;
  }).prototype = object$.PipelineOwner.prototype;
  dart.addTypeTests(object$.PipelineOwner);
  dart.addTypeCaches(object$.PipelineOwner);
  dart.setMethodSignature(object$.PipelineOwner, () => ({
    __proto__: dart.getMethods(object$.PipelineOwner.__proto__),
    requestVisualUpdate: dart.fnType(dart.void, []),
    flushLayout: dart.fnType(dart.void, []),
    [_enableMutationsToDirtySubtrees]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
    flushCompositingBits: dart.fnType(dart.void, []),
    flushPaint: dart.fnType(dart.void, []),
    ensureSemantics: dart.fnType(dart.legacy(object$.SemanticsHandle), [], {listener: dart.legacy(dart.fnType(dart.void, []))}, {}),
    [_didDisposeSemanticsHandle]: dart.fnType(dart.void, []),
    flushSemantics: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(object$.PipelineOwner, () => ({
    __proto__: dart.getGetters(object$.PipelineOwner.__proto__),
    rootNode: dart.legacy(node.AbstractNode),
    debugDoingLayout: dart.legacy(core.bool),
    debugDoingPaint: dart.legacy(core.bool),
    semanticsOwner: dart.legacy(semantics.SemanticsOwner),
    debugOutstandingSemanticsHandles: dart.legacy(core.int)
  }));
  dart.setSetterSignature(object$.PipelineOwner, () => ({
    __proto__: dart.getSetters(object$.PipelineOwner.__proto__),
    rootNode: dart.legacy(node.AbstractNode)
  }));
  dart.setLibraryUri(object$.PipelineOwner, L5);
  dart.setFieldSignature(object$.PipelineOwner, () => ({
    __proto__: dart.getFields(object$.PipelineOwner.__proto__),
    onNeedVisualUpdate: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
    onSemanticsOwnerCreated: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
    onSemanticsOwnerDisposed: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_rootNode]: dart.fieldType(dart.legacy(node.AbstractNode)),
    [_nodesNeedingLayout]: dart.fieldType(dart.legacy(core.List$(dart.legacy(object$.RenderObject)))),
    [_debugDoingLayout]: dart.fieldType(dart.legacy(core.bool)),
    [_debugAllowMutationsToDirtySubtrees]: dart.fieldType(dart.legacy(core.bool)),
    [_nodesNeedingCompositingBitsUpdate]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(object$.RenderObject)))),
    [_nodesNeedingPaint]: dart.fieldType(dart.legacy(core.List$(dart.legacy(object$.RenderObject)))),
    [_debugDoingPaint]: dart.fieldType(dart.legacy(core.bool)),
    [_semanticsOwner]: dart.fieldType(dart.legacy(semantics.SemanticsOwner)),
    [_outstandingSemanticsHandles]: dart.fieldType(dart.legacy(core.int)),
    [_debugDoingSemantics]: dart.fieldType(dart.legacy(core.bool)),
    [_nodesNeedingSemantics]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(object$.RenderObject))))
  }));
  const _is_ContainerParentDataMixin_default = Symbol('_is_ContainerParentDataMixin_default');
  var previousSibling = dart.privateName(object$, "ContainerParentDataMixin.previousSibling");
  var nextSibling = dart.privateName(object$, "ContainerParentDataMixin.nextSibling");
  object$.ContainerParentDataMixin$ = dart.generic(ChildType => {
    var ChildTypeL = () => (ChildTypeL = dart.constFn(dart.legacy(ChildType)))();
    class ContainerParentDataMixin extends object$.ParentData {}
    ContainerParentDataMixin[dart.mixinOn] = ParentData => class ContainerParentDataMixin extends ParentData {
      get previousSibling() {
        return this[previousSibling];
      }
      set previousSibling(value) {
        this[previousSibling] = ChildTypeL().as(value);
      }
      get nextSibling() {
        return this[nextSibling];
      }
      set nextSibling(value) {
        this[nextSibling] = ChildTypeL().as(value);
      }
      detach() {
        if (!(this.previousSibling == null)) dart.assertFailed("Pointers to siblings must be nulled before detaching ParentData.", L4, 3047, 12, "previousSibling == null");
        if (!(this.nextSibling == null)) dart.assertFailed("Pointers to siblings must be nulled before detaching ParentData.", L4, 3048, 12, "nextSibling == null");
        super.detach();
      }
    };
    (ContainerParentDataMixin[dart.mixinNew] = function() {
      this[previousSibling] = null;
      this[nextSibling] = null;
    }).prototype = ContainerParentDataMixin.prototype;
    dart.addTypeTests(ContainerParentDataMixin);
    ContainerParentDataMixin.prototype[_is_ContainerParentDataMixin_default] = true;
    dart.addTypeCaches(ContainerParentDataMixin);
    ContainerParentDataMixin[dart.implements] = () => [object$.ParentData];
    dart.setLibraryUri(ContainerParentDataMixin, L5);
    dart.setFieldSignature(ContainerParentDataMixin, () => ({
      __proto__: dart.getFields(ContainerParentDataMixin.__proto__),
      previousSibling: dart.fieldType(dart.legacy(ChildType)),
      nextSibling: dart.fieldType(dart.legacy(ChildType))
    }));
    return ContainerParentDataMixin;
  });
  object$.ContainerParentDataMixin = object$.ContainerParentDataMixin$();
  dart.addTypeTests(object$.ContainerParentDataMixin, _is_ContainerParentDataMixin_default);
  var _childCount = dart.privateName(object$, "_childCount");
  var _firstChild$ = dart.privateName(object$, "_firstChild");
  var _lastChild$ = dart.privateName(object$, "_lastChild");
  var _debugUltimatePreviousSiblingOf$ = dart.privateName(object$, "_debugUltimatePreviousSiblingOf");
  var _debugUltimateNextSiblingOf$ = dart.privateName(object$, "_debugUltimateNextSiblingOf");
  var _insertIntoChildList = dart.privateName(object$, "_insertIntoChildList");
  var _removeFromChildList = dart.privateName(object$, "_removeFromChildList");
  const _is_ContainerRenderObjectMixin_default = Symbol('_is_ContainerRenderObjectMixin_default');
  object$.ContainerRenderObjectMixin$ = dart.generic((ChildType, ParentDataType) => {
    var ChildTypeL = () => (ChildTypeL = dart.constFn(dart.legacy(ChildType)))();
    var ListOfChildTypeL = () => (ListOfChildTypeL = dart.constFn(core.List$(ChildTypeL())))();
    var ListLOfChildTypeL = () => (ListLOfChildTypeL = dart.constFn(dart.legacy(ListOfChildTypeL())))();
    var ParentDataTypeL = () => (ParentDataTypeL = dart.constFn(dart.legacy(ParentDataType)))();
    class ContainerRenderObjectMixin extends object$.RenderObject {}
    ContainerRenderObjectMixin[dart.mixinOn] = RenderObject => class ContainerRenderObjectMixin extends RenderObject {
      [_debugUltimatePreviousSiblingOf$](child, opts) {
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let childParentData = ParentDataTypeL().as(child.parentData);
        while (childParentData.previousSibling != null) {
          if (!!dart.equals(childParentData.previousSibling, child)) dart.assertFailed(null, L4, 3075, 14, "childParentData.previousSibling != child");
          child = childParentData.previousSibling;
          childParentData = ParentDataTypeL().as(child.parentData);
        }
        return dart.equals(child, equals);
      }
      [_debugUltimateNextSiblingOf$](child, opts) {
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let childParentData = ParentDataTypeL().as(child.parentData);
        while (childParentData.nextSibling != null) {
          if (!!dart.equals(childParentData.nextSibling, child)) dart.assertFailed(null, L4, 3084, 14, "childParentData.nextSibling != child");
          child = childParentData.nextSibling;
          childParentData = ParentDataTypeL().as(child.parentData);
        }
        return dart.equals(child, equals);
      }
      get childCount() {
        return this[_childCount];
      }
      debugValidateChild(child) {
        if (!dart.test(dart.fn(() => {
          if (!ChildTypeL().is(child)) {
            dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("A " + dart.str(this.runtimeType) + " expected a child of type " + dart.str(dart.wrapType(ChildTypeL())) + " but received a " + "child of type " + dart.str(dart.runtimeType(child)) + "."), new assertions.ErrorDescription.new("RenderObjects expect specific types of children because they " + "coordinate with their children during layout and paint. For " + "example, a RenderSliver cannot be the child of a RenderBox because " + "a RenderSliver does not understand the RenderBox layout protocol."), new assertions.ErrorSpacer.new(), new diagnostics.DiagnosticsProperty.new("The " + dart.str(this.runtimeType) + " that expected a " + dart.str(dart.wrapType(ChildTypeL())) + " child was created by", this.debugCreator, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new assertions.ErrorSpacer.new(), new diagnostics.DiagnosticsProperty.new("The " + dart.str(dart.runtimeType(child)) + " that did not match the expected child type " + "was created by", child.debugCreator, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L4, 3102, 12, "() {\r\n      if (child is! ChildType) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'A $runtimeType expected a child of type $ChildType but received a '\r\n            'child of type ${child.runtimeType}.'\r\n          ),\r\n          ErrorDescription(\r\n            'RenderObjects expect specific types of children because they '\r\n            'coordinate with their children during layout and paint. For '\r\n            'example, a RenderSliver cannot be the child of a RenderBox because '\r\n            'a RenderSliver does not understand the RenderBox layout protocol.'\r\n          ),\r\n          ErrorSpacer(),\r\n          DiagnosticsProperty<dynamic>(\r\n            'The $runtimeType that expected a $ChildType child was created by',\r\n            debugCreator,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          ),\r\n          ErrorSpacer(),\r\n          DiagnosticsProperty<dynamic>(\r\n            'The ${child.runtimeType} that did not match the expected child type '\r\n            'was created by',\r\n            child.debugCreator,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
        return true;
      }
      [_insertIntoChildList](child, opts) {
        let after = opts && 'after' in opts ? opts.after : null;
        let childParentData = ParentDataTypeL().as(child.parentData);
        if (!(childParentData.nextSibling == null)) dart.assertFailed(null, L4, 3139, 12, "childParentData.nextSibling == null");
        if (!(childParentData.previousSibling == null)) dart.assertFailed(null, L4, 3140, 12, "childParentData.previousSibling == null");
        this[_childCount] = dart.notNull(this[_childCount]) + 1;
        if (!(dart.notNull(this[_childCount]) > 0)) dart.assertFailed(null, L4, 3142, 12, "_childCount > 0");
        if (after == null) {
          childParentData.nextSibling = this[_firstChild$];
          if (this[_firstChild$] != null) {
            let _firstChildParentData = ParentDataTypeL().as(this[_firstChild$].parentData);
            _firstChildParentData.previousSibling = child;
          }
          this[_firstChild$] = child;
          this[_lastChild$] == null ? this[_lastChild$] = child : null;
        } else {
          if (!(this[_firstChild$] != null)) dart.assertFailed(null, L4, 3153, 14, "_firstChild != null");
          if (!(this[_lastChild$] != null)) dart.assertFailed(null, L4, 3154, 14, "_lastChild != null");
          if (!dart.test(this[_debugUltimatePreviousSiblingOf$](after, {equals: this[_firstChild$]}))) dart.assertFailed(null, L4, 3155, 14, "_debugUltimatePreviousSiblingOf(after, equals: _firstChild)");
          if (!dart.test(this[_debugUltimateNextSiblingOf$](after, {equals: this[_lastChild$]}))) dart.assertFailed(null, L4, 3156, 14, "_debugUltimateNextSiblingOf(after, equals: _lastChild)");
          let afterParentData = ParentDataTypeL().as(after.parentData);
          if (afterParentData.nextSibling == null) {
            if (!dart.equals(after, this[_lastChild$])) dart.assertFailed(null, L4, 3160, 16, "after == _lastChild");
            childParentData.previousSibling = after;
            afterParentData.nextSibling = child;
            this[_lastChild$] = child;
          } else {
            childParentData.nextSibling = afterParentData.nextSibling;
            childParentData.previousSibling = after;
            let childPreviousSiblingParentData = ParentDataTypeL().as(childParentData.previousSibling.parentData);
            let childNextSiblingParentData = ParentDataTypeL().as(childParentData.nextSibling.parentData);
            childPreviousSiblingParentData.nextSibling = child;
            childNextSiblingParentData.previousSibling = child;
            if (!dart.equals(afterParentData.nextSibling, child)) dart.assertFailed(null, L4, 3174, 16, "afterParentData.nextSibling == child");
          }
        }
      }
      insert(child, opts) {
        ChildTypeL().as(child);
        let after = opts && 'after' in opts ? opts.after : null;
        ChildTypeL().as(after);
        if (!!dart.equals(child, this)) dart.assertFailed("A RenderObject cannot be inserted into itself.", L4, 3183, 12, "child != this");
        if (!!dart.equals(after, this)) dart.assertFailed("A RenderObject cannot simultaneously be both the parent and the sibling of another RenderObject.", L4, 3184, 12, "after != this");
        if (!!dart.equals(child, after)) dart.assertFailed("A RenderObject cannot be inserted after itself.", L4, 3185, 12, "child != after");
        if (!!dart.equals(child, this[_firstChild$])) dart.assertFailed(null, L4, 3186, 12, "child != _firstChild");
        if (!!dart.equals(child, this[_lastChild$])) dart.assertFailed(null, L4, 3187, 12, "child != _lastChild");
        this.adoptChild(child);
        this[_insertIntoChildList](child, {after: after});
      }
      add(child) {
        ChildTypeL().as(child);
        this.insert(child, {after: this[_lastChild$]});
      }
      addAll(children) {
        let t8;
        ListLOfChildTypeL().as(children);
        t8 = children;
        t8 == null ? null : t8[$forEach](dart.bind(this, 'add'));
      }
      [_removeFromChildList](child) {
        let childParentData = ParentDataTypeL().as(child.parentData);
        if (!dart.test(this[_debugUltimatePreviousSiblingOf$](child, {equals: this[_firstChild$]}))) dart.assertFailed(null, L4, 3204, 12, "_debugUltimatePreviousSiblingOf(child, equals: _firstChild)");
        if (!dart.test(this[_debugUltimateNextSiblingOf$](child, {equals: this[_lastChild$]}))) dart.assertFailed(null, L4, 3205, 12, "_debugUltimateNextSiblingOf(child, equals: _lastChild)");
        if (!(dart.notNull(this[_childCount]) >= 0)) dart.assertFailed(null, L4, 3206, 12, "_childCount >= 0");
        if (childParentData.previousSibling == null) {
          if (!dart.equals(this[_firstChild$], child)) dart.assertFailed(null, L4, 3208, 14, "_firstChild == child");
          this[_firstChild$] = childParentData.nextSibling;
        } else {
          let childPreviousSiblingParentData = ParentDataTypeL().as(childParentData.previousSibling.parentData);
          childPreviousSiblingParentData.nextSibling = childParentData.nextSibling;
        }
        if (childParentData.nextSibling == null) {
          if (!dart.equals(this[_lastChild$], child)) dart.assertFailed(null, L4, 3215, 14, "_lastChild == child");
          this[_lastChild$] = childParentData.previousSibling;
        } else {
          let childNextSiblingParentData = ParentDataTypeL().as(childParentData.nextSibling.parentData);
          childNextSiblingParentData.previousSibling = childParentData.previousSibling;
        }
        childParentData.previousSibling = null;
        childParentData.nextSibling = null;
        this[_childCount] = dart.notNull(this[_childCount]) - 1;
      }
      remove(child) {
        ChildTypeL().as(child);
        this[_removeFromChildList](child);
        this.dropChild(child);
      }
      removeAll() {
        let child = this[_firstChild$];
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          let next = childParentData.nextSibling;
          childParentData.previousSibling = null;
          childParentData.nextSibling = null;
          this.dropChild(child);
          child = next;
        }
        this[_firstChild$] = null;
        this[_lastChild$] = null;
        this[_childCount] = 0;
      }
      move(child, opts) {
        ChildTypeL().as(child);
        let after = opts && 'after' in opts ? opts.after : null;
        ChildTypeL().as(after);
        if (!!dart.equals(child, this)) dart.assertFailed(null, L4, 3258, 12, "child != this");
        if (!!dart.equals(after, this)) dart.assertFailed(null, L4, 3259, 12, "after != this");
        if (!!dart.equals(child, after)) dart.assertFailed(null, L4, 3260, 12, "child != after");
        if (!dart.equals(child.parent, this)) dart.assertFailed(null, L4, 3261, 12, "child.parent == this");
        let childParentData = ParentDataTypeL().as(child.parentData);
        if (dart.equals(childParentData.previousSibling, after)) return;
        this[_removeFromChildList](child);
        this[_insertIntoChildList](child, {after: after});
        this.markNeedsLayout();
      }
      attach(owner) {
        PipelineOwnerL().as(owner);
        super.attach(owner);
        let child = this[_firstChild$];
        while (child != null) {
          child.attach(owner);
          let childParentData = ParentDataTypeL().as(child.parentData);
          child = childParentData.nextSibling;
        }
      }
      detach() {
        super.detach();
        let child = this[_firstChild$];
        while (child != null) {
          child.detach();
          let childParentData = ParentDataTypeL().as(child.parentData);
          child = childParentData.nextSibling;
        }
      }
      redepthChildren() {
        let child = this[_firstChild$];
        while (child != null) {
          this.redepthChild(child);
          let childParentData = ParentDataTypeL().as(child.parentData);
          child = childParentData.nextSibling;
        }
      }
      visitChildren(visitor) {
        let child = this[_firstChild$];
        while (child != null) {
          visitor(child);
          let childParentData = ParentDataTypeL().as(child.parentData);
          child = childParentData.nextSibling;
        }
      }
      get firstChild() {
        return this[_firstChild$];
      }
      get lastChild() {
        return this[_lastChild$];
      }
      childBefore(child) {
        ChildTypeL().as(child);
        if (!(child != null)) dart.assertFailed(null, L4, 3320, 12, "child != null");
        if (!dart.equals(child.parent, this)) dart.assertFailed(null, L4, 3321, 12, "child.parent == this");
        let childParentData = ParentDataTypeL().as(child.parentData);
        return childParentData.previousSibling;
      }
      childAfter(child) {
        ChildTypeL().as(child);
        if (!(child != null)) dart.assertFailed(null, L4, 3328, 12, "child != null");
        if (!dart.equals(child.parent, this)) dart.assertFailed(null, L4, 3329, 12, "child.parent == this");
        let childParentData = ParentDataTypeL().as(child.parentData);
        return childParentData.nextSibling;
      }
      debugDescribeChildren() {
        let children = JSArrayOfDiagnosticsNodeL().of([]);
        if (this.firstChild != null) {
          let child = this.firstChild;
          let count = 1;
          while (true) {
            children[$add](child.toDiagnosticsNode({name: "child " + dart.str(count)}));
            if (dart.equals(child, this.lastChild)) break;
            count = count + 1;
            let childParentData = ParentDataTypeL().as(child.parentData);
            child = childParentData.nextSibling;
          }
        }
        return children;
      }
    };
    (ContainerRenderObjectMixin[dart.mixinNew] = function() {
      this[_childCount] = 0;
      this[_firstChild$] = null;
      this[_lastChild$] = null;
    }).prototype = ContainerRenderObjectMixin.prototype;
    dart.addTypeTests(ContainerRenderObjectMixin);
    ContainerRenderObjectMixin.prototype[_is_ContainerRenderObjectMixin_default] = true;
    dart.addTypeCaches(ContainerRenderObjectMixin);
    ContainerRenderObjectMixin[dart.implements] = () => [object$.RenderObject];
    dart.setMethodSignature(ContainerRenderObjectMixin, () => ({
      __proto__: dart.getMethods(ContainerRenderObjectMixin.__proto__),
      [_debugUltimatePreviousSiblingOf$]: dart.fnType(dart.legacy(core.bool), [dart.legacy(ChildType)], {equals: dart.legacy(ChildType)}, {}),
      [_debugUltimateNextSiblingOf$]: dart.fnType(dart.legacy(core.bool), [dart.legacy(ChildType)], {equals: dart.legacy(ChildType)}, {}),
      debugValidateChild: dart.fnType(dart.legacy(core.bool), [dart.legacy(object$.RenderObject)]),
      [_insertIntoChildList]: dart.fnType(dart.void, [dart.legacy(ChildType)], {after: dart.legacy(ChildType)}, {}),
      insert: dart.fnType(dart.void, [dart.legacy(core.Object)], {after: dart.legacy(core.Object)}, {}),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_removeFromChildList]: dart.fnType(dart.void, [dart.legacy(ChildType)]),
      remove: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, []),
      move: dart.fnType(dart.void, [dart.legacy(core.Object)], {after: dart.legacy(core.Object)}, {}),
      childBefore: dart.fnType(dart.legacy(ChildType), [dart.legacy(core.Object)]),
      childAfter: dart.fnType(dart.legacy(ChildType), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(ContainerRenderObjectMixin, () => ({
      __proto__: dart.getGetters(ContainerRenderObjectMixin.__proto__),
      childCount: dart.legacy(core.int),
      firstChild: dart.legacy(ChildType),
      lastChild: dart.legacy(ChildType)
    }));
    dart.setLibraryUri(ContainerRenderObjectMixin, L5);
    dart.setFieldSignature(ContainerRenderObjectMixin, () => ({
      __proto__: dart.getFields(ContainerRenderObjectMixin.__proto__),
      [_childCount]: dart.fieldType(dart.legacy(core.int)),
      [_firstChild$]: dart.fieldType(dart.legacy(ChildType)),
      [_lastChild$]: dart.fieldType(dart.legacy(ChildType))
    }));
    return ContainerRenderObjectMixin;
  });
  object$.ContainerRenderObjectMixin = object$.ContainerRenderObjectMixin$();
  dart.addTypeTests(object$.ContainerRenderObjectMixin, _is_ContainerRenderObjectMixin_default);
  object$.RelayoutWhenSystemFontsChangeMixin = class RelayoutWhenSystemFontsChangeMixin extends object$.RenderObject {};
  object$.RelayoutWhenSystemFontsChangeMixin[dart.mixinOn] = RenderObject => class RelayoutWhenSystemFontsChangeMixin extends RenderObject {
    systemFontsDidChange() {
      this.markNeedsLayout();
    }
    attach(owner) {
      PipelineOwnerL().as(owner);
      super.attach(owner);
      binding$3.PaintingBinding.instance.systemFonts.addListener(dart.bind(this, 'systemFontsDidChange'));
    }
    detach() {
      binding$3.PaintingBinding.instance.systemFonts.removeListener(dart.bind(this, 'systemFontsDidChange'));
      super.detach();
    }
  };
  dart.addTypeTests(object$.RelayoutWhenSystemFontsChangeMixin);
  dart.addTypeCaches(object$.RelayoutWhenSystemFontsChangeMixin);
  object$.RelayoutWhenSystemFontsChangeMixin[dart.implements] = () => [object$.RenderObject];
  dart.setMethodSignature(object$.RelayoutWhenSystemFontsChangeMixin, () => ({
    __proto__: dart.getMethods(object$.RelayoutWhenSystemFontsChangeMixin.__proto__),
    systemFontsDidChange: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(object$.RelayoutWhenSystemFontsChangeMixin, L5);
  var renderObject$ = dart.privateName(object$, "FlutterErrorDetailsForRendering.renderObject");
  object$.FlutterErrorDetailsForRendering = class FlutterErrorDetailsForRendering extends assertions.FlutterErrorDetails {
    get renderObject() {
      return this[renderObject$];
    }
    set renderObject(value) {
      super.renderObject = value;
    }
  };
  (object$.FlutterErrorDetailsForRendering.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let renderObject = opts && 'renderObject' in opts ? opts.renderObject : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[renderObject$] = renderObject;
    object$.FlutterErrorDetailsForRendering.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = object$.FlutterErrorDetailsForRendering.prototype;
  dart.addTypeTests(object$.FlutterErrorDetailsForRendering);
  dart.addTypeCaches(object$.FlutterErrorDetailsForRendering);
  dart.setLibraryUri(object$.FlutterErrorDetailsForRendering, L5);
  dart.setFieldSignature(object$.FlutterErrorDetailsForRendering, () => ({
    __proto__: dart.getFields(object$.FlutterErrorDetailsForRendering.__proto__),
    renderObject: dart.finalFieldType(dart.legacy(object$.RenderObject))
  }));
  object$._SemanticsFragment = class _SemanticsFragment extends core.Object {
    get abortsWalk() {
      return false;
    }
  };
  (object$._SemanticsFragment.new = function(opts) {
    let dropsSemanticsOfPreviousSiblings = opts && 'dropsSemanticsOfPreviousSiblings' in opts ? opts.dropsSemanticsOfPreviousSiblings : null;
    this.dropsSemanticsOfPreviousSiblings = dropsSemanticsOfPreviousSiblings;
    if (!(dropsSemanticsOfPreviousSiblings != null)) dart.assertFailed(null, L4, 3426, 15, "dropsSemanticsOfPreviousSiblings != null");
    ;
  }).prototype = object$._SemanticsFragment.prototype;
  dart.addTypeTests(object$._SemanticsFragment);
  dart.addTypeCaches(object$._SemanticsFragment);
  dart.setGetterSignature(object$._SemanticsFragment, () => ({
    __proto__: dart.getGetters(object$._SemanticsFragment.__proto__),
    abortsWalk: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(object$._SemanticsFragment, L5);
  dart.setFieldSignature(object$._SemanticsFragment, () => ({
    __proto__: dart.getFields(object$._SemanticsFragment.__proto__),
    dropsSemanticsOfPreviousSiblings: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var interestingFragments = dart.privateName(object$, "_ContainerSemanticsFragment.interestingFragments");
  object$._ContainerSemanticsFragment = class _ContainerSemanticsFragment extends object$._SemanticsFragment {
    get interestingFragments() {
      return this[interestingFragments];
    }
    set interestingFragments(value) {
      super.interestingFragments = value;
    }
    addAll(fragments) {
      this.interestingFragments[$addAll](fragments);
    }
  };
  (object$._ContainerSemanticsFragment.new = function(opts) {
    let dropsSemanticsOfPreviousSiblings = opts && 'dropsSemanticsOfPreviousSiblings' in opts ? opts.dropsSemanticsOfPreviousSiblings : null;
    this[interestingFragments] = JSArrayOf_InterestingSemanticsFragmentL().of([]);
    object$._ContainerSemanticsFragment.__proto__.new.call(this, {dropsSemanticsOfPreviousSiblings: dropsSemanticsOfPreviousSiblings});
    ;
  }).prototype = object$._ContainerSemanticsFragment.prototype;
  dart.addTypeTests(object$._ContainerSemanticsFragment);
  dart.addTypeCaches(object$._ContainerSemanticsFragment);
  dart.setMethodSignature(object$._ContainerSemanticsFragment, () => ({
    __proto__: dart.getMethods(object$._ContainerSemanticsFragment.__proto__),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(object$._InterestingSemanticsFragment)))])
  }));
  dart.setLibraryUri(object$._ContainerSemanticsFragment, L5);
  dart.setFieldSignature(object$._ContainerSemanticsFragment, () => ({
    __proto__: dart.getFields(object$._ContainerSemanticsFragment.__proto__),
    interestingFragments: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(object$._InterestingSemanticsFragment))))
  }));
  var _tagsForChildren = dart.privateName(object$, "_tagsForChildren");
  var _ancestorChain = dart.privateName(object$, "_ancestorChain");
  object$._InterestingSemanticsFragment = class _InterestingSemanticsFragment extends object$._SemanticsFragment {
    get owner() {
      return this[_ancestorChain][$first];
    }
    get hasConfigForParent() {
      return this.config != null;
    }
    get interestingFragments() {
      return new (SyncIterableOf_InterestingSemanticsFragmentL()).new((function* interestingFragments() {
        yield this;
      }).bind(this));
    }
    addTags(tags) {
      if (tags == null || dart.test(tags[$isEmpty])) return;
      this[_tagsForChildren] == null ? this[_tagsForChildren] = LinkedHashSetOfSemanticsTagL().new() : null;
      this[_tagsForChildren].addAll(tags);
    }
    addAncestor(ancestor) {
      this[_ancestorChain][$add](ancestor);
    }
  };
  (object$._InterestingSemanticsFragment.new = function(opts) {
    let owner = opts && 'owner' in opts ? opts.owner : null;
    let dropsSemanticsOfPreviousSiblings = opts && 'dropsSemanticsOfPreviousSiblings' in opts ? opts.dropsSemanticsOfPreviousSiblings : null;
    this[_tagsForChildren] = null;
    if (!(owner != null)) dart.assertFailed(null, L4, 3485, 15, "owner != null");
    this[_ancestorChain] = JSArrayOfRenderObjectL().of([owner]);
    object$._InterestingSemanticsFragment.__proto__.new.call(this, {dropsSemanticsOfPreviousSiblings: dropsSemanticsOfPreviousSiblings});
    ;
  }).prototype = object$._InterestingSemanticsFragment.prototype;
  dart.addTypeTests(object$._InterestingSemanticsFragment);
  dart.addTypeCaches(object$._InterestingSemanticsFragment);
  dart.setMethodSignature(object$._InterestingSemanticsFragment, () => ({
    __proto__: dart.getMethods(object$._InterestingSemanticsFragment.__proto__),
    addTags: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(semantics.SemanticsTag)))]),
    addAncestor: dart.fnType(dart.void, [dart.legacy(object$.RenderObject)])
  }));
  dart.setGetterSignature(object$._InterestingSemanticsFragment, () => ({
    __proto__: dart.getGetters(object$._InterestingSemanticsFragment.__proto__),
    owner: dart.legacy(object$.RenderObject),
    hasConfigForParent: dart.legacy(core.bool),
    interestingFragments: dart.legacy(core.Iterable$(dart.legacy(object$._InterestingSemanticsFragment)))
  }));
  dart.setLibraryUri(object$._InterestingSemanticsFragment, L5);
  dart.setFieldSignature(object$._InterestingSemanticsFragment, () => ({
    __proto__: dart.getFields(object$._InterestingSemanticsFragment.__proto__),
    [_ancestorChain]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(object$.RenderObject)))),
    [_tagsForChildren]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(semantics.SemanticsTag))))
  }));
  var _children = dart.privateName(object$, "_children");
  object$._RootSemanticsFragment = class _RootSemanticsFragment extends object$._InterestingSemanticsFragment {
    compileChildren(opts) {
      let parentSemanticsClipRect = opts && 'parentSemanticsClipRect' in opts ? opts.parentSemanticsClipRect : null;
      let parentPaintClipRect = opts && 'parentPaintClipRect' in opts ? opts.parentPaintClipRect : null;
      let elevationAdjustment = opts && 'elevationAdjustment' in opts ? opts.elevationAdjustment : null;
      return new (SyncIterableOfSemanticsNodeL()).new((function* compileChildren() {
        let t8;
        if (!(this[_tagsForChildren] == null || dart.test(this[_tagsForChildren][$isEmpty]))) dart.assertFailed(null, L4, 3578, 12, "_tagsForChildren == null || _tagsForChildren.isEmpty");
        if (!(parentSemanticsClipRect == null)) dart.assertFailed(null, L4, 3579, 12, "parentSemanticsClipRect == null");
        if (!(parentPaintClipRect == null)) dart.assertFailed(null, L4, 3580, 12, "parentPaintClipRect == null");
        if (!(this[_ancestorChain][$length] === 1)) dart.assertFailed(null, L4, 3581, 12, "_ancestorChain.length == 1");
        if (!(elevationAdjustment === 0.0)) dart.assertFailed(null, L4, 3582, 12, "elevationAdjustment == 0.0");
        t8 = this.owner;
        t8[_semantics] == null ? t8[_semantics] = new semantics.SemanticsNode.root({showOnScreen: dart.bind(this.owner, 'showOnScreen'), owner: this.owner.owner.semanticsOwner}) : null;
        let node = this.owner[_semantics];
        if (!dart.test(matrix_utils.MatrixUtils.matrixEquals(node.transform, vector_math_64.Matrix4.identity()))) dart.assertFailed(null, L4, 3589, 12, "MatrixUtils.matrixEquals(node.transform, Matrix4.identity())");
        if (!(node.parentSemanticsClipRect == null)) dart.assertFailed(null, L4, 3590, 12, "node.parentSemanticsClipRect == null");
        if (!(node.parentPaintClipRect == null)) dart.assertFailed(null, L4, 3591, 12, "node.parentPaintClipRect == null");
        node.rect = this.owner.semanticBounds;
        let children = this[_children][$expand](SemanticsNodeL(), dart.fn(fragment => {
          if (!(fragment.config == null)) dart.assertFailed(null, L4, 3597, 16, "fragment.config == null");
          return fragment.compileChildren({parentSemanticsClipRect: parentSemanticsClipRect, parentPaintClipRect: parentPaintClipRect, elevationAdjustment: 0.0});
        }, _InterestingSemanticsFragmentLToIterableLOfSemanticsNodeL()))[$toList]();
        node.updateWith({config: null, childrenInInversePaintOrder: children});
        if (!(!dart.test(node.isInvisible) || dart.test(children[$isEmpty]))) dart.assertFailed(null, L4, 3612, 12, "!node.isInvisible || children.isEmpty");
        yield node;
      }).bind(this));
    }
    get config() {
      return null;
    }
    markAsExplicit() {
    }
    addAll(fragments) {
      this[_children][$addAll](fragments);
    }
  };
  (object$._RootSemanticsFragment.new = function(opts) {
    let owner = opts && 'owner' in opts ? opts.owner : null;
    let dropsSemanticsOfPreviousSiblings = opts && 'dropsSemanticsOfPreviousSiblings' in opts ? opts.dropsSemanticsOfPreviousSiblings : null;
    this[_children] = JSArrayOf_InterestingSemanticsFragmentL().of([]);
    object$._RootSemanticsFragment.__proto__.new.call(this, {owner: owner, dropsSemanticsOfPreviousSiblings: dropsSemanticsOfPreviousSiblings});
    ;
  }).prototype = object$._RootSemanticsFragment.prototype;
  dart.addTypeTests(object$._RootSemanticsFragment);
  dart.addTypeCaches(object$._RootSemanticsFragment);
  dart.setMethodSignature(object$._RootSemanticsFragment, () => ({
    __proto__: dart.getMethods(object$._RootSemanticsFragment.__proto__),
    compileChildren: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(semantics.SemanticsNode))), [], {elevationAdjustment: dart.legacy(core.double), parentPaintClipRect: dart.legacy(ui.Rect), parentSemanticsClipRect: dart.legacy(ui.Rect)}, {}),
    markAsExplicit: dart.fnType(dart.void, []),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(object$._InterestingSemanticsFragment)))])
  }));
  dart.setGetterSignature(object$._RootSemanticsFragment, () => ({
    __proto__: dart.getGetters(object$._RootSemanticsFragment.__proto__),
    config: dart.legacy(semantics.SemanticsConfiguration)
  }));
  dart.setLibraryUri(object$._RootSemanticsFragment, L5);
  dart.setFieldSignature(object$._RootSemanticsFragment, () => ({
    __proto__: dart.getFields(object$._RootSemanticsFragment.__proto__),
    [_children]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(object$._InterestingSemanticsFragment))))
  }));
  var _isConfigWritable = dart.privateName(object$, "_isConfigWritable");
  var _isExplicit = dart.privateName(object$, "_isExplicit");
  var _mergeIntoParent = dart.privateName(object$, "_mergeIntoParent");
  var _config = dart.privateName(object$, "_config");
  var _needsGeometryUpdate = dart.privateName(object$, "_needsGeometryUpdate");
  var _ensureConfigIsWritable = dart.privateName(object$, "_ensureConfigIsWritable");
  object$._SwitchableSemanticsFragment = class _SwitchableSemanticsFragment extends object$._InterestingSemanticsFragment {
    compileChildren(opts) {
      let parentSemanticsClipRect = opts && 'parentSemanticsClipRect' in opts ? opts.parentSemanticsClipRect : null;
      let parentPaintClipRect = opts && 'parentPaintClipRect' in opts ? opts.parentPaintClipRect : null;
      let elevationAdjustment = opts && 'elevationAdjustment' in opts ? opts.elevationAdjustment : null;
      return new (SyncIterableOfSemanticsNodeL()).new((function* compileChildren() {
        let t8, t8$, t8$0, t8$1, t8$2;
        if (!dart.test(this[_isExplicit])) {
          this.owner[_semantics] = null;
          for (let fragment of this[_children]) {
            if (!dart.equals(this[_ancestorChain][$first], fragment[_ancestorChain][$last])) dart.assertFailed(null, L4, 3672, 16, "_ancestorChain.first == fragment._ancestorChain.last");
            fragment[_ancestorChain][$addAll](this[_ancestorChain][$sublist](1));
            yield* fragment.compileChildren({parentSemanticsClipRect: parentSemanticsClipRect, parentPaintClipRect: parentPaintClipRect, elevationAdjustment: dart.notNull(elevationAdjustment) + dart.notNull(this[_config].elevation)});
          }
          return;
        }
        let geometry = dart.test(this[_needsGeometryUpdate]) ? new object$._SemanticsGeometry.new({parentSemanticsClipRect: parentSemanticsClipRect, parentPaintClipRect: parentPaintClipRect, ancestors: this[_ancestorChain]}) : null;
        if (!dart.test(this[_mergeIntoParent]) && dart.equals((t8 = geometry, t8 == null ? null : t8.dropFromTree), true)) return;
        t8$ = this.owner;
        t8$[_semantics] == null ? t8$[_semantics] = new semantics.SemanticsNode.new({showOnScreen: dart.bind(this.owner, 'showOnScreen')}) : null;
        let node = (t8$0 = this.owner[_semantics], (() => {
          t8$0.isMergedIntoParent = this[_mergeIntoParent];
          t8$0.tags = this[_tagsForChildren];
          return t8$0;
        })());
        node.elevationAdjustment = elevationAdjustment;
        if (elevationAdjustment !== 0.0) {
          this[_ensureConfigIsWritable]();
          t8$1 = this[_config];
          t8$1.elevation = dart.notNull(t8$1.elevation) + dart.notNull(elevationAdjustment);
        }
        if (geometry != null) {
          if (!dart.test(this[_needsGeometryUpdate])) dart.assertFailed(null, L4, 3705, 14, "_needsGeometryUpdate");
          t8$2 = node;
          (() => {
            t8$2.rect = geometry.rect;
            t8$2.transform = geometry.transform;
            t8$2.parentSemanticsClipRect = geometry.semanticsClipRect;
            t8$2.parentPaintClipRect = geometry.paintClipRect;
            return t8$2;
          })();
          if (!dart.test(this[_mergeIntoParent]) && dart.test(geometry.markAsHidden)) {
            this[_ensureConfigIsWritable]();
            this[_config].isHidden = true;
          }
        }
        let children = this[_children][$expand](SemanticsNodeL(), dart.fn(fragment => fragment.compileChildren({parentSemanticsClipRect: node.parentSemanticsClipRect, parentPaintClipRect: node.parentPaintClipRect, elevationAdjustment: 0.0}), _InterestingSemanticsFragmentLToIterableLOfSemanticsNodeL()))[$toList]();
        if (dart.test(this[_config].isSemanticBoundary)) {
          this.owner.assembleSemanticsNode(node, this[_config], children);
        } else {
          node.updateWith({config: this[_config], childrenInInversePaintOrder: children});
        }
        yield node;
      }).bind(this));
    }
    get config() {
      return dart.test(this[_isExplicit]) ? null : this[_config];
    }
    addAll(fragments) {
      for (let fragment of fragments) {
        this[_children][$add](fragment);
        if (fragment.config == null) continue;
        this[_ensureConfigIsWritable]();
        this[_config].absorb(fragment.config);
      }
    }
    [_ensureConfigIsWritable]() {
      if (!dart.test(this[_isConfigWritable])) {
        this[_config] = this[_config].copy();
        this[_isConfigWritable] = true;
      }
    }
    markAsExplicit() {
      this[_isExplicit] = true;
    }
    get [_needsGeometryUpdate]() {
      return dart.notNull(this[_ancestorChain][$length]) > 1;
    }
  };
  (object$._SwitchableSemanticsFragment.new = function(opts) {
    let mergeIntoParent = opts && 'mergeIntoParent' in opts ? opts.mergeIntoParent : null;
    let config = opts && 'config' in opts ? opts.config : null;
    let owner = opts && 'owner' in opts ? opts.owner : null;
    let dropsSemanticsOfPreviousSiblings = opts && 'dropsSemanticsOfPreviousSiblings' in opts ? opts.dropsSemanticsOfPreviousSiblings : null;
    this[_isConfigWritable] = false;
    this[_children] = JSArrayOf_InterestingSemanticsFragmentL().of([]);
    this[_isExplicit] = false;
    this[_mergeIntoParent] = mergeIntoParent;
    this[_config] = config;
    if (!(mergeIntoParent != null)) dart.assertFailed(null, L4, 3658, 15, "mergeIntoParent != null");
    if (!(config != null)) dart.assertFailed(null, L4, 3659, 15, "config != null");
    object$._SwitchableSemanticsFragment.__proto__.new.call(this, {owner: owner, dropsSemanticsOfPreviousSiblings: dropsSemanticsOfPreviousSiblings});
    ;
  }).prototype = object$._SwitchableSemanticsFragment.prototype;
  dart.addTypeTests(object$._SwitchableSemanticsFragment);
  dart.addTypeCaches(object$._SwitchableSemanticsFragment);
  dart.setMethodSignature(object$._SwitchableSemanticsFragment, () => ({
    __proto__: dart.getMethods(object$._SwitchableSemanticsFragment.__proto__),
    compileChildren: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(semantics.SemanticsNode))), [], {elevationAdjustment: dart.legacy(core.double), parentPaintClipRect: dart.legacy(ui.Rect), parentSemanticsClipRect: dart.legacy(ui.Rect)}, {}),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(object$._InterestingSemanticsFragment)))]),
    [_ensureConfigIsWritable]: dart.fnType(dart.void, []),
    markAsExplicit: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(object$._SwitchableSemanticsFragment, () => ({
    __proto__: dart.getGetters(object$._SwitchableSemanticsFragment.__proto__),
    config: dart.legacy(semantics.SemanticsConfiguration),
    [_needsGeometryUpdate]: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(object$._SwitchableSemanticsFragment, L5);
  dart.setFieldSignature(object$._SwitchableSemanticsFragment, () => ({
    __proto__: dart.getFields(object$._SwitchableSemanticsFragment.__proto__),
    [_mergeIntoParent]: dart.finalFieldType(dart.legacy(core.bool)),
    [_config]: dart.fieldType(dart.legacy(semantics.SemanticsConfiguration)),
    [_isConfigWritable]: dart.fieldType(dart.legacy(core.bool)),
    [_children]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(object$._InterestingSemanticsFragment)))),
    [_isExplicit]: dart.fieldType(dart.legacy(core.bool))
  }));
  object$._AbortingSemanticsFragment = class _AbortingSemanticsFragment extends object$._InterestingSemanticsFragment {
    get abortsWalk() {
      return true;
    }
    get config() {
      return null;
    }
    addAll(fragments) {
      if (!false) dart.assertFailed(null, L4, 3786, 12, "false");
    }
    compileChildren(opts) {
      let parentSemanticsClipRect = opts && 'parentSemanticsClipRect' in opts ? opts.parentSemanticsClipRect : null;
      let parentPaintClipRect = opts && 'parentPaintClipRect' in opts ? opts.parentPaintClipRect : null;
      let elevationAdjustment = opts && 'elevationAdjustment' in opts ? opts.elevationAdjustment : null;
      return new (SyncIterableOfSemanticsNodeL()).new((function* compileChildren() {
        yield this.owner[_semantics];
      }).bind(this));
    }
    markAsExplicit() {
    }
  };
  (object$._AbortingSemanticsFragment.new = function(opts) {
    let owner = opts && 'owner' in opts ? opts.owner : null;
    object$._AbortingSemanticsFragment.__proto__.new.call(this, {owner: owner, dropsSemanticsOfPreviousSiblings: false});
    ;
  }).prototype = object$._AbortingSemanticsFragment.prototype;
  dart.addTypeTests(object$._AbortingSemanticsFragment);
  dart.addTypeCaches(object$._AbortingSemanticsFragment);
  dart.setMethodSignature(object$._AbortingSemanticsFragment, () => ({
    __proto__: dart.getMethods(object$._AbortingSemanticsFragment.__proto__),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(object$._InterestingSemanticsFragment)))]),
    compileChildren: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(semantics.SemanticsNode))), [], {elevationAdjustment: dart.legacy(core.double), parentPaintClipRect: dart.legacy(ui.Rect), parentSemanticsClipRect: dart.legacy(ui.Rect)}, {}),
    markAsExplicit: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(object$._AbortingSemanticsFragment, () => ({
    __proto__: dart.getGetters(object$._AbortingSemanticsFragment.__proto__),
    config: dart.legacy(semantics.SemanticsConfiguration)
  }));
  dart.setLibraryUri(object$._AbortingSemanticsFragment, L5);
  var _paintClipRect = dart.privateName(object$, "_paintClipRect");
  var _semanticsClipRect = dart.privateName(object$, "_semanticsClipRect");
  var _transform$ = dart.privateName(object$, "_transform");
  var _rect = dart.privateName(object$, "_rect");
  var _markAsHidden = dart.privateName(object$, "_markAsHidden");
  var _computeValues = dart.privateName(object$, "_computeValues");
  object$._SemanticsGeometry = class _SemanticsGeometry extends core.Object {
    get transform() {
      return this[_transform$];
    }
    get semanticsClipRect() {
      return this[_semanticsClipRect];
    }
    get paintClipRect() {
      return this[_paintClipRect];
    }
    get rect() {
      return this[_rect];
    }
    [_computeValues](parentSemanticsClipRect, parentPaintClipRect, ancestors) {
      if (!(dart.notNull(ancestors[$length]) > 1)) dart.assertFailed(null, L4, 3838, 12, "ancestors.length > 1");
      this[_transform$] = vector_math_64.Matrix4.identity();
      this[_semanticsClipRect] = parentSemanticsClipRect;
      this[_paintClipRect] = parentPaintClipRect;
      for (let index = dart.notNull(ancestors[$length]) - 1; index > 0; index = index - 1) {
        let parent = ancestors[$_get](index);
        let child = ancestors[$_get](index - 1);
        let parentSemanticsClipRect = parent.describeSemanticsClip(child);
        if (parentSemanticsClipRect != null) {
          this[_semanticsClipRect] = parentSemanticsClipRect;
          this[_paintClipRect] = object$._SemanticsGeometry._intersectRects(this[_paintClipRect], parent.describeApproximatePaintClip(child));
        } else {
          this[_semanticsClipRect] = object$._SemanticsGeometry._intersectRects(this[_semanticsClipRect], parent.describeApproximatePaintClip(child));
        }
        object$._SemanticsGeometry._temporaryTransformHolder.setIdentity();
        object$._SemanticsGeometry._applyIntermediatePaintTransforms(parent, child, this[_transform$], object$._SemanticsGeometry._temporaryTransformHolder);
        this[_semanticsClipRect] = object$._SemanticsGeometry._transformRect(this[_semanticsClipRect], object$._SemanticsGeometry._temporaryTransformHolder);
        this[_paintClipRect] = object$._SemanticsGeometry._transformRect(this[_paintClipRect], object$._SemanticsGeometry._temporaryTransformHolder);
      }
      let owner = ancestors[$first];
      this[_rect] = this[_semanticsClipRect] == null ? owner.semanticBounds : this[_semanticsClipRect].intersect(owner.semanticBounds);
      if (this[_paintClipRect] != null) {
        let paintRect = this[_paintClipRect].intersect(this[_rect]);
        this[_markAsHidden] = dart.test(paintRect.isEmpty) && !dart.test(this[_rect].isEmpty);
        if (!dart.test(this[_markAsHidden])) this[_rect] = paintRect;
      }
    }
    static _transformRect(rect, transform) {
      if (!(transform != null)) dart.assertFailed(null, L4, 3880, 12, "transform != null");
      if (rect == null) return null;
      if (dart.test(rect.isEmpty) || dart.test(transform.isZero())) return ui.Rect.zero;
      return matrix_utils.MatrixUtils.inverseTransformRect(transform, rect);
    }
    static _applyIntermediatePaintTransforms(ancestor, child, transform, clipRectTransform) {
      if (!(ancestor != null)) dart.assertFailed(null, L4, 3899, 12, "ancestor != null");
      if (!(child != null)) dart.assertFailed(null, L4, 3900, 12, "child != null");
      if (!(transform != null)) dart.assertFailed(null, L4, 3901, 12, "transform != null");
      if (!(clipRectTransform != null)) dart.assertFailed(null, L4, 3902, 12, "clipRectTransform != null");
      if (!dart.test(clipRectTransform.isIdentity())) dart.assertFailed(null, L4, 3903, 12, "clipRectTransform.isIdentity()");
      let intermediateParent = RenderObjectL().as(child.parent);
      if (!(intermediateParent != null)) dart.assertFailed(null, L4, 3905, 12, "intermediateParent != null");
      while (!dart.equals(intermediateParent, ancestor)) {
        intermediateParent.applyPaintTransform(child, transform);
        intermediateParent = RenderObjectL().as(intermediateParent.parent);
        child = RenderObjectL().as(child.parent);
        if (!(intermediateParent != null)) dart.assertFailed(null, L4, 3910, 14, "intermediateParent != null");
      }
      ancestor.applyPaintTransform(child, transform);
      ancestor.applyPaintTransform(child, clipRectTransform);
    }
    static _intersectRects(a, b) {
      if (a == null) return b;
      if (b == null) return a;
      return a.intersect(b);
    }
    get dropFromTree() {
      return this[_rect].isEmpty;
    }
    get markAsHidden() {
      return this[_markAsHidden];
    }
  };
  (object$._SemanticsGeometry.new = function(opts) {
    let parentSemanticsClipRect = opts && 'parentSemanticsClipRect' in opts ? opts.parentSemanticsClipRect : null;
    let parentPaintClipRect = opts && 'parentPaintClipRect' in opts ? opts.parentPaintClipRect : null;
    let ancestors = opts && 'ancestors' in opts ? opts.ancestors : null;
    this[_paintClipRect] = null;
    this[_semanticsClipRect] = null;
    this[_transform$] = null;
    this[_rect] = null;
    this[_markAsHidden] = false;
    this[_computeValues](parentSemanticsClipRect, parentPaintClipRect, ancestors);
  }).prototype = object$._SemanticsGeometry.prototype;
  dart.addTypeTests(object$._SemanticsGeometry);
  dart.addTypeCaches(object$._SemanticsGeometry);
  dart.setMethodSignature(object$._SemanticsGeometry, () => ({
    __proto__: dart.getMethods(object$._SemanticsGeometry.__proto__),
    [_computeValues]: dart.fnType(dart.void, [dart.legacy(ui.Rect), dart.legacy(ui.Rect), dart.legacy(core.List$(dart.legacy(object$.RenderObject)))])
  }));
  dart.setGetterSignature(object$._SemanticsGeometry, () => ({
    __proto__: dart.getGetters(object$._SemanticsGeometry.__proto__),
    transform: dart.legacy(vector_math_64.Matrix4),
    semanticsClipRect: dart.legacy(ui.Rect),
    paintClipRect: dart.legacy(ui.Rect),
    rect: dart.legacy(ui.Rect),
    dropFromTree: dart.legacy(core.bool),
    markAsHidden: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(object$._SemanticsGeometry, L5);
  dart.setFieldSignature(object$._SemanticsGeometry, () => ({
    __proto__: dart.getFields(object$._SemanticsGeometry.__proto__),
    [_paintClipRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_semanticsClipRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_transform$]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_rect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_markAsHidden]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(object$._SemanticsGeometry, {
    /*object$._SemanticsGeometry._temporaryTransformHolder*/get _temporaryTransformHolder() {
      return new vector_math_64.Matrix4.zero();
    }
  }, true);
  object$.DiagnosticsDebugCreator = class DiagnosticsDebugCreator extends diagnostics.DiagnosticsProperty$(dart.legacy(core.Object)) {};
  (object$.DiagnosticsDebugCreator.new = function(value) {
    if (!(value != null)) dart.assertFailed(null, L4, 3954, 14, "value != null");
    object$.DiagnosticsDebugCreator.__proto__.new.call(this, "debugCreator", value, {level: diagnostics.DiagnosticLevel.hidden});
    ;
  }).prototype = object$.DiagnosticsDebugCreator.prototype;
  dart.addTypeTests(object$.DiagnosticsDebugCreator);
  dart.addTypeCaches(object$.DiagnosticsDebugCreator);
  dart.setLibraryUri(object$.DiagnosticsDebugCreator, L5);
  var C62;
  var C63;
  var C64;
  debug$._debugDrawDoubleRect = function _debugDrawDoubleRect(canvas, outerRect, innerRect, color) {
    let t8, t8$;
    let path = (t8 = ui.Path.new(), (() => {
      t8.fillType = ui.PathFillType.evenOdd;
      t8.addRect(outerRect);
      t8.addRect(innerRect);
      return t8;
    })());
    let paint = (t8$ = ui.Paint.new(), (() => {
      t8$.color = color;
      return t8$;
    })());
    canvas.drawPath(path, paint);
  };
  debug$.debugPaintPadding = function debugPaintPadding(canvas, outerRect, innerRect, opts) {
    let outlineWidth = opts && 'outlineWidth' in opts ? opts.outlineWidth : 2;
    if (!dart.test(dart.fn(() => {
      let t8;
      if (innerRect != null && !dart.test(innerRect.isEmpty)) {
        debug$._debugDrawDoubleRect(canvas, outerRect, innerRect, C62 || CT.C62);
        debug$._debugDrawDoubleRect(canvas, innerRect.inflate(outlineWidth).intersect(outerRect), innerRect, C63 || CT.C63);
      } else {
        let paint = (t8 = ui.Paint.new(), (() => {
          t8.color = C64 || CT.C64;
          return t8;
        })());
        canvas.drawRect(outerRect, paint);
      }
      return true;
    }, VoidToboolL())())) dart.assertFailed(null, L14, 230, 10, "() {\r\n    if (innerRect != null && !innerRect.isEmpty) {\r\n      _debugDrawDoubleRect(canvas, outerRect, innerRect, const Color(0x900090FF));\r\n      _debugDrawDoubleRect(canvas, innerRect.inflate(outlineWidth).intersect(outerRect), innerRect, const Color(0xFF0090FF));\r\n    } else {\r\n      final Paint paint = Paint()\r\n        ..color = const Color(0x90909090);\r\n      canvas.drawRect(outerRect, paint);\r\n    }\r\n    return true;\r\n  }()");
  };
  debug$.debugAssertAllRenderVarsUnset = function debugAssertAllRenderVarsUnset(reason, opts) {
    let debugCheckIntrinsicSizesOverride = opts && 'debugCheckIntrinsicSizesOverride' in opts ? opts.debugCheckIntrinsicSizesOverride : false;
    if (!dart.test(dart.fn(() => {
      if (dart.test(debug$.debugPaintSizeEnabled) || dart.test(debug$.debugPaintBaselinesEnabled) || dart.test(debug$.debugPaintLayerBordersEnabled) || dart.test(debug$.debugPaintPointersEnabled) || dart.test(debug$.debugRepaintRainbowEnabled) || dart.test(debug$.debugRepaintTextRainbowEnabled) || !dart.equals(debug$.debugCurrentRepaintColor, debug$._kDebugDefaultRepaintColor) || dart.test(debug$.debugPrintMarkNeedsLayoutStacks) || dart.test(debug$.debugPrintMarkNeedsPaintStacks) || dart.test(debug$.debugPrintLayouts) || !dart.equals(debug$.debugCheckIntrinsicSizes, debugCheckIntrinsicSizesOverride) || dart.test(debug$.debugProfilePaintsEnabled) || debug$.debugOnProfilePaint != null) {
        dart.throw(assertions.FlutterError.new(reason));
      }
      return true;
    }, VoidToboolL())())) dart.assertFailed(null, L14, 255, 10, "() {\r\n    if (debugPaintSizeEnabled ||\r\n        debugPaintBaselinesEnabled ||\r\n        debugPaintLayerBordersEnabled ||\r\n        debugPaintPointersEnabled ||\r\n        debugRepaintRainbowEnabled ||\r\n        debugRepaintTextRainbowEnabled ||\r\n        debugCurrentRepaintColor != _kDebugDefaultRepaintColor ||\r\n        debugPrintMarkNeedsLayoutStacks ||\r\n        debugPrintMarkNeedsPaintStacks ||\r\n        debugPrintLayouts ||\r\n        debugCheckIntrinsicSizes != debugCheckIntrinsicSizesOverride ||\r\n        debugProfilePaintsEnabled ||\r\n        debugOnProfilePaint != null) {\r\n      throw FlutterError(reason);\r\n    }\r\n    return true;\r\n  }()");
    return true;
  };
  var HSVColor_value = dart.privateName(colors, "HSVColor.value");
  var HSVColor_saturation = dart.privateName(colors, "HSVColor.saturation");
  var HSVColor_hue = dart.privateName(colors, "HSVColor.hue");
  var HSVColor_alpha = dart.privateName(colors, "HSVColor.alpha");
  var C65;
  dart.defineLazy(debug$, {
    /*debug$._kDebugDefaultRepaintColor*/get _kDebugDefaultRepaintColor() {
      return C65 || CT.C65;
    },
    /*debug$.debugPaintSizeEnabled*/get debugPaintSizeEnabled() {
      return false;
    },
    set debugPaintSizeEnabled(_) {},
    /*debug$.debugPaintBaselinesEnabled*/get debugPaintBaselinesEnabled() {
      return false;
    },
    set debugPaintBaselinesEnabled(_) {},
    /*debug$.debugPaintLayerBordersEnabled*/get debugPaintLayerBordersEnabled() {
      return false;
    },
    set debugPaintLayerBordersEnabled(_) {},
    /*debug$.debugPaintPointersEnabled*/get debugPaintPointersEnabled() {
      return false;
    },
    set debugPaintPointersEnabled(_) {},
    /*debug$.debugRepaintRainbowEnabled*/get debugRepaintRainbowEnabled() {
      return false;
    },
    set debugRepaintRainbowEnabled(_) {},
    /*debug$.debugRepaintTextRainbowEnabled*/get debugRepaintTextRainbowEnabled() {
      return false;
    },
    set debugRepaintTextRainbowEnabled(_) {},
    /*debug$.debugCheckElevationsEnabled*/get debugCheckElevationsEnabled() {
      return false;
    },
    set debugCheckElevationsEnabled(_) {},
    /*debug$.debugCurrentRepaintColor*/get debugCurrentRepaintColor() {
      return debug$._kDebugDefaultRepaintColor;
    },
    set debugCurrentRepaintColor(_) {},
    /*debug$.debugPrintMarkNeedsLayoutStacks*/get debugPrintMarkNeedsLayoutStacks() {
      return false;
    },
    set debugPrintMarkNeedsLayoutStacks(_) {},
    /*debug$.debugPrintMarkNeedsPaintStacks*/get debugPrintMarkNeedsPaintStacks() {
      return false;
    },
    set debugPrintMarkNeedsPaintStacks(_) {},
    /*debug$.debugPrintLayouts*/get debugPrintLayouts() {
      return false;
    },
    set debugPrintLayouts(_) {},
    /*debug$.debugCheckIntrinsicSizes*/get debugCheckIntrinsicSizes() {
      return false;
    },
    set debugCheckIntrinsicSizes(_) {},
    /*debug$.debugProfilePaintsEnabled*/get debugProfilePaintsEnabled() {
      return false;
    },
    set debugProfilePaintsEnabled(_) {},
    /*debug$.debugOnProfilePaint*/get debugOnProfilePaint() {
      return null;
    },
    set debugOnProfilePaint(_) {},
    /*debug$.debugDisableClipLayers*/get debugDisableClipLayers() {
      return false;
    },
    set debugDisableClipLayers(_) {},
    /*debug$.debugDisablePhysicalShapeLayers*/get debugDisablePhysicalShapeLayers() {
      return false;
    },
    set debugDisablePhysicalShapeLayers(_) {},
    /*debug$.debugDisableOpacityLayers*/get debugDisableOpacityLayers() {
      return false;
    },
    set debugDisableOpacityLayers(_) {}
  }, true);
  box._DebugSize = class _DebugSize extends ui.Size {};
  (box._DebugSize.new = function(source, _owner, _canBeUsedByParent) {
    this[_owner$] = _owner;
    this[_canBeUsedByParent$] = _canBeUsedByParent;
    box._DebugSize.__proto__.copy.call(this, source);
    ;
  }).prototype = box._DebugSize.prototype;
  dart.addTypeTests(box._DebugSize);
  dart.addTypeCaches(box._DebugSize);
  dart.setLibraryUri(box._DebugSize, L7);
  dart.setFieldSignature(box._DebugSize, () => ({
    __proto__: dart.getFields(box._DebugSize.__proto__),
    [_owner$]: dart.finalFieldType(dart.legacy(box.RenderBox)),
    [_canBeUsedByParent$]: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var _debugPropagateDebugSize = dart.privateName(box, "_debugPropagateDebugSize");
  var minWidth$ = dart.privateName(box, "BoxConstraints.minWidth");
  var maxWidth$ = dart.privateName(box, "BoxConstraints.maxWidth");
  var minHeight$ = dart.privateName(box, "BoxConstraints.minHeight");
  var maxHeight$ = dart.privateName(box, "BoxConstraints.maxHeight");
  box.BoxConstraints = class BoxConstraints extends object$.Constraints {
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get maxHeight() {
      return this[maxHeight$];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    copyWith(opts) {
      let t8, t8$, t8$0, t8$1;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      return new box.BoxConstraints.new({minWidth: (t8 = minWidth, t8 == null ? this.minWidth : t8), maxWidth: (t8$ = maxWidth, t8$ == null ? this.maxWidth : t8$), minHeight: (t8$0 = minHeight, t8$0 == null ? this.minHeight : t8$0), maxHeight: (t8$1 = maxHeight, t8$1 == null ? this.maxHeight : t8$1)});
    }
    deflate(edges) {
      if (!(edges != null)) dart.assertFailed(null, L6, 189, 12, "edges != null");
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 190, 12, "debugAssertIsValid()");
      let horizontal = edges.horizontal;
      let vertical = edges.vertical;
      let deflatedMinWidth = math.max(doubleL(), 0.0, dart.notNull(this.minWidth) - dart.notNull(horizontal));
      let deflatedMinHeight = math.max(doubleL(), 0.0, dart.notNull(this.minHeight) - dart.notNull(vertical));
      return new box.BoxConstraints.new({minWidth: deflatedMinWidth, maxWidth: math.max(doubleL(), deflatedMinWidth, dart.notNull(this.maxWidth) - dart.notNull(horizontal)), minHeight: deflatedMinHeight, maxHeight: math.max(doubleL(), deflatedMinHeight, dart.notNull(this.maxHeight) - dart.notNull(vertical))});
    }
    loosen() {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 205, 12, "debugAssertIsValid()");
      return new box.BoxConstraints.new({minWidth: 0.0, maxWidth: this.maxWidth, minHeight: 0.0, maxHeight: this.maxHeight});
    }
    enforce(constraints) {
      return new box.BoxConstraints.new({minWidth: this.minWidth[$clamp](constraints.minWidth, constraints.maxWidth), maxWidth: this.maxWidth[$clamp](constraints.minWidth, constraints.maxWidth), minHeight: this.minHeight[$clamp](constraints.minHeight, constraints.maxHeight), maxHeight: this.maxHeight[$clamp](constraints.minHeight, constraints.maxHeight)});
    }
    tighten(opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new box.BoxConstraints.new({minWidth: width == null ? this.minWidth : width[$clamp](this.minWidth, this.maxWidth), maxWidth: width == null ? this.maxWidth : width[$clamp](this.minWidth, this.maxWidth), minHeight: height == null ? this.minHeight : height[$clamp](this.minHeight, this.maxHeight), maxHeight: height == null ? this.maxHeight : height[$clamp](this.minHeight, this.maxHeight)});
    }
    get flipped() {
      return new box.BoxConstraints.new({minWidth: this.minHeight, maxWidth: this.maxHeight, minHeight: this.minWidth, maxHeight: this.maxWidth});
    }
    widthConstraints() {
      return new box.BoxConstraints.new({minWidth: this.minWidth, maxWidth: this.maxWidth});
    }
    heightConstraints() {
      return new box.BoxConstraints.new({minHeight: this.minHeight, maxHeight: this.maxHeight});
    }
    constrainWidth(width = 1 / 0) {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 258, 12, "debugAssertIsValid()");
      return width[$clamp](this.minWidth, this.maxWidth);
    }
    constrainHeight(height = 1 / 0) {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 265, 12, "debugAssertIsValid()");
      return height[$clamp](this.minHeight, this.maxHeight);
    }
    [_debugPropagateDebugSize](size, result) {
      if (!dart.test(dart.fn(() => {
        if (_DebugSizeL().is(size)) result = new box._DebugSize.new(result, size[_owner$], size[_canBeUsedByParent$]);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 270, 12, "() {\r\n      if (size is _DebugSize)\r\n        result = _DebugSize(result, size._owner, size._canBeUsedByParent);\r\n      return true;\r\n    }()");
      return result;
    }
    constrain(size) {
      let result = new ui.Size.new(this.constrainWidth(size.width), this.constrainHeight(size.height));
      if (!dart.test(dart.fn(() => {
        result = this[_debugPropagateDebugSize](size, result);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 287, 12, "() {\r\n      result = _debugPropagateDebugSize(size, result);\r\n      return true;\r\n    }()");
      return result;
    }
    constrainDimensions(width, height) {
      return new ui.Size.new(this.constrainWidth(width), this.constrainHeight(height));
    }
    constrainSizeAndAttemptToPreserveAspectRatio(size) {
      if (dart.test(this.isTight)) {
        let result = this.smallest;
        if (!dart.test(dart.fn(() => {
          result = this[_debugPropagateDebugSize](size, result);
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L6, 313, 14, "() {\r\n        result = _debugPropagateDebugSize(size, result);\r\n        return true;\r\n      }()");
        return result;
      }
      let width = size.width;
      let height = size.height;
      if (!(dart.notNull(width) > 0.0)) dart.assertFailed(null, L6, 322, 12, "width > 0.0");
      if (!(dart.notNull(height) > 0.0)) dart.assertFailed(null, L6, 323, 12, "height > 0.0");
      let aspectRatio = dart.notNull(width) / dart.notNull(height);
      if (dart.notNull(width) > dart.notNull(this.maxWidth)) {
        width = this.maxWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) > dart.notNull(this.maxHeight)) {
        height = this.maxHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      if (dart.notNull(width) < dart.notNull(this.minWidth)) {
        width = this.minWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) < dart.notNull(this.minHeight)) {
        height = this.minHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      let result = new ui.Size.new(this.constrainWidth(width), this.constrainHeight(height));
      if (!dart.test(dart.fn(() => {
        result = this[_debugPropagateDebugSize](size, result);
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 347, 12, "() {\r\n      result = _debugPropagateDebugSize(size, result);\r\n      return true;\r\n    }()");
      return result;
    }
    get biggest() {
      return new ui.Size.new(this.constrainWidth(), this.constrainHeight());
    }
    get smallest() {
      return new ui.Size.new(this.constrainWidth(0.0), this.constrainHeight(0.0));
    }
    get hasTightWidth() {
      return dart.notNull(this.minWidth) >= dart.notNull(this.maxWidth);
    }
    get hasTightHeight() {
      return dart.notNull(this.minHeight) >= dart.notNull(this.maxHeight);
    }
    get isTight() {
      return dart.test(this.hasTightWidth) && dart.test(this.hasTightHeight);
    }
    get hasBoundedWidth() {
      return dart.notNull(this.maxWidth) < 1 / 0;
    }
    get hasBoundedHeight() {
      return dart.notNull(this.maxHeight) < 1 / 0;
    }
    get hasInfiniteWidth() {
      return dart.notNull(this.minWidth) >= 1 / 0;
    }
    get hasInfiniteHeight() {
      return dart.notNull(this.minHeight) >= 1 / 0;
    }
    isSatisfiedBy(size) {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 420, 12, "debugAssertIsValid()");
      return dart.notNull(this.minWidth) <= dart.notNull(size.width) && dart.notNull(size.width) <= dart.notNull(this.maxWidth) && dart.notNull(this.minHeight) <= dart.notNull(size.height) && dart.notNull(size.height) <= dart.notNull(this.maxHeight);
    }
    ['*'](factor) {
      return new box.BoxConstraints.new({minWidth: dart.notNull(this.minWidth) * dart.notNull(factor), maxWidth: dart.notNull(this.maxWidth) * dart.notNull(factor), minHeight: dart.notNull(this.minHeight) * dart.notNull(factor), maxHeight: dart.notNull(this.maxHeight) * dart.notNull(factor)});
    }
    ['/'](factor) {
      return new box.BoxConstraints.new({minWidth: dart.notNull(this.minWidth) / dart.notNull(factor), maxWidth: dart.notNull(this.maxWidth) / dart.notNull(factor), minHeight: dart.notNull(this.minHeight) / dart.notNull(factor), maxHeight: dart.notNull(this.maxHeight) / dart.notNull(factor)});
    }
    ['~/'](factor) {
      return new box.BoxConstraints.new({minWidth: (dart.notNull(this.minWidth) / dart.notNull(factor))[$truncate]()[$toDouble](), maxWidth: (dart.notNull(this.maxWidth) / dart.notNull(factor))[$truncate]()[$toDouble](), minHeight: (dart.notNull(this.minHeight) / dart.notNull(factor))[$truncate]()[$toDouble](), maxHeight: (dart.notNull(this.maxHeight) / dart.notNull(factor))[$truncate]()[$toDouble]()});
    }
    ['%'](value) {
      return new box.BoxConstraints.new({minWidth: this.minWidth[$modulo](value), maxWidth: this.maxWidth[$modulo](value), minHeight: this.minHeight[$modulo](value), maxHeight: this.maxHeight[$modulo](value)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, L6, 472, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      if (!dart.test(a.debugAssertIsValid())) dart.assertFailed(null, L6, 479, 12, "a.debugAssertIsValid()");
      if (!dart.test(b.debugAssertIsValid())) dart.assertFailed(null, L6, 480, 12, "b.debugAssertIsValid()");
      if (!(a.minWidth[$isFinite] && b.minWidth[$isFinite] || a.minWidth === 1 / 0 && b.minWidth === 1 / 0)) dart.assertFailed("Cannot interpolate between finite constraints and unbounded constraints.", L6, 481, 12, "(a.minWidth.isFinite && b.minWidth.isFinite) || (a.minWidth == double.infinity && b.minWidth == double.infinity)");
      if (!(a.maxWidth[$isFinite] && b.maxWidth[$isFinite] || a.maxWidth === 1 / 0 && b.maxWidth === 1 / 0)) dart.assertFailed("Cannot interpolate between finite constraints and unbounded constraints.", L6, 482, 12, "(a.maxWidth.isFinite && b.maxWidth.isFinite) || (a.maxWidth == double.infinity && b.maxWidth == double.infinity)");
      if (!(a.minHeight[$isFinite] && b.minHeight[$isFinite] || a.minHeight === 1 / 0 && b.minHeight === 1 / 0)) dart.assertFailed("Cannot interpolate between finite constraints and unbounded constraints.", L6, 483, 12, "(a.minHeight.isFinite && b.minHeight.isFinite) || (a.minHeight == double.infinity && b.minHeight == double.infinity)");
      if (!(a.maxHeight[$isFinite] && b.maxHeight[$isFinite] || a.maxHeight === 1 / 0 && b.maxHeight === 1 / 0)) dart.assertFailed("Cannot interpolate between finite constraints and unbounded constraints.", L6, 484, 12, "(a.maxHeight.isFinite && b.maxHeight.isFinite) || (a.maxHeight == double.infinity && b.maxHeight == double.infinity)");
      return new box.BoxConstraints.new({minWidth: a.minWidth[$isFinite] ? ui.lerpDouble(a.minWidth, b.minWidth, t) : 1 / 0, maxWidth: a.maxWidth[$isFinite] ? ui.lerpDouble(a.maxWidth, b.maxWidth, t) : 1 / 0, minHeight: a.minHeight[$isFinite] ? ui.lerpDouble(a.minHeight, b.minHeight, t) : 1 / 0, maxHeight: a.maxHeight[$isFinite] ? ui.lerpDouble(a.maxHeight, b.maxHeight, t) : 1 / 0});
    }
    get isNormalized() {
      return dart.notNull(this.minWidth) >= 0.0 && dart.notNull(this.minWidth) <= dart.notNull(this.maxWidth) && dart.notNull(this.minHeight) >= 0.0 && dart.notNull(this.minHeight) <= dart.notNull(this.maxHeight);
    }
    debugAssertIsValid(opts) {
      let isAppliedConstraint = opts && 'isAppliedConstraint' in opts ? opts.isAppliedConstraint : false;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      if (!dart.test(dart.fn(() => {
        const throwError = message => {
          dart.throw(new assertions.FlutterError.fromParts((() => {
            let t8 = JSArrayOfDiagnosticsNodeL().of([]);
            t8[$add](message);
            if (informationCollector != null) for (let t9 of informationCollector())
              t8[$add](t9);
            t8[$add](new (DiagnosticsPropertyOfBoxConstraintsL()).new("The offending constraints were", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}));
            return t8;
          })()));
        };
        dart.fn(throwError, DiagnosticsNodeLTovoid());
        if (this.minWidth[$isNaN] || this.maxWidth[$isNaN] || this.minHeight[$isNaN] || this.maxHeight[$isNaN]) {
          let affectedFieldsList = (() => {
            let t10 = JSArrayOfStringL().of([]);
            if (this.minWidth[$isNaN]) t10[$add]("minWidth");
            if (this.maxWidth[$isNaN]) t10[$add]("maxWidth");
            if (this.minHeight[$isNaN]) t10[$add]("minHeight");
            if (this.maxHeight[$isNaN]) t10[$add]("maxHeight");
            return t10;
          })();
          if (!dart.test(affectedFieldsList[$isNotEmpty])) dart.assertFailed(null, L6, 532, 16, "affectedFieldsList.isNotEmpty");
          if (dart.notNull(affectedFieldsList[$length]) > 1) affectedFieldsList[$add]("and " + dart.str(affectedFieldsList[$removeLast]()));
          let whichFields = "";
          if (dart.notNull(affectedFieldsList[$length]) > 2) {
            whichFields = affectedFieldsList[$join](", ");
          } else if (affectedFieldsList[$length] === 2) {
            whichFields = affectedFieldsList[$join](" ");
          } else {
            whichFields = affectedFieldsList[$single];
          }
          throwError(new assertions.ErrorSummary.new("BoxConstraints has " + (affectedFieldsList[$length] === 1 ? "a NaN value" : "NaN values") + " in " + dart.str(whichFields) + "."));
        }
        if (dart.notNull(this.minWidth) < 0.0 && dart.notNull(this.minHeight) < 0.0) throwError(new assertions.ErrorSummary.new("BoxConstraints has both a negative minimum width and a negative minimum height."));
        if (dart.notNull(this.minWidth) < 0.0) throwError(new assertions.ErrorSummary.new("BoxConstraints has a negative minimum width."));
        if (dart.notNull(this.minHeight) < 0.0) throwError(new assertions.ErrorSummary.new("BoxConstraints has a negative minimum height."));
        if (dart.notNull(this.maxWidth) < dart.notNull(this.minWidth) && dart.notNull(this.maxHeight) < dart.notNull(this.minHeight)) throwError(new assertions.ErrorSummary.new("BoxConstraints has both width and height constraints non-normalized."));
        if (dart.notNull(this.maxWidth) < dart.notNull(this.minWidth)) throwError(new assertions.ErrorSummary.new("BoxConstraints has non-normalized width constraints."));
        if (dart.notNull(this.maxHeight) < dart.notNull(this.minHeight)) throwError(new assertions.ErrorSummary.new("BoxConstraints has non-normalized height constraints."));
        if (dart.test(isAppliedConstraint)) {
          if (this.minWidth[$isInfinite] && this.minHeight[$isInfinite]) throwError(new assertions.ErrorSummary.new("BoxConstraints forces an infinite width and infinite height."));
          if (this.minWidth[$isInfinite]) throwError(new assertions.ErrorSummary.new("BoxConstraints forces an infinite width."));
          if (this.minHeight[$isInfinite]) throwError(new assertions.ErrorSummary.new("BoxConstraints forces an infinite height."));
        }
        if (!dart.test(this.isNormalized)) dart.assertFailed(null, L6, 565, 14, "isNormalized");
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 517, 12, "() {\r\n      void throwError(DiagnosticsNode message) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          message,\r\n          if (informationCollector != null) ...informationCollector(),\r\n          DiagnosticsProperty<BoxConstraints>('The offending constraints were', this, style: DiagnosticsTreeStyle.errorProperty),\r\n        ]);\r\n      }\r\n      if (minWidth.isNaN || maxWidth.isNaN || minHeight.isNaN || maxHeight.isNaN) {\r\n        final List<String> affectedFieldsList = <String>[\r\n          if (minWidth.isNaN) 'minWidth',\r\n          if (maxWidth.isNaN) 'maxWidth',\r\n          if (minHeight.isNaN) 'minHeight',\r\n          if (maxHeight.isNaN) 'maxHeight',\r\n        ];\r\n        assert(affectedFieldsList.isNotEmpty);\r\n        if (affectedFieldsList.length > 1)\r\n          affectedFieldsList.add('and ${affectedFieldsList.removeLast()}');\r\n        String whichFields = '';\r\n        if (affectedFieldsList.length > 2) {\r\n          whichFields = affectedFieldsList.join(', ');\r\n        } else if (affectedFieldsList.length == 2) {\r\n          whichFields = affectedFieldsList.join(' ');\r\n        } else {\r\n          whichFields = affectedFieldsList.single;\r\n        }\r\n        throwError(ErrorSummary('BoxConstraints has ${affectedFieldsList.length == 1 ? 'a NaN value' : 'NaN values' } in $whichFields.'));\r\n      }\r\n      if (minWidth < 0.0 && minHeight < 0.0)\r\n        throwError(ErrorSummary('BoxConstraints has both a negative minimum width and a negative minimum height.'));\r\n      if (minWidth < 0.0)\r\n        throwError(ErrorSummary('BoxConstraints has a negative minimum width.'));\r\n      if (minHeight < 0.0)\r\n        throwError(ErrorSummary('BoxConstraints has a negative minimum height.'));\r\n      if (maxWidth < minWidth && maxHeight < minHeight)\r\n        throwError(ErrorSummary('BoxConstraints has both width and height constraints non-normalized.'));\r\n      if (maxWidth < minWidth)\r\n        throwError(ErrorSummary('BoxConstraints has non-normalized width constraints.'));\r\n      if (maxHeight < minHeight)\r\n        throwError(ErrorSummary('BoxConstraints has non-normalized height constraints.'));\r\n      if (isAppliedConstraint) {\r\n        if (minWidth.isInfinite && minHeight.isInfinite)\r\n          throwError(ErrorSummary('BoxConstraints forces an infinite width and infinite height.'));\r\n        if (minWidth.isInfinite)\r\n          throwError(ErrorSummary('BoxConstraints forces an infinite width.'));\r\n        if (minHeight.isInfinite)\r\n          throwError(ErrorSummary('BoxConstraints forces an infinite height.'));\r\n      }\r\n      assert(isNormalized);\r\n      return true;\r\n    }()");
      return this.isNormalized;
    }
    normalize() {
      if (dart.test(this.isNormalized)) return this;
      let minWidth = dart.notNull(this.minWidth) >= 0.0 ? this.minWidth : 0.0;
      let minHeight = dart.notNull(this.minHeight) >= 0.0 ? this.minHeight : 0.0;
      return new box.BoxConstraints.new({minWidth: minWidth, maxWidth: dart.notNull(minWidth) > dart.notNull(this.maxWidth) ? minWidth : this.maxWidth, minHeight: minHeight, maxHeight: dart.notNull(minHeight) > dart.notNull(this.maxHeight) ? minHeight : this.maxHeight});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 590, 12, "debugAssertIsValid()");
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      if (!(BoxConstraintsL().is(other) && dart.test(other.debugAssertIsValid()))) dart.assertFailed(null, L6, 595, 12, "other is BoxConstraints && other.debugAssertIsValid()");
      return BoxConstraintsL().is(other) && other.minWidth == this.minWidth && other.maxWidth == this.maxWidth && other.minHeight == this.minHeight && other.maxHeight == this.maxHeight;
    }
    get hashCode() {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L6, 605, 12, "debugAssertIsValid()");
      return ui.hashValues(this.minWidth, this.maxWidth, this.minHeight, this.maxHeight);
    }
    toString() {
      let annotation = dart.test(this.isNormalized) ? "" : "; NOT NORMALIZED";
      if (this.minWidth === 1 / 0 && this.minHeight === 1 / 0) return "BoxConstraints(biggest" + annotation + ")";
      if (this.minWidth === 0 && this.maxWidth === 1 / 0 && this.minHeight === 0 && this.maxHeight === 1 / 0) return "BoxConstraints(unconstrained" + annotation + ")";
      function describe(min, max, dim) {
        if (min == max) return dart.str(dim) + "=" + dart.str(min[$toStringAsFixed](1));
        return dart.str(min[$toStringAsFixed](1)) + "<=" + dart.str(dim) + "<=" + dart.str(max[$toStringAsFixed](1));
      }
      dart.fn(describe, doubleLAnddoubleLAndStringLToStringL());
      let width = describe(this.minWidth, this.maxWidth, "w");
      let height = describe(this.minHeight, this.maxHeight, "h");
      return "BoxConstraints(" + dart.str(width) + ", " + dart.str(height) + annotation + ")";
    }
  };
  (box.BoxConstraints.new = function(opts) {
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    this[minWidth$] = minWidth;
    this[maxWidth$] = maxWidth;
    this[minHeight$] = minHeight;
    this[maxHeight$] = maxHeight;
    if (!(minWidth != null)) dart.assertFailed(null, L6, 95, 16, "minWidth != null");
    if (!(maxWidth != null)) dart.assertFailed(null, L6, 96, 16, "maxWidth != null");
    if (!(minHeight != null)) dart.assertFailed(null, L6, 97, 16, "minHeight != null");
    if (!(maxHeight != null)) dart.assertFailed(null, L6, 98, 16, "maxHeight != null");
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  (box.BoxConstraints.tight = function(size) {
    this[minWidth$] = size.width;
    this[maxWidth$] = size.width;
    this[minHeight$] = size.height;
    this[maxHeight$] = size.height;
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  (box.BoxConstraints.tightFor = function(opts) {
    let t8, t8$, t8$0, t8$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t8 = width, t8 == null ? 0.0 : t8);
    this[maxWidth$] = (t8$ = width, t8$ == null ? 1 / 0 : t8$);
    this[minHeight$] = (t8$0 = height, t8$0 == null ? 0.0 : t8$0);
    this[maxHeight$] = (t8$1 = height, t8$1 == null ? 1 / 0 : t8$1);
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  (box.BoxConstraints.tightForFinite = function(opts) {
    let width = opts && 'width' in opts ? opts.width : 1 / 0;
    let height = opts && 'height' in opts ? opts.height : 1 / 0;
    this[minWidth$] = width !== 1 / 0 ? width : 0.0;
    this[maxWidth$] = width !== 1 / 0 ? width : 1 / 0;
    this[minHeight$] = height !== 1 / 0 ? height : 0.0;
    this[maxHeight$] = height !== 1 / 0 ? height : 1 / 0;
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  (box.BoxConstraints.loose = function(size) {
    this[minWidth$] = 0.0;
    this[maxWidth$] = size.width;
    this[minHeight$] = 0.0;
    this[maxHeight$] = size.height;
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  (box.BoxConstraints.expand = function(opts) {
    let t8, t8$, t8$0, t8$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t8 = width, t8 == null ? 1 / 0 : t8);
    this[maxWidth$] = (t8$ = width, t8$ == null ? 1 / 0 : t8$);
    this[minHeight$] = (t8$0 = height, t8$0 == null ? 1 / 0 : t8$0);
    this[maxHeight$] = (t8$1 = height, t8$1 == null ? 1 / 0 : t8$1);
    box.BoxConstraints.__proto__.new.call(this);
    ;
  }).prototype = box.BoxConstraints.prototype;
  dart.addTypeTests(box.BoxConstraints);
  dart.addTypeCaches(box.BoxConstraints);
  dart.setMethodSignature(box.BoxConstraints, () => ({
    __proto__: dart.getMethods(box.BoxConstraints.__proto__),
    copyWith: dart.fnType(dart.legacy(box.BoxConstraints), [], {maxHeight: dart.legacy(core.double), maxWidth: dart.legacy(core.double), minHeight: dart.legacy(core.double), minWidth: dart.legacy(core.double)}, {}),
    deflate: dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(edge_insets.EdgeInsets)]),
    loosen: dart.fnType(dart.legacy(box.BoxConstraints), []),
    enforce: dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(box.BoxConstraints)]),
    tighten: dart.fnType(dart.legacy(box.BoxConstraints), [], {height: dart.legacy(core.double), width: dart.legacy(core.double)}, {}),
    widthConstraints: dart.fnType(dart.legacy(box.BoxConstraints), []),
    heightConstraints: dart.fnType(dart.legacy(box.BoxConstraints), []),
    constrainWidth: dart.fnType(dart.legacy(core.double), [], [dart.legacy(core.double)]),
    constrainHeight: dart.fnType(dart.legacy(core.double), [], [dart.legacy(core.double)]),
    [_debugPropagateDebugSize]: dart.fnType(dart.legacy(ui.Size), [dart.legacy(ui.Size), dart.legacy(ui.Size)]),
    constrain: dart.fnType(dart.legacy(ui.Size), [dart.legacy(ui.Size)]),
    constrainDimensions: dart.fnType(dart.legacy(ui.Size), [dart.legacy(core.double), dart.legacy(core.double)]),
    constrainSizeAndAttemptToPreserveAspectRatio: dart.fnType(dart.legacy(ui.Size), [dart.legacy(ui.Size)]),
    isSatisfiedBy: dart.fnType(dart.legacy(core.bool), [dart.legacy(ui.Size)]),
    '*': dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(core.double)]),
    '/': dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(core.double)]),
    '~/': dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(core.double)]),
    '%': dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(core.double)]),
    normalize: dart.fnType(dart.legacy(box.BoxConstraints), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(box.BoxConstraints, () => ({
    __proto__: dart.getGetters(box.BoxConstraints.__proto__),
    flipped: dart.legacy(box.BoxConstraints),
    biggest: dart.legacy(ui.Size),
    smallest: dart.legacy(ui.Size),
    hasTightWidth: dart.legacy(core.bool),
    hasTightHeight: dart.legacy(core.bool),
    isTight: dart.legacy(core.bool),
    hasBoundedWidth: dart.legacy(core.bool),
    hasBoundedHeight: dart.legacy(core.bool),
    hasInfiniteWidth: dart.legacy(core.bool),
    hasInfiniteHeight: dart.legacy(core.bool),
    isNormalized: dart.legacy(core.bool),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(box.BoxConstraints, L7);
  dart.setFieldSignature(box.BoxConstraints, () => ({
    __proto__: dart.getFields(box.BoxConstraints.__proto__),
    minWidth: dart.finalFieldType(dart.legacy(core.double)),
    maxWidth: dart.finalFieldType(dart.legacy(core.double)),
    minHeight: dart.finalFieldType(dart.legacy(core.double)),
    maxHeight: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(box.BoxConstraints, ['_equals', 'toString']);
  dart.defineExtensionAccessors(box.BoxConstraints, ['hashCode']);
  box.BoxHitTestResult = class BoxHitTestResult extends hit_test.HitTestResult {
    addWithPaintTransform(opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let hitTest = opts && 'hitTest' in opts ? opts.hitTest : null;
      if (!(hitTest != null)) dart.assertFailed(null, L6, 732, 12, "hitTest != null");
      if (transform != null) {
        transform = vector_math_64.Matrix4.tryInvert(events.PointerEvent.removePerspectiveTransform(transform));
        if (transform == null) {
          return false;
        }
      }
      return this.addWithRawTransform({transform: transform, position: position, hitTest: hitTest});
    }
    addWithPaintOffset(opts) {
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let hitTest = opts && 'hitTest' in opts ? opts.hitTest : null;
      if (!(hitTest != null)) dart.assertFailed(null, L6, 770, 12, "hitTest != null");
      let transformedPosition = position == null || offset == null ? position : position['-'](offset);
      if (offset != null) {
        this.pushOffset(offset._negate());
      }
      let isHit = hitTest(this, transformedPosition);
      if (offset != null) {
        this.popTransform();
      }
      return isHit;
    }
    addWithRawTransform(opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let hitTest = opts && 'hitTest' in opts ? opts.hitTest : null;
      if (!(hitTest != null)) dart.assertFailed(null, L6, 813, 12, "hitTest != null");
      let transformedPosition = position == null || transform == null ? position : matrix_utils.MatrixUtils.transformPoint(transform, position);
      if (transform != null) {
        this.pushTransform(transform);
      }
      let isHit = hitTest(this, transformedPosition);
      if (transform != null) {
        this.popTransform();
      }
      return isHit;
    }
  };
  (box.BoxHitTestResult.new = function() {
    box.BoxHitTestResult.__proto__.new.call(this);
    ;
  }).prototype = box.BoxHitTestResult.prototype;
  (box.BoxHitTestResult.wrap = function(result) {
    box.BoxHitTestResult.__proto__.wrap.call(this, result);
    ;
  }).prototype = box.BoxHitTestResult.prototype;
  dart.addTypeTests(box.BoxHitTestResult);
  dart.addTypeCaches(box.BoxHitTestResult);
  dart.setMethodSignature(box.BoxHitTestResult, () => ({
    __proto__: dart.getMethods(box.BoxHitTestResult.__proto__),
    addWithPaintTransform: dart.fnType(dart.legacy(core.bool), [], {hitTest: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult), dart.legacy(ui.Offset)])), position: dart.legacy(ui.Offset), transform: dart.legacy(vector_math_64.Matrix4)}, {}),
    addWithPaintOffset: dart.fnType(dart.legacy(core.bool), [], {hitTest: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult), dart.legacy(ui.Offset)])), offset: dart.legacy(ui.Offset), position: dart.legacy(ui.Offset)}, {}),
    addWithRawTransform: dart.fnType(dart.legacy(core.bool), [], {hitTest: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult), dart.legacy(ui.Offset)])), position: dart.legacy(ui.Offset), transform: dart.legacy(vector_math_64.Matrix4)}, {})
  }));
  dart.setLibraryUri(box.BoxHitTestResult, L7);
  var localPosition$0 = dart.privateName(box, "BoxHitTestEntry.localPosition");
  box.BoxHitTestEntry = class BoxHitTestEntry extends hit_test.HitTestEntry {
    get localPosition() {
      return this[localPosition$0];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get target() {
      return RenderBoxL().as(super.target);
    }
    toString() {
      return dart.str(diagnostics.describeIdentity(this.target)) + "@" + dart.str(this.localPosition);
    }
  };
  (box.BoxHitTestEntry.new = function(target, localPosition) {
    this[localPosition$0] = localPosition;
    if (!(localPosition != null)) dart.assertFailed(null, L6, 834, 14, "localPosition != null");
    box.BoxHitTestEntry.__proto__.new.call(this, target);
    ;
  }).prototype = box.BoxHitTestEntry.prototype;
  dart.addTypeTests(box.BoxHitTestEntry);
  dart.addTypeCaches(box.BoxHitTestEntry);
  dart.setGetterSignature(box.BoxHitTestEntry, () => ({
    __proto__: dart.getGetters(box.BoxHitTestEntry.__proto__),
    target: dart.legacy(box.RenderBox)
  }));
  dart.setLibraryUri(box.BoxHitTestEntry, L7);
  dart.setFieldSignature(box.BoxHitTestEntry, () => ({
    __proto__: dart.getFields(box.BoxHitTestEntry.__proto__),
    localPosition: dart.finalFieldType(dart.legacy(ui.Offset))
  }));
  dart.defineExtensionMethods(box.BoxHitTestEntry, ['toString']);
  var offset = dart.privateName(box, "BoxParentData.offset");
  box.BoxParentData = class BoxParentData extends object$.ParentData {
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    toString() {
      return "offset=" + dart.str(this.offset);
    }
  };
  (box.BoxParentData.new = function() {
    this[offset] = ui.Offset.zero;
    ;
  }).prototype = box.BoxParentData.prototype;
  dart.addTypeTests(box.BoxParentData);
  dart.addTypeCaches(box.BoxParentData);
  dart.setLibraryUri(box.BoxParentData, L7);
  dart.setFieldSignature(box.BoxParentData, () => ({
    __proto__: dart.getFields(box.BoxParentData.__proto__),
    offset: dart.fieldType(dart.legacy(ui.Offset))
  }));
  dart.defineExtensionMethods(box.BoxParentData, ['toString']);
  const _is_ContainerBoxParentData_default = Symbol('_is_ContainerBoxParentData_default');
  box.ContainerBoxParentData$ = dart.generic(ChildType => {
    const BoxParentData_ContainerParentDataMixin$36 = class BoxParentData_ContainerParentDataMixin extends box.BoxParentData {};
    (BoxParentData_ContainerParentDataMixin$36.new = function() {
      object$.ContainerParentDataMixin$(dart.legacy(ChildType))[dart.mixinNew].call(this);
      BoxParentData_ContainerParentDataMixin$36.__proto__.new.call(this);
    }).prototype = BoxParentData_ContainerParentDataMixin$36.prototype;
    dart.applyMixin(BoxParentData_ContainerParentDataMixin$36, object$.ContainerParentDataMixin$(dart.legacy(ChildType)));
    class ContainerBoxParentData extends BoxParentData_ContainerParentDataMixin$36 {}
    (ContainerBoxParentData.new = function() {
      ContainerBoxParentData.__proto__.new.call(this);
      ;
    }).prototype = ContainerBoxParentData.prototype;
    dart.addTypeTests(ContainerBoxParentData);
    ContainerBoxParentData.prototype[_is_ContainerBoxParentData_default] = true;
    dart.addTypeCaches(ContainerBoxParentData);
    dart.setLibraryUri(ContainerBoxParentData, L7);
    return ContainerBoxParentData;
  });
  box.ContainerBoxParentData = box.ContainerBoxParentData$();
  dart.addTypeTests(box.ContainerBoxParentData, _is_ContainerBoxParentData_default);
  var _name$1 = dart.privateName(box, "_name");
  var C66;
  var C67;
  var C68;
  var C69;
  var C70;
  box._IntrinsicDimension = class _IntrinsicDimension extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (box._IntrinsicDimension.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = box._IntrinsicDimension.prototype;
  dart.addTypeTests(box._IntrinsicDimension);
  dart.addTypeCaches(box._IntrinsicDimension);
  dart.setMethodSignature(box._IntrinsicDimension, () => ({
    __proto__: dart.getMethods(box._IntrinsicDimension.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(box._IntrinsicDimension, L7);
  dart.setFieldSignature(box._IntrinsicDimension, () => ({
    __proto__: dart.getFields(box._IntrinsicDimension.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(box._IntrinsicDimension, ['toString']);
  box._IntrinsicDimension.minWidth = C66 || CT.C66;
  box._IntrinsicDimension.maxWidth = C67 || CT.C67;
  box._IntrinsicDimension.minHeight = C68 || CT.C68;
  box._IntrinsicDimension.maxHeight = C69 || CT.C69;
  box._IntrinsicDimension.values = C70 || CT.C70;
  var dimension$ = dart.privateName(box, "_IntrinsicDimensionsCacheEntry.dimension");
  var argument$ = dart.privateName(box, "_IntrinsicDimensionsCacheEntry.argument");
  box._IntrinsicDimensionsCacheEntry = class _IntrinsicDimensionsCacheEntry extends core.Object {
    get dimension() {
      return this[dimension$];
    }
    set dimension(value) {
      super.dimension = value;
    }
    get argument() {
      return this[argument$];
    }
    set argument(value) {
      super.argument = value;
    }
    _equals(other) {
      if (other == null) return false;
      return _IntrinsicDimensionsCacheEntryL().is(other) && other.dimension == this.dimension && other.argument == this.argument;
    }
    get hashCode() {
      return ui.hashValues(this.dimension, this.argument);
    }
  };
  (box._IntrinsicDimensionsCacheEntry.new = function(dimension, argument) {
    this[dimension$] = dimension;
    this[argument$] = argument;
    ;
  }).prototype = box._IntrinsicDimensionsCacheEntry.prototype;
  dart.addTypeTests(box._IntrinsicDimensionsCacheEntry);
  dart.addTypeCaches(box._IntrinsicDimensionsCacheEntry);
  dart.setMethodSignature(box._IntrinsicDimensionsCacheEntry, () => ({
    __proto__: dart.getMethods(box._IntrinsicDimensionsCacheEntry.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(box._IntrinsicDimensionsCacheEntry, () => ({
    __proto__: dart.getGetters(box._IntrinsicDimensionsCacheEntry.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(box._IntrinsicDimensionsCacheEntry, L7);
  dart.setFieldSignature(box._IntrinsicDimensionsCacheEntry, () => ({
    __proto__: dart.getFields(box._IntrinsicDimensionsCacheEntry.__proto__),
    dimension: dart.finalFieldType(dart.legacy(box._IntrinsicDimension)),
    argument: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(box._IntrinsicDimensionsCacheEntry, ['_equals']);
  dart.defineExtensionAccessors(box._IntrinsicDimensionsCacheEntry, ['hashCode']);
  const _is_RenderBoxContainerDefaultsMixin_default = Symbol('_is_RenderBoxContainerDefaultsMixin_default');
  box.RenderBoxContainerDefaultsMixin$ = dart.generic((ChildType, ParentDataType) => {
    var ChildTypeL = () => (ChildTypeL = dart.constFn(dart.legacy(ChildType)))();
    var JSArrayOfChildTypeL = () => (JSArrayOfChildTypeL = dart.constFn(_interceptors.JSArray$(ChildTypeL())))();
    var ParentDataTypeL = () => (ParentDataTypeL = dart.constFn(dart.legacy(ParentDataType)))();
    class RenderBoxContainerDefaultsMixin extends core.Object {}
    RenderBoxContainerDefaultsMixin[dart.mixinOn] = Object => class RenderBoxContainerDefaultsMixin extends Object {
      defaultComputeDistanceToFirstActualBaseline(baseline) {
        if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L6, 2468, 12, "!debugNeedsLayout");
        let child = this.firstChild;
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          let result = child.getDistanceToActualBaseline(baseline);
          if (result != null) return dart.notNull(result) + dart.notNull(childParentData.offset.dy);
          child = childParentData.nextSibling;
        }
        return null;
      }
      defaultComputeDistanceToHighestActualBaseline(baseline) {
        if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L6, 2485, 12, "!debugNeedsLayout");
        let result = null;
        let child = this.firstChild;
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          let candidate = child.getDistanceToActualBaseline(baseline);
          if (candidate != null) {
            candidate = dart.notNull(candidate) + dart.notNull(childParentData.offset.dy);
            if (result != null)
              result = math.min(doubleL(), result, candidate);
            else
              result = candidate;
          }
          child = childParentData.nextSibling;
        }
        return result;
      }
      defaultHitTestChildren(result, opts) {
        let position = opts && 'position' in opts ? opts.position : null;
        let child = this.lastChild;
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          let isHit = result.addWithPaintOffset({offset: childParentData.offset, position: position, hitTest: dart.fn((result, transformed) => {
              if (!dart.equals(transformed, position['-'](childParentData.offset))) dart.assertFailed(null, L6, 2521, 18, "transformed == position - childParentData.offset");
              return child.hitTest(result, {position: transformed});
            }, BoxHitTestResultLAndOffsetLToboolL())});
          if (dart.test(isHit)) return true;
          child = childParentData.previousSibling;
        }
        return false;
      }
      defaultPaint(context, offset) {
        let child = this.firstChild;
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          context.paintChild(child, childParentData.offset['+'](offset));
          child = childParentData.nextSibling;
        }
      }
      getChildrenAsList() {
        let result = JSArrayOfChildTypeL().of([]);
        let child = this.firstChild;
        while (child != null) {
          let childParentData = ParentDataTypeL().as(child.parentData);
          result[$add](ChildTypeL().as(child));
          child = childParentData.nextSibling;
        }
        return result;
      }
    };
    (RenderBoxContainerDefaultsMixin[dart.mixinNew] = function() {
    }).prototype = RenderBoxContainerDefaultsMixin.prototype;
    dart.addTypeTests(RenderBoxContainerDefaultsMixin);
    RenderBoxContainerDefaultsMixin.prototype[_is_RenderBoxContainerDefaultsMixin_default] = true;
    dart.addTypeCaches(RenderBoxContainerDefaultsMixin);
    RenderBoxContainerDefaultsMixin[dart.implements] = () => [object$.ContainerRenderObjectMixin$(dart.legacy(ChildType), dart.legacy(ParentDataType)), core.Object];
    dart.setMethodSignature(RenderBoxContainerDefaultsMixin, () => ({
      __proto__: dart.getMethods(RenderBoxContainerDefaultsMixin.__proto__),
      defaultComputeDistanceToFirstActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
      defaultComputeDistanceToHighestActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
      defaultHitTestChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
      defaultPaint: dart.fnType(dart.void, [dart.legacy(object$.PaintingContext), dart.legacy(ui.Offset)]),
      getChildrenAsList: dart.fnType(dart.legacy(core.List$(dart.legacy(ChildType))), [])
    }));
    dart.setLibraryUri(RenderBoxContainerDefaultsMixin, L7);
    return RenderBoxContainerDefaultsMixin;
  });
  box.RenderBoxContainerDefaultsMixin = box.RenderBoxContainerDefaultsMixin$();
  dart.addTypeTests(box.RenderBoxContainerDefaultsMixin, _is_RenderBoxContainerDefaultsMixin_default);
  dart.trackLibraries("packages/flutter/src/rendering/layer.dart", {
    "package:flutter/src/rendering/layer.dart": layer$,
    "package:flutter/src/rendering/view.dart": view,
    "package:flutter/src/rendering/mouse_cursor.dart": mouse_cursor,
    "package:flutter/src/rendering/mouse_tracking.dart": mouse_tracking,
    "package:flutter/src/rendering/binding.dart": binding$4,
    "package:flutter/src/rendering/object.dart": object$,
    "package:flutter/src/rendering/debug.dart": debug$,
    "package:flutter/src/rendering/box.dart": box
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["layer.dart","view.dart","object.dart","box.dart","mouse_tracking.dart","mouse_cursor.dart","binding.dart","debug.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/rendering/layer.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__layer: layer$,
    src__rendering__view: view,
    src__rendering__mouse_cursor: mouse_cursor,
    src__rendering__mouse_tracking: mouse_tracking,
    src__rendering__binding: binding$4,
    src__rendering__object: object$,
    src__rendering__debug: debug$,
    src__rendering__box: box
  };
}));

//# sourceMappingURL=layer.dart.lib.js.map
