define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/border_radius.dart'], (function load__packages__flutter__src__material__input_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__border_radius$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  var input_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $clamp = dartx.clamp;
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var UnderlineInputBorderL = () => (UnderlineInputBorderL = dart.constFn(dart.legacy(input_border.UnderlineInputBorder)))();
  var InputBorderL = () => (InputBorderL = dart.constFn(dart.legacy(input_border.InputBorder)))();
  var OutlineInputBorderL = () => (OutlineInputBorderL = dart.constFn(dart.legacy(input_border.OutlineInputBorder)))();
  const CT = Object.create(null);
  var L1 = "package:flutter/src/material/input_border.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/material/input_border.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.none",
        index: 0
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C0() {
      return C0 = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C1 || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C2 || CT.C2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: input_border._NoInputBorder.prototype,
        [borderSide$]: C0 || CT.C0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.solid",
        index: 1
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C5 || CT.C5,
        [BorderSide_width]: 1,
        [BorderSide_color]: C2 || CT.C2
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 4,
        [Radius_x]: 4
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C7 || CT.C7,
        [BorderRadius_bottomLeft]: C7 || CT.C7,
        [BorderRadius_topRight]: C8 || CT.C8,
        [BorderRadius_topLeft]: C8 || CT.C8
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C8 || CT.C8,
        [BorderRadius_bottomLeft]: C8 || CT.C8,
        [BorderRadius_topRight]: C8 || CT.C8,
        [BorderRadius_topLeft]: C8 || CT.C8
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.rtl",
        index: 0
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.ltr",
        index: 1
      });
    }
  }, false);
  var _name = dart.privateName(borders, "_name");
  var C1;
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var C2;
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var C0;
  var borderSide$ = dart.privateName(input_border, "InputBorder.borderSide");
  var C3;
  input_border.InputBorder = class InputBorder extends borders.ShapeBorder {
    get borderSide() {
      return this[borderSide$];
    }
    set borderSide(value) {
      super.borderSide = value;
    }
  };
  (input_border.InputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C0 || CT.C0;
    this[borderSide$] = borderSide;
    if (!(borderSide != null)) dart.assertFailed(null, L0, 41, 15, "borderSide != null");
    input_border.InputBorder.__proto__.new.call(this);
    ;
  }).prototype = input_border.InputBorder.prototype;
  dart.addTypeTests(input_border.InputBorder);
  dart.addTypeCaches(input_border.InputBorder);
  dart.setLibraryUri(input_border.InputBorder, L1);
  dart.setFieldSignature(input_border.InputBorder, () => ({
    __proto__: dart.getFields(input_border.InputBorder.__proto__),
    borderSide: dart.finalFieldType(dart.legacy(borders.BorderSide))
  }));
  dart.defineLazy(input_border.InputBorder, {
    /*input_border.InputBorder.none*/get none() {
      return C3 || CT.C3;
    }
  }, true);
  input_border._NoInputBorder = class _NoInputBorder extends input_border.InputBorder {
    copyWith(opts) {
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      return C3 || CT.C3;
    }
    get isOutline() {
      return false;
    }
    get dimensions() {
      return edge_insets.EdgeInsets.zero;
    }
    scale(t) {
      return C3 || CT.C3;
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(rect);
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(rect);
        return t0;
      })();
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    }
  };
  (input_border._NoInputBorder.new = function() {
    input_border._NoInputBorder.__proto__.new.call(this, {borderSide: borders.BorderSide.none});
    ;
  }).prototype = input_border._NoInputBorder.prototype;
  dart.addTypeTests(input_border._NoInputBorder);
  dart.addTypeCaches(input_border._NoInputBorder);
  dart.setMethodSignature(input_border._NoInputBorder, () => ({
    __proto__: dart.getMethods(input_border._NoInputBorder.__proto__),
    copyWith: dart.fnType(dart.legacy(input_border._NoInputBorder), [], {borderSide: dart.legacy(borders.BorderSide)}, {}),
    scale: dart.fnType(dart.legacy(input_border._NoInputBorder), [dart.legacy(core.double)]),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {gapExtent: dart.legacy(core.double), gapPercentage: dart.legacy(core.double), gapStart: dart.legacy(core.double), textDirection: dart.legacy(ui.TextDirection)}, {})
  }));
  dart.setGetterSignature(input_border._NoInputBorder, () => ({
    __proto__: dart.getGetters(input_border._NoInputBorder.__proto__),
    isOutline: dart.legacy(core.bool),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry)
  }));
  dart.setLibraryUri(input_border._NoInputBorder, L1);
  var C5;
  var C4;
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var C7;
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var C8;
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var C6;
  var borderRadius$ = dart.privateName(input_border, "UnderlineInputBorder.borderRadius");
  input_border.UnderlineInputBorder = class UnderlineInputBorder extends input_border.InputBorder {
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get isOutline() {
      return false;
    }
    copyWith(opts) {
      let t0, t0$;
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      return new input_border.UnderlineInputBorder.new({borderSide: (t0 = borderSide, t0 == null ? this.borderSide : t0), borderRadius: (t0$ = borderRadius, t0$ == null ? this.borderRadius : t0$)});
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.only({bottom: this.borderSide.width});
    }
    scale(t) {
      return new input_border.UnderlineInputBorder.new({borderSide: this.borderSide.scale(t)});
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(new ui.Rect.fromLTWH(rect.left, rect.top, rect.width, math.max(doubleL(), 0.0, dart.notNull(rect.height) - dart.notNull(this.borderSide.width))));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect));
        return t0;
      })();
    }
    lerpFrom(a, t) {
      if (UnderlineInputBorderL().is(a)) {
        return new input_border.UnderlineInputBorder.new({borderSide: borders.BorderSide.lerp(a.borderSide, this.borderSide, t), borderRadius: border_radius.BorderRadius.lerp(a.borderRadius, this.borderRadius, t)});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (UnderlineInputBorderL().is(b)) {
        return new input_border.UnderlineInputBorder.new({borderSide: borders.BorderSide.lerp(this.borderSide, b.borderSide, t), borderRadius: border_radius.BorderRadius.lerp(this.borderRadius, b.borderRadius, t)});
      }
      return super.lerpTo(b, t);
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!dart.equals(this.borderRadius.bottomLeft, ui.Radius.zero) || !dart.equals(this.borderRadius.bottomRight, ui.Radius.zero)) canvas.clipPath(this.getOuterPath(rect, {textDirection: textDirection}));
      canvas.drawLine(rect.bottomLeft, rect.bottomRight, this.borderSide.toPaint());
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return InputBorderL().is(other) && dart.equals(other.borderSide, this.borderSide);
    }
    get hashCode() {
      return dart.hashCode(this.borderSide);
    }
  };
  (input_border.UnderlineInputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C4 || CT.C4;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C6 || CT.C6;
    this[borderRadius$] = borderRadius;
    if (!(borderRadius != null)) dart.assertFailed(null, L0, 153, 15, "borderRadius != null");
    input_border.UnderlineInputBorder.__proto__.new.call(this, {borderSide: borderSide});
    ;
  }).prototype = input_border.UnderlineInputBorder.prototype;
  dart.addTypeTests(input_border.UnderlineInputBorder);
  dart.addTypeCaches(input_border.UnderlineInputBorder);
  dart.setMethodSignature(input_border.UnderlineInputBorder, () => ({
    __proto__: dart.getMethods(input_border.UnderlineInputBorder.__proto__),
    copyWith: dart.fnType(dart.legacy(input_border.UnderlineInputBorder), [], {borderRadius: dart.legacy(border_radius.BorderRadius), borderSide: dart.legacy(borders.BorderSide)}, {}),
    scale: dart.fnType(dart.legacy(input_border.UnderlineInputBorder), [dart.legacy(core.double)]),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {gapExtent: dart.legacy(core.double), gapPercentage: dart.legacy(core.double), gapStart: dart.legacy(core.double), textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(input_border.UnderlineInputBorder, () => ({
    __proto__: dart.getGetters(input_border.UnderlineInputBorder.__proto__),
    isOutline: dart.legacy(core.bool),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(input_border.UnderlineInputBorder, L1);
  dart.setFieldSignature(input_border.UnderlineInputBorder, () => ({
    __proto__: dart.getFields(input_border.UnderlineInputBorder.__proto__),
    borderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadius))
  }));
  dart.defineExtensionMethods(input_border.UnderlineInputBorder, ['_equals']);
  dart.defineExtensionAccessors(input_border.UnderlineInputBorder, ['hashCode']);
  var C9;
  var _gapBorderPath = dart.privateName(input_border, "_gapBorderPath");
  var _name$ = dart.privateName(ui, "_name");
  var C10;
  var C11;
  var gapPadding$ = dart.privateName(input_border, "OutlineInputBorder.gapPadding");
  var borderRadius$0 = dart.privateName(input_border, "OutlineInputBorder.borderRadius");
  input_border.OutlineInputBorder = class OutlineInputBorder extends input_border.InputBorder {
    get gapPadding() {
      return this[gapPadding$];
    }
    set gapPadding(value) {
      super.gapPadding = value;
    }
    get borderRadius() {
      return this[borderRadius$0];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    static _cornersAreCircular(borderRadius) {
      return borderRadius.topLeft.x == borderRadius.topLeft.y && borderRadius.bottomLeft.x == borderRadius.bottomLeft.y && borderRadius.topRight.x == borderRadius.topRight.y && borderRadius.bottomRight.x == borderRadius.bottomRight.y;
    }
    get isOutline() {
      return true;
    }
    copyWith(opts) {
      let t0, t0$, t0$0;
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let gapPadding = opts && 'gapPadding' in opts ? opts.gapPadding : null;
      return new input_border.OutlineInputBorder.new({borderSide: (t0 = borderSide, t0 == null ? this.borderSide : t0), borderRadius: (t0$ = borderRadius, t0$ == null ? this.borderRadius : t0$), gapPadding: (t0$0 = gapPadding, t0$0 == null ? this.gapPadding : t0$0)});
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.all(this.borderSide.width);
    }
    scale(t) {
      return new input_border.OutlineInputBorder.new({borderSide: this.borderSide.scale(t), borderRadius: this.borderRadius['*'](t), gapPadding: dart.notNull(this.gapPadding) * dart.notNull(t)});
    }
    lerpFrom(a, t) {
      if (OutlineInputBorderL().is(a)) {
        let outline = a;
        return new input_border.OutlineInputBorder.new({borderRadius: border_radius.BorderRadius.lerp(outline.borderRadius, this.borderRadius, t), borderSide: borders.BorderSide.lerp(outline.borderSide, this.borderSide, t), gapPadding: outline.gapPadding});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (OutlineInputBorderL().is(b)) {
        let outline = b;
        return new input_border.OutlineInputBorder.new({borderRadius: border_radius.BorderRadius.lerp(this.borderRadius, outline.borderRadius, t), borderSide: borders.BorderSide.lerp(this.borderSide, outline.borderSide, t), gapPadding: outline.gapPadding});
      }
      return super.lerpTo(b, t);
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect).deflate(this.borderSide.width));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(this.borderRadius.resolve(textDirection).toRRect(rect));
        return t0;
      })();
    }
    [_gapBorderPath](canvas, center, start, extent) {
      let t0, t0$, t0$0;
      let scaledRRect = center.scaleRadii();
      let tlCorner = new ui.Rect.fromLTWH(scaledRRect.left, scaledRRect.top, dart.notNull(scaledRRect.tlRadiusX) * 2.0, dart.notNull(scaledRRect.tlRadiusY) * 2.0);
      let trCorner = new ui.Rect.fromLTWH(dart.notNull(scaledRRect.right) - dart.notNull(scaledRRect.trRadiusX) * 2.0, scaledRRect.top, dart.notNull(scaledRRect.trRadiusX) * 2.0, dart.notNull(scaledRRect.trRadiusY) * 2.0);
      let brCorner = new ui.Rect.fromLTWH(dart.notNull(scaledRRect.right) - dart.notNull(scaledRRect.brRadiusX) * 2.0, dart.notNull(scaledRRect.bottom) - dart.notNull(scaledRRect.brRadiusY) * 2.0, dart.notNull(scaledRRect.brRadiusX) * 2.0, dart.notNull(scaledRRect.brRadiusY) * 2.0);
      let blCorner = new ui.Rect.fromLTWH(scaledRRect.left, dart.notNull(scaledRRect.bottom) - dart.notNull(scaledRRect.blRadiusY) * 2.0, dart.notNull(scaledRRect.blRadiusX) * 2.0, dart.notNull(scaledRRect.blRadiusX) * 2.0);
      let tlCornerArcSweep = dart.notNull(start) < dart.notNull(scaledRRect.tlRadiusX) ? math.asin((dart.notNull(start) / dart.notNull(scaledRRect.tlRadiusX))[$clamp](-1.0, 1.0)) : 3.141592653589793 / 2.0;
      let path = (t0 = ui.Path.new(), (() => {
        t0.addArc(tlCorner, 3.141592653589793, tlCornerArcSweep);
        t0.moveTo(dart.notNull(scaledRRect.left) + dart.notNull(scaledRRect.tlRadiusX), scaledRRect.top);
        return t0;
      })());
      if (dart.notNull(start) > dart.notNull(scaledRRect.tlRadiusX)) path.lineTo(dart.notNull(scaledRRect.left) + dart.notNull(start), scaledRRect.top);
      if (dart.notNull(start) + dart.notNull(extent) < dart.notNull(scaledRRect.width) - dart.notNull(scaledRRect.trRadiusX)) {
        t0$ = path;
        (() => {
          t0$.relativeMoveTo(extent, 0.0);
          t0$.lineTo(dart.notNull(scaledRRect.right) - dart.notNull(scaledRRect.trRadiusX), scaledRRect.top);
          t0$.addArc(trCorner, 4.71238898038469, 1.5707963267948966);
          return t0$;
        })();
      } else if (dart.notNull(start) + dart.notNull(extent) < dart.notNull(scaledRRect.width)) {
        let dx = dart.notNull(scaledRRect.width) - (dart.notNull(start) + dart.notNull(extent));
        let sweep = math.acos(dx / dart.notNull(scaledRRect.trRadiusX));
        path.addArc(trCorner, 4.71238898038469 + sweep, 1.5707963267948966 - sweep);
      }
      t0$0 = path;
      return (() => {
        t0$0.moveTo(scaledRRect.right, dart.notNull(scaledRRect.top) + dart.notNull(scaledRRect.trRadiusY));
        t0$0.lineTo(scaledRRect.right, dart.notNull(scaledRRect.bottom) - dart.notNull(scaledRRect.brRadiusY));
        t0$0.addArc(brCorner, 0.0, 1.5707963267948966);
        t0$0.lineTo(dart.notNull(scaledRRect.left) + dart.notNull(scaledRRect.blRadiusX), scaledRRect.bottom);
        t0$0.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
        t0$0.lineTo(scaledRRect.left, dart.notNull(scaledRRect.top) + dart.notNull(scaledRRect.tlRadiusY));
        return t0$0;
      })();
    }
    paint(canvas, rect, opts) {
      let gapStart = opts && 'gapStart' in opts ? opts.gapStart : null;
      let gapExtent = opts && 'gapExtent' in opts ? opts.gapExtent : 0;
      let gapPercentage = opts && 'gapPercentage' in opts ? opts.gapPercentage : 0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(gapExtent != null)) dart.assertFailed(null, L0, 471, 12, "gapExtent != null");
      if (!(dart.notNull(gapPercentage) >= 0.0 && dart.notNull(gapPercentage) <= 1.0)) dart.assertFailed(null, L0, 472, 12, "gapPercentage >= 0.0 && gapPercentage <= 1.0");
      if (!dart.test(input_border.OutlineInputBorder._cornersAreCircular(this.borderRadius))) dart.assertFailed(null, L0, 473, 12, "_cornersAreCircular(borderRadius)");
      let paint = this.borderSide.toPaint();
      let outer = this.borderRadius.toRRect(rect);
      let center = outer.deflate(dart.notNull(this.borderSide.width) / 2.0);
      if (gapStart == null || dart.notNull(gapExtent) <= 0.0 || gapPercentage === 0.0) {
        canvas.drawRRect(center, paint);
      } else {
        let extent = ui.lerpDouble(0.0, dart.notNull(gapExtent) + dart.notNull(this.gapPadding) * 2.0, gapPercentage);
        switch (textDirection) {
          case C10 || CT.C10:
          {
            let path = this[_gapBorderPath](canvas, center, math.max(doubleL(), 0.0, dart.notNull(gapStart) + dart.notNull(this.gapPadding) - dart.notNull(extent)), extent);
            canvas.drawPath(path, paint);
            break;
          }
          case C11 || CT.C11:
          {
            let path = this[_gapBorderPath](canvas, center, math.max(doubleL(), 0.0, dart.notNull(gapStart) - dart.notNull(this.gapPadding)), extent);
            canvas.drawPath(path, paint);
            break;
          }
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return OutlineInputBorderL().is(other) && dart.equals(other.borderSide, this.borderSide) && dart.equals(other.borderRadius, this.borderRadius) && other.gapPadding == this.gapPadding;
    }
    get hashCode() {
      return ui.hashValues(this.borderSide, this.borderRadius, this.gapPadding);
    }
  };
  (input_border.OutlineInputBorder.new = function(opts) {
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : C4 || CT.C4;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C9 || CT.C9;
    let gapPadding = opts && 'gapPadding' in opts ? opts.gapPadding : 4;
    this[borderRadius$0] = borderRadius;
    this[gapPadding$] = gapPadding;
    if (!(borderRadius != null)) dart.assertFailed(null, L0, 292, 15, "borderRadius != null");
    if (!(gapPadding != null && dart.notNull(gapPadding) >= 0.0)) dart.assertFailed(null, L0, 293, 15, "gapPadding != null && gapPadding >= 0.0");
    input_border.OutlineInputBorder.__proto__.new.call(this, {borderSide: borderSide});
    ;
  }).prototype = input_border.OutlineInputBorder.prototype;
  dart.addTypeTests(input_border.OutlineInputBorder);
  dart.addTypeCaches(input_border.OutlineInputBorder);
  dart.setMethodSignature(input_border.OutlineInputBorder, () => ({
    __proto__: dart.getMethods(input_border.OutlineInputBorder.__proto__),
    copyWith: dart.fnType(dart.legacy(input_border.OutlineInputBorder), [], {borderRadius: dart.legacy(border_radius.BorderRadius), borderSide: dart.legacy(borders.BorderSide), gapPadding: dart.legacy(core.double)}, {}),
    scale: dart.fnType(dart.legacy(input_border.OutlineInputBorder), [dart.legacy(core.double)]),
    getInnerPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)], {textDirection: dart.legacy(ui.TextDirection)}, {}),
    [_gapBorderPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Canvas), dart.legacy(ui.RRect), dart.legacy(core.double), dart.legacy(core.double)]),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)], {gapExtent: dart.legacy(core.double), gapPercentage: dart.legacy(core.double), gapStart: dart.legacy(core.double), textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(input_border.OutlineInputBorder, () => ({
    __proto__: dart.getGetters(input_border.OutlineInputBorder.__proto__),
    isOutline: dart.legacy(core.bool),
    dimensions: dart.legacy(edge_insets.EdgeInsetsGeometry),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(input_border.OutlineInputBorder, L1);
  dart.setFieldSignature(input_border.OutlineInputBorder, () => ({
    __proto__: dart.getFields(input_border.OutlineInputBorder.__proto__),
    gapPadding: dart.finalFieldType(dart.legacy(core.double)),
    borderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadius))
  }));
  dart.defineExtensionMethods(input_border.OutlineInputBorder, ['_equals']);
  dart.defineExtensionAccessors(input_border.OutlineInputBorder, ['hashCode']);
  dart.trackLibraries("packages/flutter/src/material/input_border.dart", {
    "package:flutter/src/material/input_border.dart": input_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["input_border.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqDmB;;;;;;;;QAdV;;UACK,AAAW,UAAD,IAAI;AAFpB;;EAEyB;;;;;;;;;MAON,6BAAI;;;;;;UA2CQ;AAAiB;IAAsB;;AAGtD;IAAK;;AAGU,YAAW;IAAI;UAGxB;AAAM;IAAsB;iBAGjC;;UAAsB;AAC3C,WAAO;;AAAQ,mBAAQ,IAAI;;;IAC7B;iBAGuB;;UAAsB;AAC3C,WAAO;;AAAQ,mBAAQ,IAAI;;;IAC7B;UAIS,QACF;UACE;UACA;UACA;UACO;IAGhB;;;AAlCyB,sEAA6B;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6ExC;;;;;;;AAGG;IAAK;;;UAGgB;UAAyB;AAClE,YAAO,yDACkB,KAAX,UAAU,QAAV,OAAmB,sCACJ,MAAb,YAAY,SAAZ,OAAqB;IAEvC;;AAIE,YAAkB,0CAAa,AAAW;IAC5C;UAGkC;AAChC,YAAO,wDAAiC,AAAW,sBAAM,CAAC;IAC5D;iBAGuB;;UAAsB;AAC3C,WAAO;;AACH,mBAAa,qBAAS,AAAK,IAAD,OAAO,AAAK,IAAD,MAAM,AAAK,IAAD,QAAQ,oBAAS,KAAiB,aAAZ,AAAK,IAAD,wBAAU,AAAW;;;IACpG;iBAGuB;;UAAsB;AAC3C,WAAO;;AAAQ,oBAAS,AAAa,AAAuB,0BAAf,aAAa,UAAU,IAAI;;;IAC1E;aAGiC,GAAU;AACzC,UAAM,2BAAF,CAAC;AACH,cAAO,wDACkB,wBAAK,AAAE,CAAD,aAAa,iBAAY,CAAC,iBAC5B,gCAAK,AAAE,CAAD,eAAe,mBAAc,CAAC;;AAGnE,YAAa,gBAAS,CAAC,EAAE,CAAC;IAC5B;WAG+B,GAAU;AACvC,UAAM,2BAAF,CAAC;AACH,cAAO,wDACkB,wBAAK,iBAAY,AAAE,CAAD,aAAa,CAAC,iBAC5B,gCAAK,mBAAc,AAAE,CAAD,eAAe,CAAC;;AAGnE,YAAa,cAAO,CAAC,EAAE,CAAC;IAC1B;UAQS,QACF;UACE;UACA;UACA;UACO;AAEd,uBAAI,AAAa,8BAAqB,gCAAQ,AAAa,+BAAsB,iBAC/E,AAAO,AAA0D,MAA3D,UAAU,kBAAa,IAAI,kBAAiB,aAAa;AACO,MAAxE,AAAO,MAAD,UAAU,AAAK,IAAD,aAAa,AAAK,IAAD,cAAc,AAAW;IAChE;;UAGwB;AACtB,UAAI,AAAU,SAAM,KAAK,EACvB,MAAO;AACT,uBAAU,iBAAN,KAAK,GAAgB,mBACvB,MAAO;AACT,YAAa,AACT,mBADG,KAAK,KACY,YAAjB,AAAM,KAAD,aAAe;IAC7B;;AAGoB,YAAW,eAAX;IAAmB;;;QAtG1B;QACN;;UAIK,AAAa,YAAD,IAAI;AACvB,4EAAkB,UAAU;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+JrB;;;;;;IAMM;;;;;;+BAjB0B;AAC3C,YAAO,AAAa,AAAQ,AAAE,AAG1B,aAHe,cAAc,AAAa,AAAQ,YAAT,cACtC,AAAa,AAAW,AAAE,YAAd,iBAAiB,AAAa,AAAW,YAAZ,iBACzC,AAAa,AAAS,AAAE,YAAZ,eAAe,AAAa,AAAS,YAAV,eACvC,AAAa,AAAY,AAAE,YAAf,kBAAkB,AAAa,AAAY,YAAb;IACnD;;AAesB;IAAI;;;UAIb;UACE;UACN;AAEP,YAAO,uDACkB,KAAX,UAAU,QAAV,OAAmB,sCACJ,MAAb,YAAY,SAAZ,OAAqB,uCACZ,OAAX,UAAU,UAAV,OAAmB;IAEnC;;AAIE,YAAkB,gCAAI,AAAW;IACnC;UAGgC;AAC9B,YAAO,sDACO,AAAW,sBAAM,CAAC,iBAChB,AAAa,uBAAE,CAAC,eACP,aAAX,gCAAa,CAAC;IAE9B;aAGiC,GAAU;AACzC,UAAM,yBAAF,CAAC;AACsB,sBAAU,CAAC;AACpC,cAAO,wDACsB,gCAAK,AAAQ,OAAD,eAAe,mBAAc,CAAC,eAC9C,wBAAK,AAAQ,OAAD,aAAa,iBAAY,CAAC,eACjD,AAAQ,OAAD;;AAGvB,YAAa,gBAAS,CAAC,EAAE,CAAC;IAC5B;WAG+B,GAAU;AACvC,UAAM,yBAAF,CAAC;AACsB,sBAAU,CAAC;AACpC,cAAO,wDACsB,gCAAK,mBAAc,AAAQ,OAAD,eAAe,CAAC,eAC9C,wBAAK,iBAAY,AAAQ,OAAD,aAAa,CAAC,eACjD,AAAQ,OAAD;;AAGvB,YAAa,cAAO,CAAC,EAAE,CAAC;IAC1B;iBAGuB;;UAAsB;AAC3C,WAAO;;AACH,oBAAS,AAAa,AAAuB,AAAc,0BAA7B,aAAa,UAAU,IAAI,UAAU,AAAW;;;IACpF;iBAGuB;;UAAsB;AAC3C,WAAO;;AACH,oBAAS,AAAa,AAAuB,0BAAf,aAAa,UAAU,IAAI;;;IAC/D;qBAE2B,QAAc,QAAe,OAAc;;AAIxD,wBAAc,AAAO,MAAD;AAErB,qBAAgB,qBACzB,AAAY,WAAD,OACX,AAAY,WAAD,MACW,aAAtB,AAAY,WAAD,cAAa,KACF,aAAtB,AAAY,WAAD,cAAa;AAEf,qBAAgB,qBACP,aAAlB,AAAY,WAAD,UAA+B,aAAtB,AAAY,WAAD,cAAa,KAC5C,AAAY,WAAD,MACW,aAAtB,AAAY,WAAD,cAAa,KACF,aAAtB,AAAY,WAAD,cAAa;AAEf,qBAAgB,qBACP,aAAlB,AAAY,WAAD,UAA+B,aAAtB,AAAY,WAAD,cAAa,KACzB,aAAnB,AAAY,WAAD,WAAgC,aAAtB,AAAY,WAAD,cAAa,KACvB,aAAtB,AAAY,WAAD,cAAa,KACF,aAAtB,AAAY,WAAD,cAAa;AAEf,qBAAgB,qBACzB,AAAY,WAAD,OACQ,aAAnB,AAAY,WAAD,WAAgC,aAAtB,AAAY,WAAD,cAAa,KACvB,aAAtB,AAAY,WAAD,cAAa,KACF,aAAtB,AAAY,WAAD,cAAa;AAIb,6BAAyB,aAAN,KAAK,iBAAG,AAAY,WAAD,cAC/C,UAA0C,CAAzB,aAAN,KAAK,iBAAG,AAAY,WAAD,qBAAkB,CAAC,KAAK,QAC9C,oBAAE;AAEH,sCAAO;AACd,kBAAO,QAAQ,qBAAW,gBAAgB;AAC1C,kBAAwB,aAAjB,AAAY,WAAD,sBAAQ,AAAY,WAAD,aAAY,AAAY,WAAD;;;AAEhE,UAAU,aAAN,KAAK,iBAAG,AAAY,WAAD,aACrB,AAAK,AAAiD,IAAlD,QAAyB,aAAjB,AAAY,WAAD,sBAAQ,KAAK,GAAE,AAAY,WAAD;AAInD,UAAU,AAAS,aAAf,KAAK,iBAAG,MAAM,IAAqB,aAAlB,AAAY,WAAD,uBAAS,AAAY,WAAD;AAIM,cAHxD,IAAI;QAAJ;AACI,6BAAe,MAAM,EAAE;AACvB,qBAAyB,aAAlB,AAAY,WAAD,uBAAS,AAAY,WAAD,aAAY,AAAY,WAAD;AAC7D,qBAAO,QAAQ;;;YACd,KAAU,AAAS,aAAf,KAAK,iBAAG,MAAM,iBAAG,AAAY,WAAD;AACxB,iBAAuB,aAAlB,AAAY,WAAD,WAAgB,aAAN,KAAK,iBAAG,MAAM;AACxC,oBAAQ,UAAU,AAAG,EAAD,gBAAG,AAAY,WAAD;AAC0B,QAAzE,AAAK,IAAD,QAAQ,QAAQ,EAAmB,mBAAE,KAAK,EAAmB,qBAAE,KAAK;;AAG1E,aAAO,IAAI;YAAJ;AACH,oBAAO,AAAY,WAAD,QAAwB,aAAhB,AAAY,WAAD,qBAAO,AAAY,WAAD;AACvD,oBAAO,AAAY,WAAD,QAA2B,aAAnB,AAAY,WAAD,wBAAU,AAAY,WAAD;AAC1D,oBAAO,QAAQ,EAAE;AACjB,oBAAwB,aAAjB,AAAY,WAAD,sBAAQ,AAAY,WAAD,aAAY,AAAY,WAAD;AAC5D,oBAAO,QAAQ,EAAU,oBAAE;AAC3B,oBAAO,AAAY,WAAD,OAAuB,aAAhB,AAAY,WAAD,qBAAO,AAAY,WAAD;;;IAC5D;UAYS,QACF;UACE;UACA;UACA;UACO;AAEd,YAAO,AAAU,SAAD,IAAI;AACpB,YAAqB,AAAO,aAArB,aAAa,KAAI,OAAqB,aAAd,aAAa,KAAI;AAChD,qBAAO,oDAAoB;AAEf,kBAAQ,AAAW;AACnB,kBAAQ,AAAa,0BAAQ,IAAI;AACjC,mBAAS,AAAM,KAAD,SAA0B,aAAjB,AAAW,yBAAQ;AACtD,UAAI,AAAS,QAAD,IAAI,QAAkB,aAAV,SAAS,KAAI,OAAO,AAAc,aAAD,KAAI;AAC5B,QAA/B,AAAO,MAAD,WAAW,MAAM,EAAE,KAAK;;AAEjB,qBAAS,cAAW,KAAe,aAAV,SAAS,IAAc,aAAX,mBAAa,KAAK,aAAa;AACjF,gBAAQ,aAAa;;;AAEN,uBAAO,qBAAe,MAAM,EAAE,MAAM,EAAE,oBAAS,KAAc,AAAa,aAAtB,QAAQ,iBAAG,gCAAa,MAAM,IAAG,MAAM;AAC1E,YAA5B,AAAO,MAAD,UAAU,IAAI,EAAE,KAAK;AAC3B;;;;AAGW,uBAAO,qBAAe,MAAM,EAAE,MAAM,EAAE,oBAAS,KAAc,aAAT,QAAQ,iBAAG,mBAAa,MAAM;AACjE,YAA5B,AAAO,MAAD,UAAU,IAAI,EAAE,KAAK;AAC3B;;;;IAGR;;UAGwB;AACtB,UAAI,AAAU,SAAM,KAAK,EACvB,MAAO;AACT,uBAAU,iBAAN,KAAK,GAAgB,mBACvB,MAAO;AACT,YAAa,AAGT,0BAHG,KAAK,KACY,YAAjB,AAAM,KAAD,aAAe,oBACD,YAAnB,AAAM,KAAD,eAAiB,sBACtB,AAAM,AAAW,KAAZ,eAAe;IAC7B;;AAGoB,2BAAW,iBAAY,mBAAc;IAAW;;;QA5NvD;QACN;QACA;IADA;IACA;UACK,AAAa,YAAD,IAAI;UAChB,AAAmB,UAAT,IAAI,QAAmB,aAAX,UAAU,KAAI;AAC3C,0EAAkB,UAAU;;EAAC","file":"../../../../../../packages/flutter/src/material/input_border.dart.lib.js"}');
  // Exports:
  return {
    src__material__input_border: input_border
  };
}));

//# sourceMappingURL=input_border.dart.lib.js.map
