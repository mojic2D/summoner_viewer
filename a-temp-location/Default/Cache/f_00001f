define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__flutter__src__painting__placeholder_span_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var placeholder_span = Object.create(dart.library);
  var text_span = Object.create(dart.library);
  var inline_span = Object.create(dart.library);
  var text_painter = Object.create(dart.library);
  var $add = dartx.add;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $codeUnitAt = dartx.codeUnitAt;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $ceilToDouble = dartx.ceilToDouble;
  var $clamp = dartx.clamp;
  var $first = dartx.first;
  var $last = dartx.last;
  var PlaceholderAlignmentL = () => (PlaceholderAlignmentL = dart.constFn(dart.legacy(ui.PlaceholderAlignment)))();
  var EnumPropertyOfPlaceholderAlignmentL = () => (EnumPropertyOfPlaceholderAlignmentL = dart.constFn(diagnostics.EnumProperty$(PlaceholderAlignmentL())))();
  var TextBaselineL = () => (TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))();
  var EnumPropertyOfTextBaselineL = () => (EnumPropertyOfTextBaselineL = dart.constFn(diagnostics.EnumProperty$(TextBaselineL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var InlineSpanL = () => (InlineSpanL = dart.constFn(dart.legacy(inline_span.InlineSpan)))();
  var InlineSpanLToboolL = () => (InlineSpanLToboolL = dart.constFn(dart.fnType(boolL(), [InlineSpanL()])))();
  var InlineSpanSemanticsInformationL = () => (InlineSpanSemanticsInformationL = dart.constFn(dart.legacy(inline_span.InlineSpanSemanticsInformation)))();
  var JSArrayOfInlineSpanSemanticsInformationL = () => (JSArrayOfInlineSpanSemanticsInformationL = dart.constFn(_interceptors.JSArray$(InlineSpanSemanticsInformationL())))();
  var TextSpanL = () => (TextSpanL = dart.constFn(dart.legacy(text_span.TextSpan)))();
  var TapGestureRecognizerL = () => (TapGestureRecognizerL = dart.constFn(dart.legacy(tap.TapGestureRecognizer)))();
  var LongPressGestureRecognizerL = () => (LongPressGestureRecognizerL = dart.constFn(dart.legacy(long_press.LongPressGestureRecognizer)))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var JSArrayOfDiagnosticsNodeL = () => (JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(DiagnosticsNodeL())))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var GestureRecognizerL = () => (GestureRecognizerL = dart.constFn(dart.legacy(recognizer.GestureRecognizer)))();
  var DiagnosticsPropertyOfGestureRecognizerL = () => (DiagnosticsPropertyOfGestureRecognizerL = dart.constFn(diagnostics.DiagnosticsProperty$(GestureRecognizerL())))();
  var InlineSpanLToDiagnosticsNodeL = () => (InlineSpanLToDiagnosticsNodeL = dart.constFn(dart.fnType(DiagnosticsNodeL(), [InlineSpanL()])))();
  var TextWidthBasisL = () => (TextWidthBasisL = dart.constFn(dart.legacy(text_painter.TextWidthBasis)))();
  var PlaceholderDimensionsL = () => (PlaceholderDimensionsL = dart.constFn(dart.legacy(text_painter.PlaceholderDimensions)))();
  var PlaceholderSpanL = () => (PlaceholderSpanL = dart.constFn(dart.legacy(placeholder_span.PlaceholderSpan)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var VoidTointL = () => (VoidTointL = dart.constFn(dart.fnType(intL(), [])))();
  var TextBoxL = () => (TextBoxL = dart.constFn(dart.legacy(ui.TextBox)))();
  var JSArrayOfTextBoxL = () => (JSArrayOfTextBoxL = dart.constFn(_interceptors.JSArray$(TextBoxL())))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  const CT = Object.create(null);
  var L6 = "file:///C:/flutter/packages/flutter/lib/src/painting/text_painter.dart";
  var L4 = "file:///C:/flutter/packages/flutter/lib/src/painting/text_span.dart";
  var L2 = "package:flutter/src/painting/inline_span.dart";
  var L3 = "package:flutter/src/painting/placeholder_span.dart";
  var L7 = "package:flutter/src/painting/text_painter.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/painting/placeholder_span.dart";
  var L5 = "package:flutter/src/painting/text_span.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/painting/inline_span.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C1() {
      return C1 = dart.constList([], DiagnosticsNodeL());
    },
    get C2() {
      return C2 = dart.const({
        __proto__: inline_span.InlineSpanSemanticsInformation.prototype,
        [requiresOwnNode]: true,
        [isPlaceholder$]: true,
        [recognizer$0]: null,
        [semanticsLabel$0]: null,
        [text$0]: "ï¿¼"
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$]: "TextWidthBasis.parent",
        index: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$]: "TextWidthBasis.longestLine",
        index: 1
      });
    },
    get C5() {
      return C5 = dart.constList([C3 || CT.C3, C4 || CT.C4], TextWidthBasisL());
    },
    get C6() {
      return C6 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.start",
        index: 4
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: ui.ParagraphConstraints.prototype,
        [ParagraphConstraints_width]: 1 / 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name]: "TextBaseline.ideographic",
        index: 1
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.left",
        index: 0
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.right",
        index: 1
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.center",
        index: 2
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.justify",
        index: 3
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.end",
        index: 5
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.upstream",
        index: 0
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name]: "BoxWidthStyle.tight",
        index: 0
      });
    }
  }, false);
  var _name = dart.privateName(ui, "_name");
  var C0;
  var style$ = dart.privateName(inline_span, "InlineSpan.style");
  inline_span.InlineSpan = class InlineSpan extends diagnostics.DiagnosticableTree {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get text() {
      return null;
    }
    get children() {
      return null;
    }
    get recognizer() {
      return null;
    }
    getSpanForPosition(position) {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L1, 221, 12, "debugAssertIsValid()");
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        result = span.getSpanForPositionVisitor(position, offset);
        return result == null;
      }, InlineSpanLToboolL()));
      return result;
    }
    toPlainText(opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      let buffer = new core.StringBuffer.new();
      this.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
      return buffer.toString();
    }
    getSemanticsInformation() {
      let collector = JSArrayOfInlineSpanSemanticsInformationL().of([]);
      this.computeSemanticsInformation(collector);
      return collector;
    }
    codeUnitAt(index) {
      if (dart.notNull(index) < 0) return null;
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        result = span.codeUnitAtVisitor(index, offset);
        return result == null;
      }, InlineSpanLToboolL()));
      return result;
    }
    debugAssertIsValid() {
      return true;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return InlineSpanL().is(other) && dart.equals(other.style, this.style);
    }
    get hashCode() {
      return dart.hashCode(this.style);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics.DiagnosticsTreeStyle.whitespace;
      if (this.style != null) {
        this.style.debugFillProperties(properties);
      }
    }
  };
  (inline_span.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    this[style$] = style;
    inline_span.InlineSpan.__proto__.new.call(this);
    ;
  }).prototype = inline_span.InlineSpan.prototype;
  dart.addTypeTests(inline_span.InlineSpan);
  dart.addTypeCaches(inline_span.InlineSpan);
  dart.setMethodSignature(inline_span.InlineSpan, () => ({
    __proto__: dart.getMethods(inline_span.InlineSpan.__proto__),
    getSpanForPosition: dart.fnType(dart.legacy(inline_span.InlineSpan), [dart.legacy(ui.TextPosition)]),
    toPlainText: dart.fnType(dart.legacy(core.String), [], {includePlaceholders: dart.legacy(core.bool), includeSemanticsLabels: dart.legacy(core.bool)}, {}),
    getSemanticsInformation: dart.fnType(dart.legacy(core.List$(dart.legacy(inline_span.InlineSpanSemanticsInformation))), []),
    codeUnitAt: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    debugAssertIsValid: dart.fnType(dart.legacy(core.bool), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(inline_span.InlineSpan, () => ({
    __proto__: dart.getGetters(inline_span.InlineSpan.__proto__),
    text: dart.legacy(core.String),
    children: dart.legacy(core.List$(dart.legacy(inline_span.InlineSpan))),
    recognizer: dart.legacy(recognizer.GestureRecognizer),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(inline_span.InlineSpan, L2);
  dart.setFieldSignature(inline_span.InlineSpan, () => ({
    __proto__: dart.getFields(inline_span.InlineSpan.__proto__),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(inline_span.InlineSpan, ['_equals']);
  dart.defineExtensionAccessors(inline_span.InlineSpan, ['hashCode']);
  var alignment$ = dart.privateName(placeholder_span, "PlaceholderSpan.alignment");
  var baseline$ = dart.privateName(placeholder_span, "PlaceholderSpan.baseline");
  placeholder_span.PlaceholderSpan = class PlaceholderSpan extends inline_span.InlineSpan {
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    computeToPlainText(buffer, opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (dart.test(includePlaceholders)) {
        buffer.write("ï¿¼");
      }
    }
    computeSemanticsInformation(collector) {
      collector[$add](inline_span.InlineSpanSemanticsInformation.placeholder);
    }
    visitTextSpan(visitor) {
      if (!false) dart.assertFailed("visitTextSpan is deprecated. Use visitChildren to support InlineSpans", L0, 78, 12, "false");
      return false;
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      semanticsOffsets[$add](offset.value);
      semanticsOffsets[$add](dart.notNull(offset.value) + 1);
      semanticsElements[$add](null);
      offset.increment(1);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfPlaceholderAlignmentL()).new("alignment", this.alignment, {defaultValue: null}));
      properties.add(new (EnumPropertyOfTextBaselineL()).new("baseline", this.baseline, {defaultValue: null}));
    }
  };
  (placeholder_span.PlaceholderSpan.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C0 || CT.C0;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let style = opts && 'style' in opts ? opts.style : null;
    this[alignment$] = alignment;
    this[baseline$] = baseline;
    placeholder_span.PlaceholderSpan.__proto__.new.call(this, {style: style});
    ;
  }).prototype = placeholder_span.PlaceholderSpan.prototype;
  dart.addTypeTests(placeholder_span.PlaceholderSpan);
  dart.addTypeCaches(placeholder_span.PlaceholderSpan);
  dart.setMethodSignature(placeholder_span.PlaceholderSpan, () => ({
    __proto__: dart.getMethods(placeholder_span.PlaceholderSpan.__proto__),
    computeToPlainText: dart.fnType(dart.void, [dart.legacy(core.StringBuffer)], {includePlaceholders: dart.legacy(core.bool), includeSemanticsLabels: dart.legacy(core.bool)}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(inline_span.InlineSpanSemanticsInformation)))]),
    visitTextSpan: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(text_span.TextSpan)]))]),
    describeSemantics: dart.fnType(dart.void, [dart.legacy(inline_span.Accumulator), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.List)])
  }));
  dart.setLibraryUri(placeholder_span.PlaceholderSpan, L3);
  dart.setFieldSignature(placeholder_span.PlaceholderSpan, () => ({
    __proto__: dart.getFields(placeholder_span.PlaceholderSpan.__proto__),
    alignment: dart.finalFieldType(dart.legacy(ui.PlaceholderAlignment)),
    baseline: dart.finalFieldType(dart.legacy(ui.TextBaseline))
  }));
  var C1;
  var text$ = dart.privateName(text_span, "TextSpan.text");
  var children$ = dart.privateName(text_span, "TextSpan.children");
  var recognizer$ = dart.privateName(text_span, "TextSpan.recognizer");
  var semanticsLabel$ = dart.privateName(text_span, "TextSpan.semanticsLabel");
  text_span.TextSpan = class TextSpan extends inline_span.InlineSpan {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get recognizer() {
      return this[recognizer$];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    build(builder, opts) {
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let dimensions = opts && 'dimensions' in opts ? opts.dimensions : null;
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L4, 204, 12, "debugAssertIsValid()");
      let hasStyle = this.style != null;
      if (hasStyle) builder.pushStyle(this.style.getTextStyle({textScaleFactor: textScaleFactor}));
      if (this.text != null) builder.addText(this.text);
      if (this.children != null) {
        for (let child of this.children) {
          if (!(child != null)) dart.assertFailed(null, L4, 212, 16, "child != null");
          child.build(builder, {textScaleFactor: textScaleFactor, dimensions: dimensions});
        }
      }
      if (hasStyle) builder.pop();
    }
    visitChildren(visitor) {
      if (this.text != null) {
        if (!dart.test(visitor(this))) return false;
      }
      if (this.children != null) {
        for (let child of this.children) {
          if (!dart.test(child.visitChildren(visitor))) return false;
        }
      }
      return true;
    }
    visitTextSpan(visitor) {
      if (this.text != null) {
        if (!dart.test(visitor(this))) return false;
      }
      if (this.children != null) {
        for (let child of this.children) {
          if (!TextSpanL().is(child)) dart.assertFailed("visitTextSpan is deprecated. Use visitChildren to support InlineSpans", L4, 263, 11, "child is TextSpan");
          let textSpanChild = TextSpanL().as(child);
          if (!dart.test(textSpanChild.visitTextSpan(visitor))) return false;
        }
      }
      return true;
    }
    getSpanForPositionVisitor(position, offset) {
      if (this.text == null) {
        return null;
      }
      let affinity = position.affinity;
      let targetOffset = position.offset;
      let endOffset = dart.notNull(offset.value) + this.text.length;
      if (offset.value == targetOffset && dart.equals(affinity, ui.TextAffinity.downstream) || dart.notNull(offset.value) < dart.notNull(targetOffset) && dart.notNull(targetOffset) < endOffset || endOffset === targetOffset && dart.equals(affinity, ui.TextAffinity.upstream)) {
        return this;
      }
      offset.increment(this.text.length);
      return null;
    }
    computeToPlainText(buffer, opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L4, 298, 12, "debugAssertIsValid()");
      if (this.semanticsLabel != null && dart.test(includeSemanticsLabels)) {
        buffer.write(this.semanticsLabel);
      } else if (this.text != null) {
        buffer.write(this.text);
      }
      if (this.children != null) {
        for (let child of this.children) {
          child.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
        }
      }
    }
    computeSemanticsInformation(collector) {
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, L4, 316, 12, "debugAssertIsValid()");
      if (this.text != null || this.semanticsLabel != null) {
        collector[$add](new inline_span.InlineSpanSemanticsInformation.new(this.text, {semanticsLabel: this.semanticsLabel, recognizer: this.recognizer}));
      }
      if (this.children != null) {
        for (let child of this.children) {
          child.computeSemanticsInformation(collector);
        }
      }
    }
    codeUnitAtVisitor(index, offset) {
      if (this.text == null) {
        return null;
      }
      if (dart.notNull(index) - dart.notNull(offset.value) < this.text.length) {
        return this.text[$codeUnitAt](dart.notNull(index) - dart.notNull(offset.value));
      }
      offset.increment(this.text.length);
      return null;
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      let t0, t0$;
      if (this.recognizer != null && (TapGestureRecognizerL().is(this.recognizer) || LongPressGestureRecognizerL().is(this.recognizer))) {
        let length = (t0$ = (t0 = this.semanticsLabel, t0 == null ? null : t0.length), t0$ == null ? this.text.length : t0$);
        semanticsOffsets[$add](offset.value);
        semanticsOffsets[$add](dart.notNull(offset.value) + dart.notNull(length));
        semanticsElements[$add](this.recognizer);
      }
      offset.increment(this.text != null ? this.text.length : 0);
    }
    debugAssertIsValid() {
      if (!dart.test(dart.fn(() => {
        if (this.children != null) {
          for (let child of this.children) {
            if (child == null) {
              dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("TextSpan contains a null child."), new assertions.ErrorDescription.new("A TextSpan object with a non-null child list should not have any nulls in its child list."), this.toDiagnosticsNode({name: "The full text in question was", style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
            }
            if (!dart.test(child.debugAssertIsValid())) dart.assertFailed(null, L4, 379, 18, "child.debugAssertIsValid()");
          }
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L4, 367, 12, "() {\r\n      if (children != null) {\r\n        for (final InlineSpan child in children) {\r\n          if (child == null) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('TextSpan contains a null child.'),\r\n              ErrorDescription(\r\n                  'A TextSpan object with a non-null child list should not have any nulls in its child list.'),\r\n              toDiagnosticsNode(name: 'The full text in question was',\r\n                  style: DiagnosticsTreeStyle.errorProperty),\r\n            ]);\r\n          }\r\n          assert(child.debugAssertIsValid());\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return super.debugAssertIsValid();
    }
    compareTo(other) {
      let t0, t0$;
      if (this === other) return basic_types.RenderComparison.identical;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return basic_types.RenderComparison.layout;
      let textSpan = TextSpanL().as(other);
      if (textSpan.text != this.text || (t0 = this.children, t0 == null ? null : t0[$length]) != (t0$ = textSpan.children, t0$ == null ? null : t0$[$length]) || !(this.style == null)[$_equals](textSpan.style == null)) return basic_types.RenderComparison.layout;
      let result = dart.equals(this.recognizer, textSpan.recognizer) ? basic_types.RenderComparison.identical : basic_types.RenderComparison.metadata;
      if (this.style != null) {
        let candidate = this.style.compareTo(textSpan.style);
        if (dart.notNull(candidate.index) > dart.notNull(result.index)) result = candidate;
        if (result == basic_types.RenderComparison.layout) return result;
      }
      if (this.children != null) {
        for (let index = 0; index < dart.notNull(this.children[$length]); index = index + 1) {
          let candidate = this.children[$_get](index).compareTo(textSpan.children[$_get](index));
          if (dart.notNull(candidate.index) > dart.notNull(result.index)) result = candidate;
          if (result == basic_types.RenderComparison.layout) return result;
        }
      }
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      if (!super._equals(other)) return false;
      return TextSpanL().is(other) && other.text == this.text && dart.equals(other.recognizer, this.recognizer) && other.semanticsLabel == this.semanticsLabel && dart.test(collections.listEquals(InlineSpanL(), other.children, this.children));
    }
    get hashCode() {
      return ui.hashValues(super.hashCode, this.text, this.recognizer, this.semanticsLabel, ui.hashList(this.children));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "TextSpan");
    }
    debugFillProperties(properties) {
      let t0, t0$;
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("text", this.text, {showName: false, defaultValue: null}));
      if (this.style == null && this.text == null && this.children == null) properties.add(diagnostics.DiagnosticsNode.message("(empty)"));
      properties.add(new (DiagnosticsPropertyOfGestureRecognizerL()).new("recognizer", this.recognizer, {description: (t0$ = (t0 = this.recognizer, t0 == null ? null : dart.runtimeType(t0)), t0$ == null ? null : dart.toString(t0$)), defaultValue: null}));
      if (this.semanticsLabel != null) {
        properties.add(new diagnostics.StringProperty.new("semanticsLabel", this.semanticsLabel));
      }
    }
    debugDescribeChildren() {
      if (this.children == null) return C1 || CT.C1;
      return this.children[$map](DiagnosticsNodeL(), dart.fn(child => {
        if (child != null) {
          return child.toDiagnosticsNode();
        } else {
          return diagnostics.DiagnosticsNode.message("<null child>");
        }
      }, InlineSpanLToDiagnosticsNodeL()))[$toList]();
    }
  };
  (text_span.TextSpan.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    this[text$] = text;
    this[children$] = children;
    this[recognizer$] = recognizer;
    this[semanticsLabel$] = semanticsLabel;
    text_span.TextSpan.__proto__.new.call(this, {style: style});
    ;
  }).prototype = text_span.TextSpan.prototype;
  dart.addTypeTests(text_span.TextSpan);
  dart.addTypeCaches(text_span.TextSpan);
  dart.setMethodSignature(text_span.TextSpan, () => ({
    __proto__: dart.getMethods(text_span.TextSpan.__proto__),
    build: dart.fnType(dart.void, [dart.legacy(ui.ParagraphBuilder)], {dimensions: dart.legacy(core.List$(dart.legacy(text_painter.PlaceholderDimensions))), textScaleFactor: dart.legacy(core.double)}, {}),
    visitChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(inline_span.InlineSpan)]))]),
    visitTextSpan: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(text_span.TextSpan)]))]),
    getSpanForPositionVisitor: dart.fnType(dart.legacy(inline_span.InlineSpan), [dart.legacy(ui.TextPosition), dart.legacy(inline_span.Accumulator)]),
    computeToPlainText: dart.fnType(dart.void, [dart.legacy(core.StringBuffer)], {includePlaceholders: dart.legacy(core.bool), includeSemanticsLabels: dart.legacy(core.bool)}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(inline_span.InlineSpanSemanticsInformation)))]),
    codeUnitAtVisitor: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(inline_span.Accumulator)]),
    describeSemantics: dart.fnType(dart.void, [dart.legacy(inline_span.Accumulator), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.List)]),
    compareTo: dart.fnType(dart.legacy(basic_types.RenderComparison), [dart.legacy(inline_span.InlineSpan)]),
    toStringShort: dart.fnType(dart.legacy(core.String), []),
    debugDescribeChildren: dart.fnType(dart.legacy(core.List$(dart.legacy(diagnostics.DiagnosticsNode))), [])
  }));
  dart.setLibraryUri(text_span.TextSpan, L5);
  dart.setFieldSignature(text_span.TextSpan, () => ({
    __proto__: dart.getFields(text_span.TextSpan.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(inline_span.InlineSpan)))),
    recognizer: dart.finalFieldType(dart.legacy(recognizer.GestureRecognizer)),
    semanticsLabel: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text_span.TextSpan, ['_equals']);
  dart.defineExtensionAccessors(text_span.TextSpan, ['hashCode']);
  var _value$ = dart.privateName(inline_span, "_value");
  inline_span.Accumulator = class Accumulator extends core.Object {
    get value() {
      return this[_value$];
    }
    increment(addend) {
      if (!(dart.notNull(addend) >= 0)) dart.assertFailed(null, L1, 30, 12, "addend >= 0");
      this[_value$] = dart.notNull(this[_value$]) + dart.notNull(addend);
    }
  };
  (inline_span.Accumulator.new = function(_value = 0) {
    this[_value$] = _value;
    ;
  }).prototype = inline_span.Accumulator.prototype;
  dart.addTypeTests(inline_span.Accumulator);
  dart.addTypeCaches(inline_span.Accumulator);
  dart.setMethodSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getMethods(inline_span.Accumulator.__proto__),
    increment: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getGetters(inline_span.Accumulator.__proto__),
    value: dart.legacy(core.int)
  }));
  dart.setLibraryUri(inline_span.Accumulator, L2);
  dart.setFieldSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getFields(inline_span.Accumulator.__proto__),
    [_value$]: dart.fieldType(dart.legacy(core.int))
  }));
  var text$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.text");
  var semanticsLabel$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.semanticsLabel");
  var recognizer$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.recognizer");
  var isPlaceholder$ = dart.privateName(inline_span, "InlineSpanSemanticsInformation.isPlaceholder");
  var requiresOwnNode = dart.privateName(inline_span, "InlineSpanSemanticsInformation.requiresOwnNode");
  var C2;
  inline_span.InlineSpanSemanticsInformation = class InlineSpanSemanticsInformation extends core.Object {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$0];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get recognizer() {
      return this[recognizer$0];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get isPlaceholder() {
      return this[isPlaceholder$];
    }
    set isPlaceholder(value) {
      super.isPlaceholder = value;
    }
    get requiresOwnNode() {
      return this[requiresOwnNode];
    }
    set requiresOwnNode(value) {
      super.requiresOwnNode = value;
    }
    _equals(other) {
      if (other == null) return false;
      return InlineSpanSemanticsInformationL().is(other) && other.text == this.text && other.semanticsLabel == this.semanticsLabel && dart.equals(other.recognizer, this.recognizer) && dart.equals(other.isPlaceholder, this.isPlaceholder);
    }
    get hashCode() {
      return ui.hashValues(this.text, this.semanticsLabel, this.recognizer, this.isPlaceholder);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "InlineSpanSemanticsInformation")) + "{text: " + dart.str(this.text) + ", semanticsLabel: " + dart.str(this.semanticsLabel) + ", recognizer: " + dart.str(this.recognizer) + "}";
    }
  };
  (inline_span.InlineSpanSemanticsInformation.new = function(text, opts) {
    let isPlaceholder = opts && 'isPlaceholder' in opts ? opts.isPlaceholder : false;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    this[text$0] = text;
    this[isPlaceholder$] = isPlaceholder;
    this[semanticsLabel$0] = semanticsLabel;
    this[recognizer$0] = recognizer;
    if (!(text != null)) dart.assertFailed(null, L1, 61, 15, "text != null");
    if (!(isPlaceholder != null)) dart.assertFailed(null, L1, 62, 15, "isPlaceholder != null");
    if (!(dart.equals(isPlaceholder, false) || text === "ï¿¼" && semanticsLabel == null && recognizer == null)) dart.assertFailed(null, L1, 63, 15, "isPlaceholder == false || (text == '\\uFFFC' && semanticsLabel == null && recognizer == null)");
    this[requiresOwnNode] = dart.test(isPlaceholder) || recognizer != null;
    ;
  }).prototype = inline_span.InlineSpanSemanticsInformation.prototype;
  dart.addTypeTests(inline_span.InlineSpanSemanticsInformation);
  dart.addTypeCaches(inline_span.InlineSpanSemanticsInformation);
  dart.setMethodSignature(inline_span.InlineSpanSemanticsInformation, () => ({
    __proto__: dart.getMethods(inline_span.InlineSpanSemanticsInformation.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(inline_span.InlineSpanSemanticsInformation, () => ({
    __proto__: dart.getGetters(inline_span.InlineSpanSemanticsInformation.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(inline_span.InlineSpanSemanticsInformation, L2);
  dart.setFieldSignature(inline_span.InlineSpanSemanticsInformation, () => ({
    __proto__: dart.getFields(inline_span.InlineSpanSemanticsInformation.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    semanticsLabel: dart.finalFieldType(dart.legacy(core.String)),
    recognizer: dart.finalFieldType(dart.legacy(recognizer.GestureRecognizer)),
    isPlaceholder: dart.finalFieldType(dart.legacy(core.bool)),
    requiresOwnNode: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(inline_span.InlineSpanSemanticsInformation, ['_equals', 'toString']);
  dart.defineExtensionAccessors(inline_span.InlineSpanSemanticsInformation, ['hashCode']);
  dart.defineLazy(inline_span.InlineSpanSemanticsInformation, {
    /*inline_span.InlineSpanSemanticsInformation.placeholder*/get placeholder() {
      return C2 || CT.C2;
    }
  }, true);
  var size$ = dart.privateName(text_painter, "PlaceholderDimensions.size");
  var alignment$0 = dart.privateName(text_painter, "PlaceholderDimensions.alignment");
  var baselineOffset$ = dart.privateName(text_painter, "PlaceholderDimensions.baselineOffset");
  var baseline$0 = dart.privateName(text_painter, "PlaceholderDimensions.baseline");
  text_painter.PlaceholderDimensions = class PlaceholderDimensions extends core.Object {
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baselineOffset() {
      return this[baselineOffset$];
    }
    set baselineOffset(value) {
      super.baselineOffset = value;
    }
    get baseline() {
      return this[baseline$0];
    }
    set baseline(value) {
      super.baseline = value;
    }
    toString() {
      return "PlaceholderDimensions(" + dart.str(this.size) + ", " + dart.str(this.baseline) + ")";
    }
  };
  (text_painter.PlaceholderDimensions.new = function(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
    this[size$] = size;
    this[alignment$0] = alignment;
    this[baseline$0] = baseline;
    this[baselineOffset$] = baselineOffset;
    if (!(size != null)) dart.assertFailed(null, L6, 46, 15, "size != null");
    if (!(alignment != null)) dart.assertFailed(null, L6, 47, 15, "alignment != null");
    ;
  }).prototype = text_painter.PlaceholderDimensions.prototype;
  dart.addTypeTests(text_painter.PlaceholderDimensions);
  dart.addTypeCaches(text_painter.PlaceholderDimensions);
  dart.setMethodSignature(text_painter.PlaceholderDimensions, () => ({
    __proto__: dart.getMethods(text_painter.PlaceholderDimensions.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text_painter.PlaceholderDimensions, L7);
  dart.setFieldSignature(text_painter.PlaceholderDimensions, () => ({
    __proto__: dart.getFields(text_painter.PlaceholderDimensions.__proto__),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    alignment: dart.finalFieldType(dart.legacy(ui.PlaceholderAlignment)),
    baselineOffset: dart.finalFieldType(dart.legacy(core.double)),
    baseline: dart.finalFieldType(dart.legacy(ui.TextBaseline))
  }));
  dart.defineExtensionMethods(text_painter.PlaceholderDimensions, ['toString']);
  var _name$ = dart.privateName(text_painter, "_name");
  var C3;
  var C4;
  var C5;
  text_painter.TextWidthBasis = class TextWidthBasis extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_painter.TextWidthBasis.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_painter.TextWidthBasis.prototype;
  dart.addTypeTests(text_painter.TextWidthBasis);
  dart.addTypeCaches(text_painter.TextWidthBasis);
  dart.setMethodSignature(text_painter.TextWidthBasis, () => ({
    __proto__: dart.getMethods(text_painter.TextWidthBasis.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text_painter.TextWidthBasis, L7);
  dart.setFieldSignature(text_painter.TextWidthBasis, () => ({
    __proto__: dart.getFields(text_painter.TextWidthBasis.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text_painter.TextWidthBasis, ['toString']);
  text_painter.TextWidthBasis.parent = C3 || CT.C3;
  text_painter.TextWidthBasis.longestLine = C4 || CT.C4;
  text_painter.TextWidthBasis.values = C5 || CT.C5;
  var offset$ = dart.privateName(text_painter, "_CaretMetrics.offset");
  var fullHeight$ = dart.privateName(text_painter, "_CaretMetrics.fullHeight");
  text_painter._CaretMetrics = class _CaretMetrics extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get fullHeight() {
      return this[fullHeight$];
    }
    set fullHeight(value) {
      super.fullHeight = value;
    }
  };
  (text_painter._CaretMetrics.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
    this[offset$] = offset;
    this[fullHeight$] = fullHeight;
    ;
  }).prototype = text_painter._CaretMetrics.prototype;
  dart.addTypeTests(text_painter._CaretMetrics);
  dart.addTypeCaches(text_painter._CaretMetrics);
  dart.setLibraryUri(text_painter._CaretMetrics, L7);
  dart.setFieldSignature(text_painter._CaretMetrics, () => ({
    __proto__: dart.getFields(text_painter._CaretMetrics.__proto__),
    offset: dart.finalFieldType(dart.legacy(ui.Offset)),
    fullHeight: dart.finalFieldType(dart.legacy(core.double))
  }));
  var C6;
  var _paragraph = dart.privateName(text_painter, "_paragraph");
  var _needsLayout = dart.privateName(text_painter, "_needsLayout");
  var _layoutTemplate = dart.privateName(text_painter, "_layoutTemplate");
  var _inlinePlaceholderBoxes = dart.privateName(text_painter, "_inlinePlaceholderBoxes");
  var _inlinePlaceholderScales = dart.privateName(text_painter, "_inlinePlaceholderScales");
  var _placeholderDimensions = dart.privateName(text_painter, "_placeholderDimensions");
  var _lastMinWidth = dart.privateName(text_painter, "_lastMinWidth");
  var _lastMaxWidth = dart.privateName(text_painter, "_lastMaxWidth");
  var _caretMetrics = dart.privateName(text_painter, "_caretMetrics");
  var _previousCaretPosition = dart.privateName(text_painter, "_previousCaretPosition");
  var _previousCaretPrototype = dart.privateName(text_painter, "_previousCaretPrototype");
  var _text = dart.privateName(text_painter, "_text");
  var _textAlign = dart.privateName(text_painter, "_textAlign");
  var _textDirection = dart.privateName(text_painter, "_textDirection");
  var _textScaleFactor = dart.privateName(text_painter, "_textScaleFactor");
  var _maxLines = dart.privateName(text_painter, "_maxLines");
  var _ellipsis = dart.privateName(text_painter, "_ellipsis");
  var _locale = dart.privateName(text_painter, "_locale");
  var _strutStyle = dart.privateName(text_painter, "_strutStyle");
  var _textWidthBasis = dart.privateName(text_painter, "_textWidthBasis");
  var _textHeightBehavior = dart.privateName(text_painter, "_textHeightBehavior");
  var _createParagraphStyle = dart.privateName(text_painter, "_createParagraphStyle");
  var ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  var C7;
  var _applyFloatingPointHack = dart.privateName(text_painter, "_applyFloatingPointHack");
  var C8;
  var C9;
  var _emptyOffset = dart.privateName(text_painter, "_emptyOffset");
  var _getRectFromUpstream = dart.privateName(text_painter, "_getRectFromUpstream");
  var _getRectFromDownstream = dart.privateName(text_painter, "_getRectFromDownstream");
  var C10;
  var C11;
  var C12;
  var C13;
  var C14;
  var C15;
  var C16;
  var _computeCaretMetrics = dart.privateName(text_painter, "_computeCaretMetrics");
  var C17;
  var C18;
  var C19;
  var C20;
  text_painter.TextPainter = class TextPainter extends core.Object {
    markNeedsLayout() {
      this[_paragraph] = null;
      this[_needsLayout] = true;
      this[_previousCaretPosition] = null;
      this[_previousCaretPrototype] = null;
    }
    get text() {
      return this[_text];
    }
    set text(value) {
      let t0, t0$;
      if (!(value == null || dart.test(value.debugAssertIsValid()))) dart.assertFailed(null, L6, 193, 12, "value == null || value.debugAssertIsValid()");
      if (dart.equals(this[_text], value)) return;
      if (!dart.equals((t0 = this[_text], t0 == null ? null : t0.style), (t0$ = value, t0$ == null ? null : t0$.style))) this[_layoutTemplate] = null;
      this[_text] = value;
      this.markNeedsLayout();
    }
    get textAlign() {
      return this[_textAlign];
    }
    set textAlign(value) {
      if (!(value != null)) dart.assertFailed(null, L6, 210, 12, "value != null");
      if (dart.equals(this[_textAlign], value)) return;
      this[_textAlign] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (dart.equals(this[_textDirection], value)) return;
      this[_textDirection] = value;
      this.markNeedsLayout();
      this[_layoutTemplate] = null;
    }
    get textScaleFactor() {
      return this[_textScaleFactor];
    }
    set textScaleFactor(value) {
      if (!(value != null)) dart.assertFailed(null, L6, 251, 12, "value != null");
      if (this[_textScaleFactor] == value) return;
      this[_textScaleFactor] = value;
      this.markNeedsLayout();
      this[_layoutTemplate] = null;
    }
    get ellipsis() {
      return this[_ellipsis];
    }
    set ellipsis(value) {
      if (!(value == null || value[$isNotEmpty])) dart.assertFailed(null, L6, 278, 12, "value == null || value.isNotEmpty");
      if (this[_ellipsis] == value) return;
      this[_ellipsis] = value;
      this.markNeedsLayout();
    }
    get locale() {
      return this[_locale];
    }
    set locale(value) {
      if (dart.equals(this[_locale], value)) return;
      this[_locale] = value;
      this.markNeedsLayout();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, L6, 306, 12, "value == null || value > 0");
      if (this[_maxLines] == value) return;
      this[_maxLines] = value;
      this.markNeedsLayout();
    }
    get strutStyle() {
      return this[_strutStyle];
    }
    set strutStyle(value) {
      if (dart.equals(this[_strutStyle], value)) return;
      this[_strutStyle] = value;
      this.markNeedsLayout();
    }
    get textWidthBasis() {
      return this[_textWidthBasis];
    }
    set textWidthBasis(value) {
      if (!(value != null)) dart.assertFailed(null, L6, 340, 12, "value != null");
      if (this[_textWidthBasis] == value) return;
      this[_textWidthBasis] = value;
      this.markNeedsLayout();
    }
    get textHeightBehavior() {
      return this[_textHeightBehavior];
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textHeightBehavior], value)) return;
      this[_textHeightBehavior] = value;
      this.markNeedsLayout();
    }
    get inlinePlaceholderBoxes() {
      return this[_inlinePlaceholderBoxes];
    }
    get inlinePlaceholderScales() {
      return this[_inlinePlaceholderScales];
    }
    setPlaceholderDimensions(value) {
      if (value == null || dart.test(value[$isEmpty]) || dart.test(collections.listEquals(PlaceholderDimensionsL(), value, this[_placeholderDimensions]))) {
        return;
      }
      if (!(dart.fn(() => {
        let placeholderCount = 0;
        this.text.visitChildren(dart.fn(span => {
          if (PlaceholderSpanL().is(span)) {
            placeholderCount = placeholderCount + 1;
          }
          return true;
        }, InlineSpanLToboolL()));
        return placeholderCount;
      }, VoidTointL())() == value[$length])) dart.assertFailed(null, L6, 390, 12, "() {\r\n      int placeholderCount = 0;\r\n      text.visitChildren((InlineSpan span) {\r\n        if (span is PlaceholderSpan) {\r\n          placeholderCount += 1;\r\n        }\r\n        return true;\r\n      });\r\n      return placeholderCount;\r\n    }() == value.length");
      this[_placeholderDimensions] = value;
      this.markNeedsLayout();
    }
    [_createParagraphStyle](defaultTextDirection = null) {
      let t1, t0, t1$, t0$;
      if (!(this.textAlign != null)) dart.assertFailed(null, L6, 408, 12, "textAlign != null");
      if (!(this.textDirection != null || defaultTextDirection != null)) dart.assertFailed("TextPainter.textDirection must be set to a non-null value before using the TextPainter.", L6, 409, 12, "textDirection != null || defaultTextDirection != null");
      t0$ = (t0 = this[_text].style, t0 == null ? null : t0.getParagraphStyle({textAlign: this.textAlign, textDirection: (t1 = this.textDirection, t1 == null ? defaultTextDirection : t1), textScaleFactor: this.textScaleFactor, maxLines: this[_maxLines], textHeightBehavior: this[_textHeightBehavior], ellipsis: this[_ellipsis], locale: this[_locale], strutStyle: this[_strutStyle]}));
      return t0$ == null ? ui.ParagraphStyle.new({textAlign: this.textAlign, textDirection: (t1$ = this.textDirection, t1$ == null ? defaultTextDirection : t1$), maxLines: this.maxLines, textHeightBehavior: this[_textHeightBehavior], ellipsis: this.ellipsis, locale: this.locale}) : t0$;
    }
    get preferredLineHeight() {
      let t0, t0$;
      if (this[_layoutTemplate] == null) {
        let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle](ui.TextDirection.rtl));
        if ((t0 = this.text, t0 == null ? null : t0.style) != null) builder.pushStyle(this.text.style.getTextStyle({textScaleFactor: this.textScaleFactor}));
        builder.addText(" ");
        this[_layoutTemplate] = (t0$ = builder.build(), (() => {
          t0$.layout(C7 || CT.C7);
          return t0$;
        })());
      }
      return this[_layoutTemplate].height;
    }
    [_applyFloatingPointHack](layoutValue) {
      return layoutValue[$ceilToDouble]();
    }
    get minIntrinsicWidth() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 471, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](this[_paragraph].minIntrinsicWidth);
    }
    get maxIntrinsicWidth() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 479, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](this[_paragraph].maxIntrinsicWidth);
    }
    get width() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 487, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](this.textWidthBasis == text_painter.TextWidthBasis.longestLine ? this[_paragraph].longestLine : this[_paragraph].width);
    }
    get height() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 497, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](this[_paragraph].height);
    }
    get size() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 505, 12, "!_needsLayout");
      return new ui.Size.new(this.width, this.height);
    }
    computeDistanceToActualBaseline(baseline) {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 514, 12, "!_needsLayout");
      if (!(baseline != null)) dart.assertFailed(null, L6, 515, 12, "baseline != null");
      switch (baseline) {
        case C8 || CT.C8:
        {
          return this[_paragraph].alphabeticBaseline;
        }
        case C9 || CT.C9:
        {
          return this[_paragraph].ideographicBaseline;
        }
      }
      return null;
    }
    get didExceedMaxLines() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 537, 12, "!_needsLayout");
      return this[_paragraph].didExceedMaxLines;
    }
    layout(opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (!(this.text != null)) dart.assertFailed("TextPainter.text must be set to a non-null value before using the TextPainter.", L6, 553, 12, "text != null");
      if (!(this.textDirection != null)) dart.assertFailed("TextPainter.textDirection must be set to a non-null value before using the TextPainter.", L6, 554, 12, "textDirection != null");
      if (!dart.test(this[_needsLayout]) && minWidth == this[_lastMinWidth] && maxWidth == this[_lastMaxWidth]) return;
      this[_needsLayout] = false;
      if (this[_paragraph] == null) {
        let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle]());
        this[_text].build(builder, {textScaleFactor: this.textScaleFactor, dimensions: this[_placeholderDimensions]});
        this[_inlinePlaceholderScales] = builder.placeholderScales;
        this[_paragraph] = builder.build();
      }
      this[_lastMinWidth] = minWidth;
      this[_lastMaxWidth] = maxWidth;
      this[_previousCaretPosition] = null;
      this[_previousCaretPrototype] = null;
      this[_paragraph].layout(new ui.ParagraphConstraints.new({width: maxWidth}));
      if (minWidth != maxWidth) {
        let newWidth = this.maxIntrinsicWidth[$clamp](minWidth, maxWidth);
        if (newWidth !== this[_applyFloatingPointHack](this[_paragraph].width)) {
          this[_paragraph].layout(new ui.ParagraphConstraints.new({width: newWidth}));
        }
      }
      this[_inlinePlaceholderBoxes] = this[_paragraph].getBoxesForPlaceholders();
    }
    paint(canvas, offset) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(this[_needsLayout])) {
          dart.throw(assertions.FlutterError.new("TextPainter.paint called when text geometry was not yet calculated.\n" + "Please call layout() before paint() to position the text before painting it."));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L6, 592, 12, "() {\r\n      if (_needsLayout) {\r\n        throw FlutterError(\r\n          'TextPainter.paint called when text geometry was not yet calculated.\\n'\r\n          'Please call layout() before paint() to position the text before painting it.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      canvas.drawParagraph(this[_paragraph], offset);
    }
    static _isUtf16Surrogate(value) {
      return (dart.notNull(value) & 63488) === 55296;
    }
    static _isUnicodeDirectionality(value) {
      return value === 8207 || value === 8206;
    }
    getOffsetAfter(offset) {
      let nextCodeUnit = this[_text].codeUnitAt(offset);
      if (nextCodeUnit == null) return null;
      return dart.test(text_painter.TextPainter._isUtf16Surrogate(nextCodeUnit)) ? dart.notNull(offset) + 2 : dart.notNull(offset) + 1;
    }
    getOffsetBefore(offset) {
      let prevCodeUnit = this[_text].codeUnitAt(dart.notNull(offset) - 1);
      if (prevCodeUnit == null) return null;
      return dart.test(text_painter.TextPainter._isUtf16Surrogate(prevCodeUnit)) ? dart.notNull(offset) - 2 : dart.notNull(offset) - 1;
    }
    [_getRectFromUpstream](offset, caretPrototype) {
      let flattenedText = this[_text].toPlainText({includePlaceholders: false});
      let prevCodeUnit = this[_text].codeUnitAt(math.max(intL(), 0, dart.notNull(offset) - 1));
      if (prevCodeUnit == null) return null;
      let needsSearch = dart.test(text_painter.TextPainter._isUtf16Surrogate(prevCodeUnit)) || this[_text].codeUnitAt(offset) === 8205 || dart.test(text_painter.TextPainter._isUnicodeDirectionality(prevCodeUnit));
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = JSArrayOfTextBoxL().of([]);
      while (dart.test(boxes[$isEmpty]) && flattenedText != null) {
        let prevRuneOffset = dart.notNull(offset) - graphemeClusterLength;
        boxes = this[_paragraph].getBoxesForRange(prevRuneOffset, offset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (dart.test(boxes[$isEmpty])) {
          if (!needsSearch) {
            break;
          }
          if (prevRuneOffset < -flattenedText.length) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$first];
        if (prevCodeUnit === 10) {
          return new ui.Rect.fromLTRB(this[_emptyOffset].dx, box.bottom, this[_emptyOffset].dx, dart.notNull(box.bottom) + dart.notNull(box.bottom) - dart.notNull(box.top));
        }
        let caretEnd = box.end;
        let dx = dart.equals(box.direction, ui.TextDirection.rtl) ? dart.notNull(caretEnd) - dart.notNull(caretPrototype.width) : caretEnd;
        return new ui.Rect.fromLTRB(math.min(doubleL(), dx, this[_paragraph].width), box.top, math.min(doubleL(), dx, this[_paragraph].width), box.bottom);
      }
      return null;
    }
    [_getRectFromDownstream](offset, caretPrototype) {
      let flattenedText = this[_text].toPlainText({includePlaceholders: false});
      let nextCodeUnit = this[_text].codeUnitAt(math.min(intL(), offset, flattenedText == null ? 0 : flattenedText.length - 1));
      if (nextCodeUnit == null) return null;
      let needsSearch = dart.test(text_painter.TextPainter._isUtf16Surrogate(nextCodeUnit)) || nextCodeUnit === 8205 || dart.test(text_painter.TextPainter._isUnicodeDirectionality(nextCodeUnit));
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = JSArrayOfTextBoxL().of([]);
      while (dart.test(boxes[$isEmpty]) && flattenedText != null) {
        let nextRuneOffset = dart.notNull(offset) + graphemeClusterLength;
        boxes = this[_paragraph].getBoxesForRange(offset, nextRuneOffset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (dart.test(boxes[$isEmpty])) {
          if (!needsSearch) {
            break;
          }
          if (nextRuneOffset >= flattenedText.length << 1 >>> 0) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$last];
        let caretStart = box.start;
        let dx = dart.equals(box.direction, ui.TextDirection.rtl) ? dart.notNull(caretStart) - dart.notNull(caretPrototype.width) : caretStart;
        return new ui.Rect.fromLTRB(math.min(doubleL(), dx, this[_paragraph].width), box.top, math.min(doubleL(), dx, this[_paragraph].width), box.bottom);
      }
      return null;
    }
    get [_emptyOffset]() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 736, 12, "!_needsLayout");
      if (!(this.textAlign != null)) dart.assertFailed(null, L6, 737, 12, "textAlign != null");
      switch (this.textAlign) {
        case C10 || CT.C10:
        {
          return ui.Offset.zero;
        }
        case C11 || CT.C11:
        {
          return new ui.Offset.new(this.width, 0.0);
        }
        case C12 || CT.C12:
        {
          return new ui.Offset.new(dart.notNull(this.width) / 2.0, 0.0);
        }
        case C15 || CT.C15:
        case C6 || CT.C6:
        {
          if (!(this.textDirection != null)) dart.assertFailed(null, L6, 747, 16, "textDirection != null");
          switch (this.textDirection) {
            case C13 || CT.C13:
            {
              return new ui.Offset.new(this.width, 0.0);
            }
            case C14 || CT.C14:
            {
              return ui.Offset.zero;
            }
          }
          return null;
        }
        case C16 || CT.C16:
        {
          if (!(this.textDirection != null)) dart.assertFailed(null, L6, 756, 16, "textDirection != null");
          switch (this.textDirection) {
            case C13 || CT.C13:
            {
              return ui.Offset.zero;
            }
            case C14 || CT.C14:
            {
              return new ui.Offset.new(this.width, 0.0);
            }
          }
          return null;
        }
      }
      return null;
    }
    getOffsetForCaret(position, caretPrototype) {
      this[_computeCaretMetrics](position, caretPrototype);
      return this[_caretMetrics].offset;
    }
    getFullHeightForCaret(position, caretPrototype) {
      this[_computeCaretMetrics](position, caretPrototype);
      return this[_caretMetrics].fullHeight;
    }
    [_computeCaretMetrics](position, caretPrototype) {
      let t0, t0$;
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 798, 12, "!_needsLayout");
      if (dart.equals(position, this[_previousCaretPosition]) && dart.equals(caretPrototype, this[_previousCaretPrototype])) return;
      let offset = position.offset;
      if (!(position.affinity != null)) dart.assertFailed(null, L6, 802, 12, "position.affinity != null");
      let rect = null;
      switch (position.affinity) {
        case C17 || CT.C17:
        {
          {
            rect = (t0 = this[_getRectFromUpstream](offset, caretPrototype), t0 == null ? this[_getRectFromDownstream](offset, caretPrototype) : t0);
            break;
          }
        }
        case C18 || CT.C18:
        {
          {
            rect = (t0$ = this[_getRectFromDownstream](offset, caretPrototype), t0$ == null ? this[_getRectFromUpstream](offset, caretPrototype) : t0$);
            break;
          }
        }
      }
      this[_caretMetrics] = new text_painter._CaretMetrics.new({offset: rect != null ? new ui.Offset.new(rect.left, rect.top) : this[_emptyOffset], fullHeight: rect != null ? dart.notNull(rect.bottom) - dart.notNull(rect.top) : null});
      this[_previousCaretPosition] = position;
      this[_previousCaretPrototype] = caretPrototype;
    }
    getBoxesForSelection(selection, opts) {
      let boxHeightStyle = opts && 'boxHeightStyle' in opts ? opts.boxHeightStyle : C19 || CT.C19;
      let boxWidthStyle = opts && 'boxWidthStyle' in opts ? opts.boxWidthStyle : C20 || CT.C20;
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 839, 12, "!_needsLayout");
      if (!(boxHeightStyle != null)) dart.assertFailed(null, L6, 840, 12, "boxHeightStyle != null");
      if (!(boxWidthStyle != null)) dart.assertFailed(null, L6, 841, 12, "boxWidthStyle != null");
      return this[_paragraph].getBoxesForRange(selection.start, selection.end, {boxHeightStyle: boxHeightStyle, boxWidthStyle: boxWidthStyle});
    }
    getPositionForOffset(offset) {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 852, 12, "!_needsLayout");
      return this[_paragraph].getPositionForOffset(offset);
    }
    getWordBoundary(position) {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 864, 12, "!_needsLayout");
      return this[_paragraph].getWordBoundary(position);
    }
    getLineBoundary(position) {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 872, 12, "!_needsLayout");
      return this[_paragraph].getLineBoundary(position);
    }
    computeLineMetrics() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, L6, 892, 12, "!_needsLayout");
      return this[_paragraph].computeLineMetrics();
    }
  };
  (text_painter.TextPainter.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C6 || CT.C6;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C3 || CT.C3;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    this[_paragraph] = null;
    this[_needsLayout] = true;
    this[_layoutTemplate] = null;
    this[_inlinePlaceholderBoxes] = null;
    this[_inlinePlaceholderScales] = null;
    this[_placeholderDimensions] = null;
    this[_lastMinWidth] = null;
    this[_lastMaxWidth] = null;
    this[_caretMetrics] = null;
    this[_previousCaretPosition] = null;
    this[_previousCaretPrototype] = null;
    if (!(text == null || dart.test(text.debugAssertIsValid()))) dart.assertFailed(null, L6, 148, 15, "text == null || text.debugAssertIsValid()");
    if (!(textAlign != null)) dart.assertFailed(null, L6, 149, 15, "textAlign != null");
    if (!(textScaleFactor != null)) dart.assertFailed(null, L6, 150, 15, "textScaleFactor != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, L6, 151, 15, "maxLines == null || maxLines > 0");
    if (!(textWidthBasis != null)) dart.assertFailed(null, L6, 152, 15, "textWidthBasis != null");
    this[_text] = text;
    this[_textAlign] = textAlign;
    this[_textDirection] = textDirection;
    this[_textScaleFactor] = textScaleFactor;
    this[_maxLines] = maxLines;
    this[_ellipsis] = ellipsis;
    this[_locale] = locale;
    this[_strutStyle] = strutStyle;
    this[_textWidthBasis] = textWidthBasis;
    this[_textHeightBehavior] = textHeightBehavior;
    ;
  }).prototype = text_painter.TextPainter.prototype;
  dart.addTypeTests(text_painter.TextPainter);
  dart.addTypeCaches(text_painter.TextPainter);
  dart.setMethodSignature(text_painter.TextPainter, () => ({
    __proto__: dart.getMethods(text_painter.TextPainter.__proto__),
    markNeedsLayout: dart.fnType(dart.void, []),
    setPlaceholderDimensions: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(text_painter.PlaceholderDimensions)))]),
    [_createParagraphStyle]: dart.fnType(dart.legacy(ui.ParagraphStyle), [], [dart.legacy(ui.TextDirection)]),
    [_applyFloatingPointHack]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeDistanceToActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
    layout: dart.fnType(dart.void, [], {maxWidth: dart.legacy(core.double), minWidth: dart.legacy(core.double)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset)]),
    getOffsetAfter: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    getOffsetBefore: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_getRectFromUpstream]: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.int), dart.legacy(ui.Rect)]),
    [_getRectFromDownstream]: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.int), dart.legacy(ui.Rect)]),
    getOffsetForCaret: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.TextPosition), dart.legacy(ui.Rect)]),
    getFullHeightForCaret: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextPosition), dart.legacy(ui.Rect)]),
    [_computeCaretMetrics]: dart.fnType(dart.void, [dart.legacy(ui.TextPosition), dart.legacy(ui.Rect)]),
    getBoxesForSelection: dart.fnType(dart.legacy(core.List$(dart.legacy(ui.TextBox))), [dart.legacy(text_editing.TextSelection)], {boxHeightStyle: dart.legacy(ui.BoxHeightStyle), boxWidthStyle: dart.legacy(ui.BoxWidthStyle)}, {}),
    getPositionForOffset: dart.fnType(dart.legacy(ui.TextPosition), [dart.legacy(ui.Offset)]),
    getWordBoundary: dart.fnType(dart.legacy(ui.TextRange), [dart.legacy(ui.TextPosition)]),
    getLineBoundary: dart.fnType(dart.legacy(ui.TextRange), [dart.legacy(ui.TextPosition)]),
    computeLineMetrics: dart.fnType(dart.legacy(core.List$(dart.legacy(ui.LineMetrics))), [])
  }));
  dart.setGetterSignature(text_painter.TextPainter, () => ({
    __proto__: dart.getGetters(text_painter.TextPainter.__proto__),
    text: dart.legacy(inline_span.InlineSpan),
    textAlign: dart.legacy(ui.TextAlign),
    textDirection: dart.legacy(ui.TextDirection),
    textScaleFactor: dart.legacy(core.double),
    ellipsis: dart.legacy(core.String),
    locale: dart.legacy(ui.Locale),
    maxLines: dart.legacy(core.int),
    strutStyle: dart.legacy(strut_style.StrutStyle),
    textWidthBasis: dart.legacy(text_painter.TextWidthBasis),
    textHeightBehavior: dart.legacy(ui.TextHeightBehavior),
    inlinePlaceholderBoxes: dart.legacy(core.List$(dart.legacy(ui.TextBox))),
    inlinePlaceholderScales: dart.legacy(core.List$(dart.legacy(core.double))),
    preferredLineHeight: dart.legacy(core.double),
    minIntrinsicWidth: dart.legacy(core.double),
    maxIntrinsicWidth: dart.legacy(core.double),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double),
    size: dart.legacy(ui.Size),
    didExceedMaxLines: dart.legacy(core.bool),
    [_emptyOffset]: dart.legacy(ui.Offset)
  }));
  dart.setSetterSignature(text_painter.TextPainter, () => ({
    __proto__: dart.getSetters(text_painter.TextPainter.__proto__),
    text: dart.legacy(inline_span.InlineSpan),
    textAlign: dart.legacy(ui.TextAlign),
    textDirection: dart.legacy(ui.TextDirection),
    textScaleFactor: dart.legacy(core.double),
    ellipsis: dart.legacy(core.String),
    locale: dart.legacy(ui.Locale),
    maxLines: dart.legacy(core.int),
    strutStyle: dart.legacy(strut_style.StrutStyle),
    textWidthBasis: dart.legacy(text_painter.TextWidthBasis),
    textHeightBehavior: dart.legacy(ui.TextHeightBehavior)
  }));
  dart.setLibraryUri(text_painter.TextPainter, L7);
  dart.setFieldSignature(text_painter.TextPainter, () => ({
    __proto__: dart.getFields(text_painter.TextPainter.__proto__),
    [_paragraph]: dart.fieldType(dart.legacy(ui.Paragraph)),
    [_needsLayout]: dart.fieldType(dart.legacy(core.bool)),
    [_text]: dart.fieldType(dart.legacy(inline_span.InlineSpan)),
    [_textAlign]: dart.fieldType(dart.legacy(ui.TextAlign)),
    [_textDirection]: dart.fieldType(dart.legacy(ui.TextDirection)),
    [_textScaleFactor]: dart.fieldType(dart.legacy(core.double)),
    [_ellipsis]: dart.fieldType(dart.legacy(core.String)),
    [_locale]: dart.fieldType(dart.legacy(ui.Locale)),
    [_maxLines]: dart.fieldType(dart.legacy(core.int)),
    [_strutStyle]: dart.fieldType(dart.legacy(strut_style.StrutStyle)),
    [_textWidthBasis]: dart.fieldType(dart.legacy(text_painter.TextWidthBasis)),
    [_textHeightBehavior]: dart.fieldType(dart.legacy(ui.TextHeightBehavior)),
    [_layoutTemplate]: dart.fieldType(dart.legacy(ui.Paragraph)),
    [_inlinePlaceholderBoxes]: dart.fieldType(dart.legacy(core.List$(dart.legacy(ui.TextBox)))),
    [_inlinePlaceholderScales]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    [_placeholderDimensions]: dart.fieldType(dart.legacy(core.List$(dart.legacy(text_painter.PlaceholderDimensions)))),
    [_lastMinWidth]: dart.fieldType(dart.legacy(core.double)),
    [_lastMaxWidth]: dart.fieldType(dart.legacy(core.double)),
    [_caretMetrics]: dart.fieldType(dart.legacy(text_painter._CaretMetrics)),
    [_previousCaretPosition]: dart.fieldType(dart.legacy(ui.TextPosition)),
    [_previousCaretPrototype]: dart.fieldType(dart.legacy(ui.Rect))
  }));
  dart.defineLazy(text_painter.TextPainter, {
    /*text_painter.TextPainter._zwjUtf16*/get _zwjUtf16() {
      return 8205;
    }
  }, true);
  dart.trackLibraries("packages/flutter/src/painting/placeholder_span.dart", {
    "package:flutter/src/painting/placeholder_span.dart": placeholder_span,
    "package:flutter/src/painting/text_span.dart": text_span,
    "package:flutter/src/painting/inline_span.dart": inline_span,
    "package:flutter/src/painting/text_painter.dart": text_painter
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["inline_span.dart","placeholder_span.dart","text_span.dart","text_painter.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/painting/placeholder_span.dart.lib.js"}');
  // Exports:
  return {
    src__painting__placeholder_span: placeholder_span,
    src__painting__text_span: text_span,
    src__painting__inline_span: inline_span,
    src__painting__text_painter: text_painter
  };
}));

//# sourceMappingURL=placeholder_span.dart.lib.js.map
