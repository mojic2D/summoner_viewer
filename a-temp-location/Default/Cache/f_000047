define(['dart_sdk', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/events.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/constants.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/tap.dart'], (function load__packages__flutter__src__gestures__multitap_dart(dart_sdk, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__events$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__constants$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__tap$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const constants = packages__flutter__src__gestures__constants$46dart.src__gestures__constants;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  var multitap = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var _TapTrackerL = () => (_TapTrackerL = dart.constFn(dart.legacy(multitap._TapTracker)))();
  var IdentityMapOfintL$_TapTrackerL = () => (IdentityMapOfintL$_TapTrackerL = dart.constFn(_js_helper.IdentityMap$(intL(), _TapTrackerL())))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerMoveEventL = () => (PointerMoveEventL = dart.constFn(dart.legacy(events.PointerMoveEvent)))();
  var PointerCancelEventL = () => (PointerCancelEventL = dart.constFn(dart.legacy(events.PointerCancelEvent)))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var _TapGestureL = () => (_TapGestureL = dart.constFn(dart.legacy(multitap._TapGesture)))();
  var IdentityMapOfintL$_TapGestureL = () => (IdentityMapOfintL$_TapGestureL = dart.constFn(_js_helper.IdentityMap$(intL(), _TapGestureL())))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  var ListOf_TapGestureL = () => (ListOf_TapGestureL = dart.constFn(core.List$(_TapGestureL())))();
  const CT = Object.create(null);
  var L1 = "package:flutter/src/gestures/multitap.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/gestures/multitap.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    }
  }, false);
  var _timeout = dart.privateName(multitap, "_timeout");
  var _onTimeout = dart.privateName(multitap, "_onTimeout");
  multitap._CountdownZoned = class _CountdownZoned extends core.Object {
    get timeout() {
      return this[_timeout];
    }
    [_onTimeout]() {
      this[_timeout] = true;
    }
  };
  (multitap._CountdownZoned.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[_timeout] = false;
    if (!(duration != null)) dart.assertFailed(null, L0, 47, 17, "duration != null");
    async.Timer.new(duration, dart.bind(this, _onTimeout));
  }).prototype = multitap._CountdownZoned.prototype;
  dart.addTypeTests(multitap._CountdownZoned);
  dart.addTypeCaches(multitap._CountdownZoned);
  dart.setMethodSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getMethods(multitap._CountdownZoned.__proto__),
    [_onTimeout]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getGetters(multitap._CountdownZoned.__proto__),
    timeout: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(multitap._CountdownZoned, L1);
  dart.setFieldSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getFields(multitap._CountdownZoned.__proto__),
    [_timeout]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _isTrackingPointer = dart.privateName(multitap, "_isTrackingPointer");
  var _initialGlobalPosition = dart.privateName(multitap, "_initialGlobalPosition");
  var _doubleTapMinTimeCountdown = dart.privateName(multitap, "_doubleTapMinTimeCountdown");
  multitap._TapTracker = class _TapTracker extends core.Object {
    startTrackingPointer(route, transform) {
      if (!dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = true;
        binding.GestureBinding.instance.pointerRouter.addRoute(this.pointer, route, transform);
      }
    }
    stopTrackingPointer(route) {
      if (dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = false;
        binding.GestureBinding.instance.pointerRouter.removeRoute(this.pointer, route);
      }
    }
    isWithinGlobalTolerance(event, tolerance) {
      let offset = event.position['-'](this[_initialGlobalPosition]);
      return dart.notNull(offset.distance) <= dart.notNull(tolerance);
    }
    hasElapsedMinTime() {
      return this[_doubleTapMinTimeCountdown].timeout;
    }
    hasSameButton(event) {
      return event.buttons == this.initialButtons;
    }
  };
  (multitap._TapTracker.new = function(opts) {
    let event = opts && 'event' in opts ? opts.event : null;
    let entry = opts && 'entry' in opts ? opts.entry : null;
    let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
    this[_isTrackingPointer] = false;
    this.entry = entry;
    if (!(doubleTapMinTime != null)) dart.assertFailed(null, L0, 67, 15, "doubleTapMinTime != null");
    if (!(event != null)) dart.assertFailed(null, L0, 68, 15, "event != null");
    if (!(event.buttons != null)) dart.assertFailed(null, L0, 69, 15, "event.buttons != null");
    this.pointer = event.pointer;
    this[_initialGlobalPosition] = event.position;
    this.initialButtons = event.buttons;
    this[_doubleTapMinTimeCountdown] = new multitap._CountdownZoned.new({duration: doubleTapMinTime});
    ;
  }).prototype = multitap._TapTracker.prototype;
  dart.addTypeTests(multitap._TapTracker);
  dart.addTypeCaches(multitap._TapTracker);
  dart.setMethodSignature(multitap._TapTracker, () => ({
    __proto__: dart.getMethods(multitap._TapTracker.__proto__),
    startTrackingPointer: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEvent)])), dart.legacy(vector_math_64.Matrix4)]),
    stopTrackingPointer: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]))]),
    isWithinGlobalTolerance: dart.fnType(dart.legacy(core.bool), [dart.legacy(events.PointerEvent), dart.legacy(core.double)]),
    hasElapsedMinTime: dart.fnType(dart.legacy(core.bool), []),
    hasSameButton: dart.fnType(dart.legacy(core.bool), [dart.legacy(events.PointerDownEvent)])
  }));
  dart.setLibraryUri(multitap._TapTracker, L1);
  dart.setFieldSignature(multitap._TapTracker, () => ({
    __proto__: dart.getFields(multitap._TapTracker.__proto__),
    pointer: dart.finalFieldType(dart.legacy(core.int)),
    entry: dart.finalFieldType(dart.legacy(arena.GestureArenaEntry)),
    [_initialGlobalPosition]: dart.finalFieldType(dart.legacy(ui.Offset)),
    initialButtons: dart.finalFieldType(dart.legacy(core.int)),
    [_doubleTapMinTimeCountdown]: dart.finalFieldType(dart.legacy(multitap._CountdownZoned)),
    [_isTrackingPointer]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _doubleTapTimer = dart.privateName(multitap, "_doubleTapTimer");
  var _firstTap = dart.privateName(multitap, "_firstTap");
  var _trackers = dart.privateName(multitap, "_trackers");
  var _reset = dart.privateName(multitap, "_reset");
  var _trackFirstTap = dart.privateName(multitap, "_trackFirstTap");
  var _stopDoubleTapTimer = dart.privateName(multitap, "_stopDoubleTapTimer");
  var _handleEvent = dart.privateName(multitap, "_handleEvent");
  var _registerFirstTap = dart.privateName(multitap, "_registerFirstTap");
  var _registerSecondTap = dart.privateName(multitap, "_registerSecondTap");
  var _reject = dart.privateName(multitap, "_reject");
  var _freezeTracker = dart.privateName(multitap, "_freezeTracker");
  var _clearTrackers = dart.privateName(multitap, "_clearTrackers");
  var _startDoubleTapTimer = dart.privateName(multitap, "_startDoubleTapTimer");
  var _checkUp = dart.privateName(multitap, "_checkUp");
  var onDoubleTap = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTap");
  multitap.DoubleTapGestureRecognizer = class DoubleTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onDoubleTap() {
      return this[onDoubleTap];
    }
    set onDoubleTap(value) {
      this[onDoubleTap] = value;
    }
    isPointerAllowed(event) {
      if (this[_firstTap] == null) {
        switch (event.buttons) {
          case 1:
          {
            if (this.onDoubleTap == null) return false;
            break;
          }
          default:
          {
            return false;
          }
        }
      }
      return super.isPointerAllowed(PointerDownEventL().as(event));
    }
    addAllowedPointer(event) {
      if (this[_firstTap] != null) {
        if (!dart.test(this[_firstTap].isWithinGlobalTolerance(event, 100))) {
          return;
        } else if (!dart.test(this[_firstTap].hasElapsedMinTime()) || !dart.test(this[_firstTap].hasSameButton(PointerDownEventL().as(event)))) {
          this[_reset]();
          return this[_trackFirstTap](event);
        }
      }
      this[_trackFirstTap](event);
    }
    [_trackFirstTap](event) {
      this[_stopDoubleTapTimer]();
      let tracker = new multitap._TapTracker.new({event: PointerDownEventL().as(event), entry: binding.GestureBinding.instance.gestureArena.add(event.pointer, this), doubleTapMinTime: constants.kDoubleTapMinTime});
      this[_trackers][$_set](event.pointer, tracker);
      tracker.startTrackingPointer(dart.bind(this, _handleEvent), event.transform);
    }
    [_handleEvent](event) {
      let tracker = this[_trackers][$_get](event.pointer);
      if (!(tracker != null)) dart.assertFailed(null, L0, 205, 12, "tracker != null");
      if (PointerUpEventL().is(event)) {
        if (this[_firstTap] == null)
          this[_registerFirstTap](tracker);
        else
          this[_registerSecondTap](tracker);
      } else if (PointerMoveEventL().is(event)) {
        if (!dart.test(tracker.isWithinGlobalTolerance(event, 18))) this[_reject](tracker);
      } else if (PointerCancelEventL().is(event)) {
        this[_reject](tracker);
      }
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
      let tracker = this[_trackers][$_get](pointer);
      if (tracker == null && this[_firstTap] != null && this[_firstTap].pointer == pointer) tracker = this[_firstTap];
      if (tracker != null) this[_reject](tracker);
    }
    [_reject](tracker) {
      this[_trackers][$remove](tracker.pointer);
      tracker.entry.resolve(arena.GestureDisposition.rejected);
      this[_freezeTracker](tracker);
      if (this[_firstTap] != null && (dart.test(this[_trackers][$isEmpty]) || dart.equals(tracker, this[_firstTap]))) this[_reset]();
    }
    dispose() {
      this[_reset]();
      super.dispose();
    }
    [_reset]() {
      this[_stopDoubleTapTimer]();
      if (this[_firstTap] != null) {
        let tracker = this[_firstTap];
        this[_firstTap] = null;
        this[_reject](tracker);
        binding.GestureBinding.instance.gestureArena.release(tracker.pointer);
      }
      this[_clearTrackers]();
    }
    [_registerFirstTap](tracker) {
      this[_startDoubleTapTimer]();
      binding.GestureBinding.instance.gestureArena.hold(tracker.pointer);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_clearTrackers]();
      this[_firstTap] = tracker;
    }
    [_registerSecondTap](tracker) {
      this[_firstTap].entry.resolve(arena.GestureDisposition.accepted);
      tracker.entry.resolve(arena.GestureDisposition.accepted);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_checkUp](tracker.initialButtons);
      this[_reset]();
    }
    [_clearTrackers]() {
      this[_trackers][$values][$toList]()[$forEach](dart.bind(this, _reject));
      if (!dart.test(this[_trackers][$isEmpty])) dart.assertFailed(null, L0, 288, 12, "_trackers.isEmpty");
    }
    [_freezeTracker](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent));
    }
    [_startDoubleTapTimer]() {
      this[_doubleTapTimer] == null ? this[_doubleTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _reset)) : null;
    }
    [_stopDoubleTapTimer]() {
      if (this[_doubleTapTimer] != null) {
        this[_doubleTapTimer].cancel();
        this[_doubleTapTimer] = null;
      }
    }
    [_checkUp](buttons) {
      if (!(buttons === 1)) dart.assertFailed(null, L0, 307, 12, "buttons == kPrimaryButton");
      if (this.onDoubleTap != null) this.invokeCallback(dart.void, "onDoubleTap", this.onDoubleTap);
    }
    get debugDescription() {
      return "double tap";
    }
  };
  (multitap.DoubleTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onDoubleTap] = null;
    this[_doubleTapTimer] = null;
    this[_firstTap] = null;
    this[_trackers] = new (IdentityMapOfintL$_TapTrackerL()).new();
    multitap.DoubleTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.DoubleTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.DoubleTapGestureRecognizer);
  dart.addTypeCaches(multitap.DoubleTapGestureRecognizer);
  dart.setMethodSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.DoubleTapGestureRecognizer.__proto__),
    isPointerAllowed: dart.fnType(dart.legacy(core.bool), [dart.legacy(events.PointerEvent)]),
    addAllowedPointer: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    [_trackFirstTap]: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    [_handleEvent]: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    acceptGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    rejectGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_reject]: dart.fnType(dart.void, [dart.legacy(multitap._TapTracker)]),
    [_reset]: dart.fnType(dart.void, []),
    [_registerFirstTap]: dart.fnType(dart.void, [dart.legacy(multitap._TapTracker)]),
    [_registerSecondTap]: dart.fnType(dart.void, [dart.legacy(multitap._TapTracker)]),
    [_clearTrackers]: dart.fnType(dart.void, []),
    [_freezeTracker]: dart.fnType(dart.void, [dart.legacy(multitap._TapTracker)]),
    [_startDoubleTapTimer]: dart.fnType(dart.void, []),
    [_stopDoubleTapTimer]: dart.fnType(dart.void, []),
    [_checkUp]: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.DoubleTapGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multitap.DoubleTapGestureRecognizer, L1);
  dart.setFieldSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.DoubleTapGestureRecognizer.__proto__),
    onDoubleTap: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_doubleTapTimer]: dart.fieldType(dart.legacy(async.Timer)),
    [_firstTap]: dart.fieldType(dart.legacy(multitap._TapTracker)),
    [_trackers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(multitap._TapTracker))))
  }));
  var _wonArena = dart.privateName(multitap, "_wonArena");
  var _timer = dart.privateName(multitap, "_timer");
  var _finalPosition = dart.privateName(multitap, "_finalPosition");
  var _lastPosition = dart.privateName(multitap, "_lastPosition");
  var _dispatchLongTap = dart.privateName(multitap, "_dispatchLongTap");
  var _check = dart.privateName(multitap, "_check");
  var _dispatchCancel = dart.privateName(multitap, "_dispatchCancel");
  var _dispatchTap = dart.privateName(multitap, "_dispatchTap");
  multitap._TapGesture = class _TapGesture extends multitap._TapTracker {
    handleEvent(event) {
      if (!(event.pointer == this.pointer)) dart.assertFailed(null, L0, 349, 12, "event.pointer == pointer");
      if (PointerMoveEventL().is(event)) {
        if (!dart.test(this.isWithinGlobalTolerance(event, 18)))
          this.cancel();
        else
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
      } else if (PointerCancelEventL().is(event)) {
        this.cancel();
      } else if (PointerUpEventL().is(event)) {
        this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
        this[_finalPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_check]();
      }
    }
    stopTrackingPointer(route) {
      let t0;
      t0 = this[_timer];
      t0 == null ? null : t0.cancel();
      this[_timer] = null;
      super.stopTrackingPointer(route);
    }
    accept() {
      this[_wonArena] = true;
      this[_check]();
    }
    reject() {
      this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
      this.gestureRecognizer[_dispatchCancel](this.pointer);
    }
    cancel() {
      if (dart.test(this[_wonArena]))
        this.reject();
      else
        this.entry.resolve(arena.GestureDisposition.rejected);
    }
    [_check]() {
      if (dart.test(this[_wonArena]) && this[_finalPosition] != null) this.gestureRecognizer[_dispatchTap](this.pointer, this[_finalPosition]);
    }
  };
  (multitap._TapGesture.new = function(opts) {
    let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
    this[_wonArena] = false;
    this[_timer] = null;
    this[_finalPosition] = null;
    this.gestureRecognizer = gestureRecognizer;
    this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
    multitap._TapGesture.__proto__.new.call(this, {event: PointerDownEventL().as(event), entry: binding.GestureBinding.instance.gestureArena.add(event.pointer, gestureRecognizer), doubleTapMinTime: constants.kDoubleTapMinTime});
    this.startTrackingPointer(dart.bind(this, 'handleEvent'), event.transform);
    if (dart.test(longTapDelay['>'](core.Duration.zero))) {
      this[_timer] = async.Timer.new(longTapDelay, dart.fn(() => {
        this[_timer] = null;
        this.gestureRecognizer[_dispatchLongTap](event.pointer, this[_lastPosition]);
      }, VoidToNullN()));
    }
  }).prototype = multitap._TapGesture.prototype;
  dart.addTypeTests(multitap._TapGesture);
  dart.addTypeCaches(multitap._TapGesture);
  dart.setMethodSignature(multitap._TapGesture, () => ({
    __proto__: dart.getMethods(multitap._TapGesture.__proto__),
    handleEvent: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    accept: dart.fnType(dart.void, []),
    reject: dart.fnType(dart.void, []),
    cancel: dart.fnType(dart.void, []),
    [_check]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(multitap._TapGesture, L1);
  dart.setFieldSignature(multitap._TapGesture, () => ({
    __proto__: dart.getFields(multitap._TapGesture.__proto__),
    gestureRecognizer: dart.finalFieldType(dart.legacy(multitap.MultiTapGestureRecognizer)),
    [_wonArena]: dart.fieldType(dart.legacy(core.bool)),
    [_timer]: dart.fieldType(dart.legacy(async.Timer)),
    [_lastPosition]: dart.fieldType(dart.legacy(recognizer.OffsetPair)),
    [_finalPosition]: dart.fieldType(dart.legacy(recognizer.OffsetPair))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C0;
  var _gestureMap = dart.privateName(multitap, "_gestureMap");
  var onTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapDown");
  var onTapUp = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapUp");
  var onTap = dart.privateName(multitap, "MultiTapGestureRecognizer.onTap");
  var onTapCancel = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapCancel");
  var longTapDelay$ = dart.privateName(multitap, "MultiTapGestureRecognizer.longTapDelay");
  var onLongTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onLongTapDown");
  multitap.MultiTapGestureRecognizer = class MultiTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onTap() {
      return this[onTap];
    }
    set onTap(value) {
      this[onTap] = value;
    }
    get onTapCancel() {
      return this[onTapCancel];
    }
    set onTapCancel(value) {
      this[onTapCancel] = value;
    }
    get longTapDelay() {
      return this[longTapDelay$];
    }
    set longTapDelay(value) {
      this[longTapDelay$] = value;
    }
    get onLongTapDown() {
      return this[onLongTapDown];
    }
    set onLongTapDown(value) {
      this[onLongTapDown] = value;
    }
    addAllowedPointer(event) {
      if (!!dart.test(this[_gestureMap][$containsKey](event.pointer))) dart.assertFailed(null, L0, 442, 12, "!_gestureMap.containsKey(event.pointer)");
      this[_gestureMap][$_set](event.pointer, new multitap._TapGesture.new({gestureRecognizer: this, event: event, longTapDelay: this.longTapDelay}));
      if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => {
        let t1, t0;
        t0 = event.pointer;
        t1 = new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: event.kind});
        this.onTapDown(t0, t1);
      }, VoidToNullN()));
    }
    acceptGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 460, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).accept();
    }
    rejectGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 466, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).reject();
      if (!!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 468, 12, "!_gestureMap.containsKey(pointer)");
    }
    [_dispatchCancel](pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 472, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapCancel != null) this.invokeCallback(dart.void, "onTapCancel", dart.fn(() => {
        let t0;
        t0 = pointer;
        return this.onTapCancel(t0);
      }, VoidTovoid()));
    }
    [_dispatchTap](pointer, position) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 479, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => {
        let t1, t0;
        t0 = pointer;
        t1 = new tap.TapUpDetails.new({localPosition: position.local, globalPosition: position.global});
        this.onTapUp(t0, t1);
      }, VoidToNullN()));
      if (this.onTap != null) this.invokeCallback(dart.void, "onTap", dart.fn(() => {
        let t0;
        t0 = pointer;
        return this.onTap(t0);
      }, VoidTovoid()));
    }
    [_dispatchLongTap](pointer, lastPosition) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, L0, 493, 12, "_gestureMap.containsKey(pointer)");
      if (this.onLongTapDown != null) this.invokeCallback(dart.void, "onLongTapDown", dart.fn(() => {
        let t1, t0;
        t0 = pointer;
        t1 = new tap.TapDownDetails.new({globalPosition: lastPosition.global, localPosition: lastPosition.local, kind: this.getKindForPointer(pointer)});
        this.onLongTapDown(t0, t1);
      }, VoidToNullN()));
    }
    dispose() {
      let localGestures = ListOf_TapGestureL().from(this[_gestureMap][$values]);
      for (let gesture of localGestures)
        gesture.cancel();
      if (!dart.test(this[_gestureMap][$isEmpty])) dart.assertFailed(null, L0, 513, 12, "_gestureMap.isEmpty");
      super.dispose();
    }
    get debugDescription() {
      return "multitap";
    }
  };
  (multitap.MultiTapGestureRecognizer.new = function(opts) {
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : C0 || CT.C0;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onTap] = null;
    this[onTapCancel] = null;
    this[onLongTapDown] = null;
    this[_gestureMap] = new (IdentityMapOfintL$_TapGestureL()).new();
    this[longTapDelay$] = longTapDelay;
    multitap.MultiTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.MultiTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.MultiTapGestureRecognizer);
  dart.addTypeCaches(multitap.MultiTapGestureRecognizer);
  dart.setMethodSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.MultiTapGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    acceptGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    rejectGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_dispatchCancel]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_dispatchTap]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(recognizer.OffsetPair)]),
    [_dispatchLongTap]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(recognizer.OffsetPair)])
  }));
  dart.setGetterSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.MultiTapGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multitap.MultiTapGestureRecognizer, L1);
  dart.setFieldSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.MultiTapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(tap.TapDownDetails)]))),
    onTapUp: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(tap.TapUpDetails)]))),
    onTap: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int)]))),
    onTapCancel: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int)]))),
    longTapDelay: dart.fieldType(dart.legacy(core.Duration)),
    onLongTapDown: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(tap.TapDownDetails)]))),
    [_gestureMap]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(multitap._TapGesture))))
  }));
  dart.trackLibraries("packages/flutter/src/gestures/multitap.dart", {
    "package:flutter/src/gestures/multitap.dart": multitap
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multitap.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/gestures/multitap.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multitap: multitap
  };
}));

//# sourceMappingURL=multitap.dart.lib.js.map
