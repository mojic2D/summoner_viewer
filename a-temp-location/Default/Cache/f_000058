define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/physics/utils.dart', 'packages/flutter/src/physics/simulation.dart'], (function load__packages__flutter__src__physics__spring_simulation_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__physics__utils$46dart, packages__flutter__src__physics__simulation$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const utils = packages__flutter__src__physics__utils$46dart.src__physics__utils;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  var spring_simulation = Object.create(dart.library);
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $toString = dartx.toString;
  var SpringTypeL = () => (SpringTypeL = dart.constFn(dart.legacy(spring_simulation.SpringType)))();
  const CT = Object.create(null);
  var L0 = "package:flutter/src/physics/spring_simulation.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/physics/spring_simulation.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.criticallyDamped",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.underDamped",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.overDamped",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2], SpringTypeL());
    },
    get C4() {
      return C4 = dart.const({
        __proto__: tolerance.Tolerance.prototype,
        [Tolerance_velocity]: 0.001,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.001
      });
    }
  }, false);
  var mass$ = dart.privateName(spring_simulation, "SpringDescription.mass");
  var stiffness$ = dart.privateName(spring_simulation, "SpringDescription.stiffness");
  var damping$ = dart.privateName(spring_simulation, "SpringDescription.damping");
  spring_simulation.SpringDescription = class SpringDescription extends core.Object {
    get mass() {
      return this[mass$];
    }
    set mass(value) {
      super.mass = value;
    }
    get stiffness() {
      return this[stiffness$];
    }
    set stiffness(value) {
      super.stiffness = value;
    }
    get damping() {
      return this[damping$];
    }
    set damping(value) {
      super.damping = value;
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "SpringDescription")) + "(mass: " + dart.str(this.mass[$toStringAsFixed](1)) + ", stiffness: " + dart.str(this.stiffness[$toStringAsFixed](1)) + ", damping: " + dart.str(this.damping[$toStringAsFixed](1)) + ")";
    }
  };
  (spring_simulation.SpringDescription.new = function(opts) {
    let mass = opts && 'mass' in opts ? opts.mass : null;
    let stiffness = opts && 'stiffness' in opts ? opts.stiffness : null;
    let damping = opts && 'damping' in opts ? opts.damping : null;
    this[mass$] = mass;
    this[stiffness$] = stiffness;
    this[damping$] = damping;
    ;
  }).prototype = spring_simulation.SpringDescription.prototype;
  (spring_simulation.SpringDescription.withDampingRatio = function(opts) {
    let mass = opts && 'mass' in opts ? opts.mass : null;
    let stiffness = opts && 'stiffness' in opts ? opts.stiffness : null;
    let ratio = opts && 'ratio' in opts ? opts.ratio : 1;
    this[mass$] = mass;
    this[stiffness$] = stiffness;
    this[damping$] = dart.notNull(ratio) * 2.0 * math.sqrt(dart.notNull(mass) * dart.notNull(stiffness));
    ;
  }).prototype = spring_simulation.SpringDescription.prototype;
  dart.addTypeTests(spring_simulation.SpringDescription);
  dart.addTypeCaches(spring_simulation.SpringDescription);
  dart.setMethodSignature(spring_simulation.SpringDescription, () => ({
    __proto__: dart.getMethods(spring_simulation.SpringDescription.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(spring_simulation.SpringDescription, L0);
  dart.setFieldSignature(spring_simulation.SpringDescription, () => ({
    __proto__: dart.getFields(spring_simulation.SpringDescription.__proto__),
    mass: dart.finalFieldType(dart.legacy(core.double)),
    stiffness: dart.finalFieldType(dart.legacy(core.double)),
    damping: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(spring_simulation.SpringDescription, ['toString']);
  var _name$ = dart.privateName(spring_simulation, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  spring_simulation.SpringType = class SpringType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (spring_simulation.SpringType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = spring_simulation.SpringType.prototype;
  dart.addTypeTests(spring_simulation.SpringType);
  dart.addTypeCaches(spring_simulation.SpringType);
  dart.setMethodSignature(spring_simulation.SpringType, () => ({
    __proto__: dart.getMethods(spring_simulation.SpringType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(spring_simulation.SpringType, L0);
  dart.setFieldSignature(spring_simulation.SpringType, () => ({
    __proto__: dart.getFields(spring_simulation.SpringType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(spring_simulation.SpringType, ['toString']);
  spring_simulation.SpringType.criticallyDamped = C0 || CT.C0;
  spring_simulation.SpringType.underDamped = C1 || CT.C1;
  spring_simulation.SpringType.overDamped = C2 || CT.C2;
  spring_simulation.SpringType.values = C3 || CT.C3;
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  var C4;
  var _endPosition = dart.privateName(spring_simulation, "_endPosition");
  var _solution = dart.privateName(spring_simulation, "_solution");
  spring_simulation.SpringSimulation = class SpringSimulation extends simulation.Simulation {
    get type() {
      return this[_solution].type;
    }
    x(time) {
      return dart.notNull(this[_endPosition]) + dart.notNull(this[_solution].x(time));
    }
    dx(time) {
      return this[_solution].dx(time);
    }
    isDone(time) {
      return dart.test(utils.nearZero(this[_solution].x(time), this.tolerance.distance)) && dart.test(utils.nearZero(this[_solution].dx(time), this.tolerance.velocity));
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "SpringSimulation")) + "(end: " + dart.str(this[_endPosition]) + ", " + dart.str(this.type) + ")";
    }
  };
  (spring_simulation.SpringSimulation.new = function(spring, start, end, velocity, opts) {
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C4 || CT.C4;
    this[_endPosition] = end;
    this[_solution] = spring_simulation._SpringSolution.new(spring, dart.notNull(start) - dart.notNull(end), velocity);
    spring_simulation.SpringSimulation.__proto__.new.call(this, {tolerance: tolerance});
    ;
  }).prototype = spring_simulation.SpringSimulation.prototype;
  dart.addTypeTests(spring_simulation.SpringSimulation);
  dart.addTypeCaches(spring_simulation.SpringSimulation);
  dart.setMethodSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getMethods(spring_simulation.SpringSimulation.__proto__),
    x: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    dx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    isDone: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getGetters(spring_simulation.SpringSimulation.__proto__),
    type: dart.legacy(spring_simulation.SpringType)
  }));
  dart.setLibraryUri(spring_simulation.SpringSimulation, L0);
  dart.setFieldSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getFields(spring_simulation.SpringSimulation.__proto__),
    [_endPosition]: dart.finalFieldType(dart.legacy(core.double)),
    [_solution]: dart.finalFieldType(dart.legacy(spring_simulation._SpringSolution))
  }));
  dart.defineExtensionMethods(spring_simulation.SpringSimulation, ['toString']);
  spring_simulation.ScrollSpringSimulation = class ScrollSpringSimulation extends spring_simulation.SpringSimulation {
    x(time) {
      return dart.test(this.isDone(time)) ? this[_endPosition] : super.x(time);
    }
  };
  (spring_simulation.ScrollSpringSimulation.new = function(spring, start, end, velocity, opts) {
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C4 || CT.C4;
    spring_simulation.ScrollSpringSimulation.__proto__.new.call(this, spring, start, end, velocity, {tolerance: tolerance});
    ;
  }).prototype = spring_simulation.ScrollSpringSimulation.prototype;
  dart.addTypeTests(spring_simulation.ScrollSpringSimulation);
  dart.addTypeCaches(spring_simulation.ScrollSpringSimulation);
  dart.setLibraryUri(spring_simulation.ScrollSpringSimulation, L0);
  spring_simulation._SpringSolution = class _SpringSolution extends core.Object {
    static new(spring, initialPosition, initialVelocity) {
      if (!(spring != null)) dart.assertFailed(null, L1, 158, 12, "spring != null");
      if (!(spring.mass != null)) dart.assertFailed(null, L1, 159, 12, "spring.mass != null");
      if (!(spring.stiffness != null)) dart.assertFailed(null, L1, 160, 12, "spring.stiffness != null");
      if (!(spring.damping != null)) dart.assertFailed(null, L1, 161, 12, "spring.damping != null");
      if (!(initialPosition != null)) dart.assertFailed(null, L1, 162, 12, "initialPosition != null");
      if (!(initialVelocity != null)) dart.assertFailed(null, L1, 163, 12, "initialVelocity != null");
      let cmk = dart.notNull(spring.damping) * dart.notNull(spring.damping) - 4 * dart.notNull(spring.mass) * dart.notNull(spring.stiffness);
      if (cmk === 0.0) return spring_simulation._CriticalSolution.new(spring, initialPosition, initialVelocity);
      if (cmk > 0.0) return spring_simulation._OverdampedSolution.new(spring, initialPosition, initialVelocity);
      return spring_simulation._UnderdampedSolution.new(spring, initialPosition, initialVelocity);
    }
  };
  (spring_simulation._SpringSolution[dart.mixinNew] = function() {
  }).prototype = spring_simulation._SpringSolution.prototype;
  dart.addTypeTests(spring_simulation._SpringSolution);
  dart.addTypeCaches(spring_simulation._SpringSolution);
  dart.setLibraryUri(spring_simulation._SpringSolution, L0);
  var _r = dart.privateName(spring_simulation, "_r");
  var _c1 = dart.privateName(spring_simulation, "_c1");
  var _c2 = dart.privateName(spring_simulation, "_c2");
  spring_simulation._CriticalSolution = class _CriticalSolution extends core.Object {
    static new(spring, distance, velocity) {
      let r = -dart.notNull(spring.damping) / (2.0 * dart.notNull(spring.mass));
      let c1 = distance;
      let c2 = dart.notNull(velocity) / (r * dart.notNull(distance));
      return new spring_simulation._CriticalSolution.withArgs(r, c1, c2);
    }
    x(time) {
      return (dart.notNull(this[_c1]) + dart.notNull(this[_c2]) * dart.notNull(time)) * math.pow(2.718281828459045, dart.notNull(this[_r]) * dart.notNull(time));
    }
    dx(time) {
      let power = math.pow(2.718281828459045, dart.notNull(this[_r]) * dart.notNull(time));
      return dart.notNull(this[_r]) * (dart.notNull(this[_c1]) + dart.notNull(this[_c2]) * dart.notNull(time)) * power + dart.notNull(this[_c2]) * power;
    }
    get type() {
      return spring_simulation.SpringType.criticallyDamped;
    }
  };
  (spring_simulation._CriticalSolution.withArgs = function(r, c1, c2) {
    this[_r] = r;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._CriticalSolution.prototype;
  dart.addTypeTests(spring_simulation._CriticalSolution);
  dart.addTypeCaches(spring_simulation._CriticalSolution);
  spring_simulation._CriticalSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._CriticalSolution.__proto__),
    x: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    dx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._CriticalSolution.__proto__),
    type: dart.legacy(spring_simulation.SpringType)
  }));
  dart.setLibraryUri(spring_simulation._CriticalSolution, L0);
  dart.setFieldSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getFields(spring_simulation._CriticalSolution.__proto__),
    [_r]: dart.finalFieldType(dart.legacy(core.double)),
    [_c1]: dart.finalFieldType(dart.legacy(core.double)),
    [_c2]: dart.finalFieldType(dart.legacy(core.double))
  }));
  var _r1 = dart.privateName(spring_simulation, "_r1");
  var _r2 = dart.privateName(spring_simulation, "_r2");
  spring_simulation._OverdampedSolution = class _OverdampedSolution extends core.Object {
    static new(spring, distance, velocity) {
      let cmk = dart.notNull(spring.damping) * dart.notNull(spring.damping) - 4 * dart.notNull(spring.mass) * dart.notNull(spring.stiffness);
      let r1 = (-dart.notNull(spring.damping) - math.sqrt(cmk)) / (2.0 * dart.notNull(spring.mass));
      let r2 = (-dart.notNull(spring.damping) + math.sqrt(cmk)) / (2.0 * dart.notNull(spring.mass));
      let c2 = (dart.notNull(velocity) - r1 * dart.notNull(distance)) / (r2 - r1);
      let c1 = dart.notNull(distance) - c2;
      return new spring_simulation._OverdampedSolution.withArgs(r1, r2, c1, c2);
    }
    x(time) {
      return dart.notNull(this[_c1]) * math.pow(2.718281828459045, dart.notNull(this[_r1]) * dart.notNull(time)) + dart.notNull(this[_c2]) * math.pow(2.718281828459045, dart.notNull(this[_r2]) * dart.notNull(time));
    }
    dx(time) {
      return dart.notNull(this[_c1]) * dart.notNull(this[_r1]) * math.pow(2.718281828459045, dart.notNull(this[_r1]) * dart.notNull(time)) + dart.notNull(this[_c2]) * dart.notNull(this[_r2]) * math.pow(2.718281828459045, dart.notNull(this[_r2]) * dart.notNull(time));
    }
    get type() {
      return spring_simulation.SpringType.overDamped;
    }
  };
  (spring_simulation._OverdampedSolution.withArgs = function(r1, r2, c1, c2) {
    this[_r1] = r1;
    this[_r2] = r2;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._OverdampedSolution.prototype;
  dart.addTypeTests(spring_simulation._OverdampedSolution);
  dart.addTypeCaches(spring_simulation._OverdampedSolution);
  spring_simulation._OverdampedSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._OverdampedSolution.__proto__),
    x: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    dx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._OverdampedSolution.__proto__),
    type: dart.legacy(spring_simulation.SpringType)
  }));
  dart.setLibraryUri(spring_simulation._OverdampedSolution, L0);
  dart.setFieldSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getFields(spring_simulation._OverdampedSolution.__proto__),
    [_r1]: dart.finalFieldType(dart.legacy(core.double)),
    [_r2]: dart.finalFieldType(dart.legacy(core.double)),
    [_c1]: dart.finalFieldType(dart.legacy(core.double)),
    [_c2]: dart.finalFieldType(dart.legacy(core.double))
  }));
  var _w = dart.privateName(spring_simulation, "_w");
  spring_simulation._UnderdampedSolution = class _UnderdampedSolution extends core.Object {
    static new(spring, distance, velocity) {
      let w = math.sqrt(4.0 * dart.notNull(spring.mass) * dart.notNull(spring.stiffness) - dart.notNull(spring.damping) * dart.notNull(spring.damping)) / (2.0 * dart.notNull(spring.mass));
      let r = -(dart.notNull(spring.damping) / 2.0 * dart.notNull(spring.mass));
      let c1 = distance;
      let c2 = (dart.notNull(velocity) - r * dart.notNull(distance)) / w;
      return new spring_simulation._UnderdampedSolution.withArgs(w, r, c1, c2);
    }
    x(time) {
      return math.pow(2.718281828459045, dart.notNull(this[_r]) * dart.notNull(time)) * (dart.notNull(this[_c1]) * math.cos(dart.notNull(this[_w]) * dart.notNull(time)) + dart.notNull(this[_c2]) * math.sin(dart.notNull(this[_w]) * dart.notNull(time)));
    }
    dx(time) {
      let power = math.pow(2.718281828459045, dart.notNull(this[_r]) * dart.notNull(time));
      let cosine = math.cos(dart.notNull(this[_w]) * dart.notNull(time));
      let sine = math.sin(dart.notNull(this[_w]) * dart.notNull(time));
      return power * (dart.notNull(this[_c2]) * dart.notNull(this[_w]) * cosine - dart.notNull(this[_c1]) * dart.notNull(this[_w]) * sine) + dart.notNull(this[_r]) * power * (dart.notNull(this[_c2]) * sine + dart.notNull(this[_c1]) * cosine);
    }
    get type() {
      return spring_simulation.SpringType.underDamped;
    }
  };
  (spring_simulation._UnderdampedSolution.withArgs = function(w, r, c1, c2) {
    this[_w] = w;
    this[_r] = r;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._UnderdampedSolution.prototype;
  dart.addTypeTests(spring_simulation._UnderdampedSolution);
  dart.addTypeCaches(spring_simulation._UnderdampedSolution);
  spring_simulation._UnderdampedSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._UnderdampedSolution.__proto__),
    x: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    dx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._UnderdampedSolution.__proto__),
    type: dart.legacy(spring_simulation.SpringType)
  }));
  dart.setLibraryUri(spring_simulation._UnderdampedSolution, L0);
  dart.setFieldSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getFields(spring_simulation._UnderdampedSolution.__proto__),
    [_w]: dart.finalFieldType(dart.legacy(core.double)),
    [_r]: dart.finalFieldType(dart.legacy(core.double)),
    [_c1]: dart.finalFieldType(dart.legacy(core.double)),
    [_c2]: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.trackLibraries("packages/flutter/src/physics/spring_simulation.dart", {
    "package:flutter/src/physics/spring_simulation.dart": spring_simulation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spring_simulation.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/physics/spring_simulation.dart.lib.js"}');
  // Exports:
  return {
    src__physics__spring_simulation: spring_simulation
  };
}));

//# sourceMappingURL=spring_simulation.dart.lib.js.map
