define(['dart_sdk', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/drag.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/recognizer.dart'], (function load__packages__flutter__src__gestures__multidrag_dart(dart_sdk, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__drag$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__recognizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const drag = packages__flutter__src__gestures__drag$46dart.src__gestures__drag;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  var multidrag = Object.create(dart.library);
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $abs = dartx.abs;
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var PointerMoveEventL = () => (PointerMoveEventL = dart.constFn(dart.legacy(events.PointerMoveEvent)))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerCancelEventL = () => (PointerCancelEventL = dart.constFn(dart.legacy(events.PointerCancelEvent)))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var DragL = () => (DragL = dart.constFn(dart.legacy(drag.Drag)))();
  var OffsetL = () => (OffsetL = dart.constFn(dart.legacy(ui.Offset)))();
  var OffsetLToDragL = () => (OffsetLToDragL = dart.constFn(dart.fnType(DragL(), [OffsetL()])))();
  var VoidToDragL = () => (VoidToDragL = dart.constFn(dart.fnType(DragL(), [])))();
  const CT = Object.create(null);
  var L1 = "package:flutter/src/gestures/multidrag.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/gestures/multidrag.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    }
  }, false);
  var _velocityTracker = dart.privateName(multidrag, "_velocityTracker");
  var _client = dart.privateName(multidrag, "_client");
  var _pendingDelta = dart.privateName(multidrag, "_pendingDelta");
  var _lastPendingEventTimestamp = dart.privateName(multidrag, "_lastPendingEventTimestamp");
  var _arenaEntry = dart.privateName(multidrag, "_arenaEntry");
  var _setArenaEntry = dart.privateName(multidrag, "_setArenaEntry");
  var _move = dart.privateName(multidrag, "_move");
  var _startDrag = dart.privateName(multidrag, "_startDrag");
  var _up = dart.privateName(multidrag, "_up");
  var _cancel = dart.privateName(multidrag, "_cancel");
  var initialPosition$ = dart.privateName(multidrag, "MultiDragPointerState.initialPosition");
  multidrag.MultiDragPointerState = class MultiDragPointerState extends core.Object {
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    get pendingDelta() {
      return this[_pendingDelta];
    }
    [_setArenaEntry](entry) {
      if (!(this[_arenaEntry] == null)) dart.assertFailed(null, L0, 54, 12, "_arenaEntry == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 55, 12, "pendingDelta != null");
      if (!(this[_client] == null)) dart.assertFailed(null, L0, 56, 12, "_client == null");
      this[_arenaEntry] = entry;
    }
    resolve(disposition) {
      this[_arenaEntry].resolve(disposition);
    }
    [_move](event) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, L0, 68, 12, "_arenaEntry != null");
      if (!dart.test(event.synthesized)) this[_velocityTracker].addPosition(event.timeStamp, event.position);
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, L0, 72, 14, "pendingDelta == null");
        this[_client].update(new drag_details.DragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.delta, globalPosition: event.position}));
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 80, 14, "pendingDelta != null");
        this[_pendingDelta] = this[_pendingDelta]['+'](event.delta);
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this.checkForResolutionAfterMove();
      }
    }
    checkForResolutionAfterMove() {
    }
    rejected() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, L0, 106, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, L0, 107, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 108, 12, "pendingDelta != null");
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_arenaEntry] = null;
    }
    [_startDrag](client) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, L0, 115, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, L0, 116, 12, "_client == null");
      if (!(client != null)) dart.assertFailed(null, L0, 117, 12, "client != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 118, 12, "pendingDelta != null");
      this[_client] = client;
      let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: this[_lastPendingEventTimestamp], delta: this.pendingDelta, globalPosition: this.initialPosition});
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_client].update(details);
    }
    [_up]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, L0, 132, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, L0, 134, 14, "pendingDelta == null");
        let details = new drag_details.DragEndDetails.new({velocity: this[_velocityTracker].getVelocity()});
        let client = this[_client];
        this[_client] = null;
        client.end(details);
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 141, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    [_cancel]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, L0, 148, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, L0, 150, 14, "pendingDelta == null");
        let client = this[_client];
        this[_client] = null;
        client.cancel();
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 156, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    dispose() {
      let t0;
      t0 = this[_arenaEntry];
      t0 == null ? null : t0.resolve(arena.GestureDisposition.rejected);
      this[_arenaEntry] = null;
      if (!dart.test(dart.fn(() => {
        this[_pendingDelta] = null;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 168, 12, "() {\r\n      _pendingDelta = null;\r\n      return true;\r\n    }()");
    }
  };
  (multidrag.MultiDragPointerState.new = function(initialPosition) {
    this[_velocityTracker] = new velocity_tracker.VelocityTracker.new();
    this[_client] = null;
    this[_pendingDelta] = ui.Offset.zero;
    this[_lastPendingEventTimestamp] = null;
    this[_arenaEntry] = null;
    this[initialPosition$] = initialPosition;
    if (!(initialPosition != null)) dart.assertFailed(null, L0, 33, 14, "initialPosition != null");
    ;
  }).prototype = multidrag.MultiDragPointerState.prototype;
  dart.addTypeTests(multidrag.MultiDragPointerState);
  dart.addTypeCaches(multidrag.MultiDragPointerState);
  dart.setMethodSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getMethods(multidrag.MultiDragPointerState.__proto__),
    [_setArenaEntry]: dart.fnType(dart.void, [dart.legacy(arena.GestureArenaEntry)]),
    resolve: dart.fnType(dart.void, [dart.legacy(arena.GestureDisposition)]),
    [_move]: dart.fnType(dart.void, [dart.legacy(events.PointerMoveEvent)]),
    checkForResolutionAfterMove: dart.fnType(dart.void, []),
    rejected: dart.fnType(dart.void, []),
    [_startDrag]: dart.fnType(dart.void, [dart.legacy(drag.Drag)]),
    [_up]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getGetters(multidrag.MultiDragPointerState.__proto__),
    pendingDelta: dart.legacy(ui.Offset)
  }));
  dart.setLibraryUri(multidrag.MultiDragPointerState, L1);
  dart.setFieldSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getFields(multidrag.MultiDragPointerState.__proto__),
    initialPosition: dart.finalFieldType(dart.legacy(ui.Offset)),
    [_velocityTracker]: dart.finalFieldType(dart.legacy(velocity_tracker.VelocityTracker)),
    [_client]: dart.fieldType(dart.legacy(drag.Drag)),
    [_pendingDelta]: dart.fieldType(dart.legacy(ui.Offset)),
    [_lastPendingEventTimestamp]: dart.fieldType(dart.legacy(core.Duration)),
    [_arenaEntry]: dart.fieldType(dart.legacy(arena.GestureArenaEntry))
  }));
  var _pointers = dart.privateName(multidrag, "_pointers");
  var _handleEvent = dart.privateName(multidrag, "_handleEvent");
  var _removeState = dart.privateName(multidrag, "_removeState");
  const _is_MultiDragGestureRecognizer_default = Symbol('_is_MultiDragGestureRecognizer_default');
  var onStart = dart.privateName(multidrag, "MultiDragGestureRecognizer.onStart");
  multidrag.MultiDragGestureRecognizer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var IdentityMapOfintL$TL = () => (IdentityMapOfintL$TL = dart.constFn(_js_helper.IdentityMap$(intL(), TL())))();
    class MultiDragGestureRecognizer extends recognizer.GestureRecognizer {
      get onStart() {
        return this[onStart];
      }
      set onStart(value) {
        this[onStart] = value;
      }
      addAllowedPointer(event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, L0, 212, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, L0, 213, 12, "event.pointer != null");
        if (!(event.position != null)) dart.assertFailed(null, L0, 214, 12, "event.position != null");
        if (!!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, L0, 215, 12, "!_pointers.containsKey(event.pointer)");
        let state = this.createNewPointerState(event);
        this[_pointers][$_set](event.pointer, state);
        binding.GestureBinding.instance.pointerRouter.addRoute(event.pointer, dart.bind(this, _handleEvent));
        state[_setArenaEntry](binding.GestureBinding.instance.gestureArena.add(event.pointer, this));
      }
      [_handleEvent](event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, L0, 229, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, L0, 230, 12, "event.pointer != null");
        if (!(event.timeStamp != null)) dart.assertFailed(null, L0, 231, 12, "event.timeStamp != null");
        if (!(event.position != null)) dart.assertFailed(null, L0, 232, 12, "event.position != null");
        if (!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, L0, 233, 12, "_pointers.containsKey(event.pointer)");
        let state = this[_pointers][$_get](event.pointer);
        if (PointerMoveEventL().is(event)) {
          state[_move](event);
        } else if (PointerUpEventL().is(event)) {
          if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, L0, 239, 14, "event.delta == Offset.zero");
          state[_up]();
          this[_removeState](event.pointer);
        } else if (PointerCancelEventL().is(event)) {
          if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, L0, 244, 14, "event.delta == Offset.zero");
          state[_cancel]();
          this[_removeState](event.pointer);
        } else if (!PointerDownEventL().is(event)) {
          if (!false) dart.assertFailed(null, L0, 252, 14, "false");
        }
      }
      acceptGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, L0, 258, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (state == null) return;
        state.accepted(dart.fn(initialPosition => this[_startDrag](initialPosition, pointer), OffsetLToDragL()));
      }
      [_startDrag](initialPosition, pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, L0, 266, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (!(state != null)) dart.assertFailed(null, L0, 268, 12, "state != null");
        if (!(state[_pendingDelta] != null)) dart.assertFailed(null, L0, 269, 12, "state._pendingDelta != null");
        let drag = null;
        if (this.onStart != null) drag = this.invokeCallback(DragL(), "onStart", dart.fn(() => {
          let t0;
          t0 = initialPosition;
          return this.onStart(t0);
        }, VoidToDragL()));
        if (drag != null) {
          state[_startDrag](drag);
        } else {
          this[_removeState](pointer);
        }
        return drag;
      }
      rejectGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, L0, 283, 12, "_pointers != null");
        if (dart.test(this[_pointers][$containsKey](pointer))) {
          let state = this[_pointers][$_get](pointer);
          if (!(state != null)) dart.assertFailed(null, L0, 286, 14, "state != null");
          state.rejected();
          this[_removeState](pointer);
        }
      }
      [_removeState](pointer) {
        if (this[_pointers] == null) {
          return;
        }
        if (!dart.test(this[_pointers][$containsKey](pointer))) dart.assertFailed(null, L0, 298, 12, "_pointers.containsKey(pointer)");
        binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, _handleEvent));
        this[_pointers][$remove](pointer).dispose();
      }
      dispose() {
        this[_pointers][$keys][$toList]()[$forEach](dart.bind(this, _removeState));
        if (!dart.test(this[_pointers][$isEmpty])) dart.assertFailed(null, L0, 306, 12, "_pointers.isEmpty");
        this[_pointers] = null;
        super.dispose();
      }
    }
    (MultiDragGestureRecognizer.new = function(opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      this[onStart] = null;
      this[_pointers] = new (IdentityMapOfintL$TL()).new();
      MultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
      ;
    }).prototype = MultiDragGestureRecognizer.prototype;
    dart.addTypeTests(MultiDragGestureRecognizer);
    MultiDragGestureRecognizer.prototype[_is_MultiDragGestureRecognizer_default] = true;
    dart.addTypeCaches(MultiDragGestureRecognizer);
    dart.setMethodSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getMethods(MultiDragGestureRecognizer.__proto__),
      [_handleEvent]: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
      acceptGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
      [_startDrag]: dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset), dart.legacy(core.int)]),
      rejectGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
      [_removeState]: dart.fnType(dart.void, [dart.legacy(core.int)])
    }));
    dart.setLibraryUri(MultiDragGestureRecognizer, L1);
    dart.setFieldSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getFields(MultiDragGestureRecognizer.__proto__),
      onStart: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))),
      [_pointers]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(T))))
    }));
    return MultiDragGestureRecognizer;
  });
  multidrag.MultiDragGestureRecognizer = multidrag.MultiDragGestureRecognizer$();
  dart.addTypeTests(multidrag.MultiDragGestureRecognizer, _is_MultiDragGestureRecognizer_default);
  multidrag._ImmediatePointerState = class _ImmediatePointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 317, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._ImmediatePointerState.new = function(initialPosition) {
    multidrag._ImmediatePointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._ImmediatePointerState.prototype;
  dart.addTypeTests(multidrag._ImmediatePointerState);
  dart.addTypeCaches(multidrag._ImmediatePointerState);
  dart.setMethodSignature(multidrag._ImmediatePointerState, () => ({
    __proto__: dart.getMethods(multidrag._ImmediatePointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))])
  }));
  dart.setLibraryUri(multidrag._ImmediatePointerState, L1);
  multidrag.ImmediateMultiDragGestureRecognizer = class ImmediateMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(dart.legacy(multidrag._ImmediatePointerState)) {
    createNewPointerState(event) {
      return new multidrag._ImmediatePointerState.new(event.position);
    }
    get debugDescription() {
      return "multidrag";
    }
  };
  (multidrag.ImmediateMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.ImmediateMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.ImmediateMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(dart.legacy(multidrag._ImmediatePointerState), [dart.legacy(events.PointerDownEvent)])
  }));
  dart.setGetterSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multidrag.ImmediateMultiDragGestureRecognizer, L1);
  multidrag._HorizontalPointerState = class _HorizontalPointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 366, 12, "pendingDelta != null");
      if (this.pendingDelta.dx[$abs]() > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._HorizontalPointerState.new = function(initialPosition) {
    multidrag._HorizontalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._HorizontalPointerState.prototype;
  dart.addTypeTests(multidrag._HorizontalPointerState);
  dart.addTypeCaches(multidrag._HorizontalPointerState);
  dart.setMethodSignature(multidrag._HorizontalPointerState, () => ({
    __proto__: dart.getMethods(multidrag._HorizontalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))])
  }));
  dart.setLibraryUri(multidrag._HorizontalPointerState, L1);
  multidrag.HorizontalMultiDragGestureRecognizer = class HorizontalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(dart.legacy(multidrag._HorizontalPointerState)) {
    createNewPointerState(event) {
      return new multidrag._HorizontalPointerState.new(event.position);
    }
    get debugDescription() {
      return "horizontal multidrag";
    }
  };
  (multidrag.HorizontalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.HorizontalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.HorizontalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(dart.legacy(multidrag._HorizontalPointerState), [dart.legacy(events.PointerDownEvent)])
  }));
  dart.setGetterSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multidrag.HorizontalMultiDragGestureRecognizer, L1);
  multidrag._VerticalPointerState = class _VerticalPointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 415, 12, "pendingDelta != null");
      if (this.pendingDelta.dy[$abs]() > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._VerticalPointerState.new = function(initialPosition) {
    multidrag._VerticalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._VerticalPointerState.prototype;
  dart.addTypeTests(multidrag._VerticalPointerState);
  dart.addTypeCaches(multidrag._VerticalPointerState);
  dart.setMethodSignature(multidrag._VerticalPointerState, () => ({
    __proto__: dart.getMethods(multidrag._VerticalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))])
  }));
  dart.setLibraryUri(multidrag._VerticalPointerState, L1);
  multidrag.VerticalMultiDragGestureRecognizer = class VerticalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(dart.legacy(multidrag._VerticalPointerState)) {
    createNewPointerState(event) {
      return new multidrag._VerticalPointerState.new(event.position);
    }
    get debugDescription() {
      return "vertical multidrag";
    }
  };
  (multidrag.VerticalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.VerticalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.VerticalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.VerticalMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.VerticalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(dart.legacy(multidrag._VerticalPointerState), [dart.legacy(events.PointerDownEvent)])
  }));
  dart.setGetterSignature(multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multidrag.VerticalMultiDragGestureRecognizer, L1);
  var _timer = dart.privateName(multidrag, "_timer");
  var _starter = dart.privateName(multidrag, "_starter");
  var _delayPassed = dart.privateName(multidrag, "_delayPassed");
  var _ensureTimerStopped = dart.privateName(multidrag, "_ensureTimerStopped");
  multidrag._DelayedPointerState = class _DelayedPointerState extends multidrag.MultiDragPointerState {
    [_delayPassed]() {
      let t0;
      if (!(this[_timer] != null)) dart.assertFailed(null, L0, 469, 12, "_timer != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 470, 12, "pendingDelta != null");
      if (!(dart.notNull(this.pendingDelta.distance) <= 18)) dart.assertFailed(null, L0, 471, 12, "pendingDelta.distance <= kTouchSlop");
      this[_timer] = null;
      if (this[_starter] != null) {
        t0 = this.initialPosition;
        this[_starter](t0);
        this[_starter] = null;
      } else {
        this.resolve(arena.GestureDisposition.accepted);
      }
      if (!(this[_starter] == null)) dart.assertFailed(null, L0, 479, 12, "_starter == null");
    }
    [_ensureTimerStopped]() {
      let t0;
      t0 = this[_timer];
      t0 == null ? null : t0.cancel();
      this[_timer] = null;
    }
    accepted(starter) {
      if (!(this[_starter] == null)) dart.assertFailed(null, L0, 489, 12, "_starter == null");
      if (this[_timer] == null)
        starter(this.initialPosition);
      else
        this[_starter] = starter;
    }
    checkForResolutionAfterMove() {
      if (this[_timer] == null) {
        if (!(this[_starter] != null)) dart.assertFailed(null, L0, 504, 14, "_starter != null");
        return;
      }
      if (!(this.pendingDelta != null)) dart.assertFailed(null, L0, 507, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > 18) {
        this.resolve(arena.GestureDisposition.rejected);
        this[_ensureTimerStopped]();
      }
    }
    dispose() {
      this[_ensureTimerStopped]();
      super.dispose();
    }
  };
  (multidrag._DelayedPointerState.new = function(initialPosition, delay) {
    this[_timer] = null;
    this[_starter] = null;
    if (!(delay != null)) dart.assertFailed(null, L0, 460, 16, "delay != null");
    multidrag._DelayedPointerState.__proto__.new.call(this, initialPosition);
    this[_timer] = async.Timer.new(delay, dart.bind(this, _delayPassed));
  }).prototype = multidrag._DelayedPointerState.prototype;
  dart.addTypeTests(multidrag._DelayedPointerState);
  dart.addTypeCaches(multidrag._DelayedPointerState);
  dart.setMethodSignature(multidrag._DelayedPointerState, () => ({
    __proto__: dart.getMethods(multidrag._DelayedPointerState.__proto__),
    [_delayPassed]: dart.fnType(dart.void, []),
    [_ensureTimerStopped]: dart.fnType(dart.void, []),
    accepted: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)]))])
  }));
  dart.setLibraryUri(multidrag._DelayedPointerState, L1);
  dart.setFieldSignature(multidrag._DelayedPointerState, () => ({
    __proto__: dart.getFields(multidrag._DelayedPointerState.__proto__),
    [_timer]: dart.fieldType(dart.legacy(async.Timer)),
    [_starter]: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(drag.Drag), [dart.legacy(ui.Offset)])))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C0;
  var delay$ = dart.privateName(multidrag, "DelayedMultiDragGestureRecognizer.delay");
  multidrag.DelayedMultiDragGestureRecognizer = class DelayedMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(dart.legacy(multidrag._DelayedPointerState)) {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      super.delay = value;
    }
    createNewPointerState(event) {
      return new multidrag._DelayedPointerState.new(event.position, this.delay);
    }
    get debugDescription() {
      return "long multidrag";
    }
  };
  (multidrag.DelayedMultiDragGestureRecognizer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : C0 || CT.C0;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[delay$] = delay;
    if (!(delay != null)) dart.assertFailed(null, L0, 550, 15, "delay != null");
    multidrag.DelayedMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.DelayedMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.DelayedMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.DelayedMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(dart.legacy(multidrag._DelayedPointerState), [dart.legacy(events.PointerDownEvent)])
  }));
  dart.setGetterSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(multidrag.DelayedMultiDragGestureRecognizer, L1);
  dart.setFieldSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getFields(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    delay: dart.finalFieldType(dart.legacy(core.Duration))
  }));
  dart.trackLibraries("packages/flutter/src/gestures/multidrag.dart", {
    "package:flutter/src/gestures/multidrag.dart": multidrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multidrag.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/gestures/multidrag.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multidrag: multidrag
  };
}));

//# sourceMappingURL=multidrag.dart.lib.js.map
