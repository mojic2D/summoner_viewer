define(['dart_sdk', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/image_cache.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/services/platform_channel.dart', 'packages/flutter/src/foundation/_platform_web.dart'], (function load__packages__flutter__src__painting___network_image_web_dart(dart_sdk, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__image_cache$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__services__platform_channel$46dart, packages__flutter__src__foundation___platform_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const image_cache = packages__flutter__src__painting__image_cache$46dart.src__painting__image_cache;
  const binding = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const asset_bundle = packages__flutter__src__services__platform_channel$46dart.src__services__asset_bundle;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  var _network_image_web = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toString = dartx.toString;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $lengthInBytes = dartx.lengthInBytes;
  var NetworkImageL = () => (NetworkImageL = dart.constFn(dart.legacy(_network_image_web.NetworkImage)))();
  var SynchronousFutureOfNetworkImageL = () => (SynchronousFutureOfNetworkImageL = dart.constFn(synchronous_future.SynchronousFuture$(NetworkImageL())))();
  var NetworkImageL$ = () => (NetworkImageL$ = dart.constFn(dart.legacy(image_provider.NetworkImage)))();
  var ImageChunkEventL = () => (ImageChunkEventL = dart.constFn(dart.legacy(image_stream.ImageChunkEvent)))();
  var StreamControllerOfImageChunkEventL = () => (StreamControllerOfImageChunkEventL = dart.constFn(async.StreamController$(ImageChunkEventL())))();
  var ImageProviderL = () => (ImageProviderL = dart.constFn(dart.legacy(image_provider.ImageProvider)))();
  var DiagnosticsPropertyOfImageProviderL = () => (DiagnosticsPropertyOfImageProviderL = dart.constFn(diagnostics.DiagnosticsProperty$(ImageProviderL())))();
  var DiagnosticsPropertyOfNetworkImageL = () => (DiagnosticsPropertyOfNetworkImageL = dart.constFn(diagnostics.DiagnosticsProperty$(NetworkImageL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var JSArrayOfDiagnosticsNodeL = () => (JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(DiagnosticsNodeL())))();
  var ListOfDiagnosticsNodeL = () => (ListOfDiagnosticsNodeL = dart.constFn(core.List$(DiagnosticsNodeL())))();
  var ListLOfDiagnosticsNodeL = () => (ListLOfDiagnosticsNodeL = dart.constFn(dart.legacy(ListOfDiagnosticsNodeL())))();
  var VoidToListLOfDiagnosticsNodeL = () => (VoidToListLOfDiagnosticsNodeL = dart.constFn(dart.fnType(ListLOfDiagnosticsNodeL(), [])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var intLAndintLToNullN = () => (intLAndintLToNullN = dart.constFn(dart.fnType(core.Null, [intL(), intL()])))();
  var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
  var dynamicAndStackTraceLTovoid = () => (dynamicAndStackTraceLTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, StackTraceL()])))();
  var dynamicAndStackTraceLToLvoid = () => (dynamicAndStackTraceLToLvoid = dart.constFn(dart.legacy(dynamicAndStackTraceLTovoid())))();
  var ImageConfigurationL = () => (ImageConfigurationL = dart.constFn(dart.legacy(image_provider.ImageConfiguration)))();
  var DiagnosticsPropertyOfImageConfigurationL = () => (DiagnosticsPropertyOfImageConfigurationL = dart.constFn(diagnostics.DiagnosticsProperty$(ImageConfigurationL())))();
  var SyncIterableOfDiagnosticsNodeL = () => (SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(DiagnosticsNodeL())))();
  var IterableOfDiagnosticsNodeL = () => (IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(DiagnosticsNodeL())))();
  var IterableLOfDiagnosticsNodeL = () => (IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(IterableOfDiagnosticsNodeL())))();
  var VoidToIterableLOfDiagnosticsNodeL = () => (VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(IterableLOfDiagnosticsNodeL(), [])))();
  var FutureOfNullN = () => (FutureOfNullN = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNullN = () => (FutureLOfNullN = dart.constFn(dart.legacy(FutureOfNullN())))();
  var ImageCacheStatusL = () => (ImageCacheStatusL = dart.constFn(dart.legacy(image_cache.ImageCacheStatus)))();
  var CompleterOfImageCacheStatusL = () => (CompleterOfImageCacheStatusL = dart.constFn(async.Completer$(ImageCacheStatusL())))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var dynamicAndStackTraceLToFutureLOfvoid = () => (dynamicAndStackTraceLToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [dart.dynamic, StackTraceL()])))();
  var ZoneL = () => (ZoneL = dart.constFn(dart.legacy(async.Zone)))();
  var ZoneDelegateL = () => (ZoneDelegateL = dart.constFn(dart.legacy(async.ZoneDelegate)))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var ZoneLAndZoneDelegateLAndZoneL__ToNullN = () => (ZoneLAndZoneDelegateLAndZoneL__ToNullN = dart.constFn(dart.fnType(core.Null, [ZoneL(), ZoneDelegateL(), ZoneL(), ObjectL(), StackTraceL()])))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var ImageStreamCompleterL = () => (ImageStreamCompleterL = dart.constFn(dart.legacy(image_stream.ImageStreamCompleter)))();
  var VoidToImageStreamCompleterL = () => (VoidToImageStreamCompleterL = dart.constFn(dart.fnType(ImageStreamCompleterL(), [])))();
  var AssetBundleImageKeyL = () => (AssetBundleImageKeyL = dart.constFn(dart.legacy(image_provider.AssetBundleImageKey)))();
  var DiagnosticsPropertyOfAssetBundleImageKeyL = () => (DiagnosticsPropertyOfAssetBundleImageKeyL = dart.constFn(diagnostics.DiagnosticsProperty$(AssetBundleImageKeyL())))();
  var FlutterErrorL = () => (FlutterErrorL = dart.constFn(dart.legacy(assertions.FlutterError)))();
  var CodecL = () => (CodecL = dart.constFn(dart.legacy(ui.Codec)))();
  var _SizeAwareCacheKeyL = () => (_SizeAwareCacheKeyL = dart.constFn(dart.legacy(image_provider._SizeAwareCacheKey)))();
  var FutureOfCodecL = () => (FutureOfCodecL = dart.constFn(async.Future$(CodecL())))();
  var FutureLOfCodecL = () => (FutureLOfCodecL = dart.constFn(dart.legacy(FutureOfCodecL())))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var Uint8ListL__ToFutureLOfCodecL = () => (Uint8ListL__ToFutureLOfCodecL = dart.constFn(dart.fnType(FutureLOfCodecL(), [Uint8ListL()], {allowUpscaling: boolL(), cacheHeight: intL(), cacheWidth: intL()}, {})))();
  var SynchronousFutureOf_SizeAwareCacheKeyL = () => (SynchronousFutureOf_SizeAwareCacheKeyL = dart.constFn(synchronous_future.SynchronousFuture$(_SizeAwareCacheKeyL())))();
  var ObjectLToNullN = () => (ObjectLToNullN = dart.constFn(dart.fnType(core.Null, [ObjectL()])))();
  var CompleterOf_SizeAwareCacheKeyL = () => (CompleterOf_SizeAwareCacheKeyL = dart.constFn(async.Completer$(_SizeAwareCacheKeyL())))();
  var FileImageL = () => (FileImageL = dart.constFn(dart.legacy(image_provider.FileImage)))();
  var SynchronousFutureOfFileImageL = () => (SynchronousFutureOfFileImageL = dart.constFn(synchronous_future.SynchronousFuture$(FileImageL())))();
  var MemoryImageL = () => (MemoryImageL = dart.constFn(dart.legacy(image_provider.MemoryImage)))();
  var SynchronousFutureOfMemoryImageL = () => (SynchronousFutureOfMemoryImageL = dart.constFn(synchronous_future.SynchronousFuture$(MemoryImageL())))();
  var SynchronousFutureOfAssetBundleImageKeyL = () => (SynchronousFutureOfAssetBundleImageKeyL = dart.constFn(synchronous_future.SynchronousFuture$(AssetBundleImageKeyL())))();
  var ExactAssetImageL = () => (ExactAssetImageL = dart.constFn(dart.legacy(image_provider.ExactAssetImage)))();
  const CT = Object.create(null);
  var L2 = "package:flutter/src/painting/image_provider.dart";
  var L0 = "file:///C:/flutter/packages/flutter/lib/src/painting/_network_image_web.dart";
  var L3 = "package:flutter/src/painting/_network_image_web.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/painting/image_provider.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: image_provider.ImageConfiguration.prototype,
        [ImageConfiguration_platform]: null,
        [ImageConfiguration_size]: null,
        [ImageConfiguration_textDirection]: null,
        [ImageConfiguration_locale]: null,
        [ImageConfiguration_devicePixelRatio]: null,
        [ImageConfiguration_bundle]: null
      });
    }
  }, false);
  var _loadAsync = dart.privateName(_network_image_web, "_loadAsync");
  var _imageStreamInformationCollector = dart.privateName(_network_image_web, "_imageStreamInformationCollector");
  var _createErrorHandlerAndKey = dart.privateName(image_provider, "_createErrorHandlerAndKey");
  var ImageConfiguration_platform = dart.privateName(image_provider, "ImageConfiguration.platform");
  var ImageConfiguration_size = dart.privateName(image_provider, "ImageConfiguration.size");
  var ImageConfiguration_textDirection = dart.privateName(image_provider, "ImageConfiguration.textDirection");
  var ImageConfiguration_locale = dart.privateName(image_provider, "ImageConfiguration.locale");
  var ImageConfiguration_devicePixelRatio = dart.privateName(image_provider, "ImageConfiguration.devicePixelRatio");
  var ImageConfiguration_bundle = dart.privateName(image_provider, "ImageConfiguration.bundle");
  var C0;
  const _is_ImageProvider_default = Symbol('_is_ImageProvider_default');
  image_provider.ImageProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLAndFnToNullN = () => (TLAndFnToNullN = dart.constFn(dart.fnType(core.Null, [TL(), dynamicAndStackTraceLToLvoid()])))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    var TLAnddynamicAndStackTraceLToFutureLOfNullN = () => (TLAnddynamicAndStackTraceLToFutureLOfNullN = dart.constFn(dart.fnType(FutureLOfNullN(), [TL(), dart.dynamic, StackTraceL()])))();
    var TLToNullN = () => (TLToNullN = dart.constFn(dart.fnType(core.Null, [TL()])))();
    class ImageProvider extends core.Object {
      resolve(configuration) {
        if (!(configuration != null)) dart.assertFailed(null, L1, 327, 12, "configuration != null");
        let stream = this.createStream(configuration);
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, errorHandler) => {
          this.resolveStreamForKey(configuration, stream, key, errorHandler);
        }, TLAndFnToNullN()), dart.fn((key, exception, stack) => async.async(core.Null, (function*() {
          yield null;
          let imageCompleter = new image_provider._ErrorImageCompleter.new();
          stream.setCompleter(imageCompleter);
          let collector = null;
          if (!dart.test(dart.fn(() => {
            collector = dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
              yield new (DiagnosticsPropertyOfImageProviderL()).new("Image provider", this);
              yield new (DiagnosticsPropertyOfImageConfigurationL()).new("Image configuration", configuration);
              yield new (DiagnosticsPropertyOfTL()).new("Image key", key, {defaultValue: null});
            }).bind(this)), VoidToIterableLOfDiagnosticsNodeL());
            return true;
          }, VoidToboolL())())) dart.assertFailed(null, L1, 341, 16, "() {\r\n          collector = () sync* {\r\n            yield DiagnosticsProperty<ImageProvider>('Image provider', this);\r\n            yield DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration);\r\n            yield DiagnosticsProperty<T>('Image key', key, defaultValue: null);\r\n          };\r\n          return true;\r\n        }()");
          imageCompleter.setError({exception: exception, stack: stack, context: new assertions.ErrorDescription.new("while resolving an image"), silent: true, informationCollector: collector});
        }).bind(this)), TLAnddynamicAndStackTraceLToFutureLOfNullN()));
        return stream;
      }
      createStream(configuration) {
        return new image_stream.ImageStream.new();
      }
      obtainCacheStatus(opts) {
        let configuration = opts && 'configuration' in opts ? opts.configuration : null;
        let handleError = opts && 'handleError' in opts ? opts.handleError : null;
        if (!(configuration != null)) dart.assertFailed(null, L1, 385, 12, "configuration != null");
        let completer = CompleterOfImageCacheStatusL().new();
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, innerHandleError) => {
          completer.complete(binding.PaintingBinding.instance.imageCache.statusForKey(key));
        }, TLAndFnToNullN()), dart.fn((key, exception, stack) => async.async(core.Null, (function*() {
          if (handleError != null) {
            handleError(exception, stack);
          } else {
            let collector = null;
            if (!dart.test(dart.fn(() => {
              collector = dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
                yield new (DiagnosticsPropertyOfImageProviderL()).new("Image provider", this);
                yield new (DiagnosticsPropertyOfImageConfigurationL()).new("Image configuration", configuration);
                yield new (DiagnosticsPropertyOfTL()).new("Image key", key, {defaultValue: null});
              }).bind(this)), VoidToIterableLOfDiagnosticsNodeL());
              return true;
            }, VoidToboolL())())) dart.assertFailed(null, L1, 397, 18, "() {\r\n            collector = () sync* {\r\n              yield DiagnosticsProperty<ImageProvider>('Image provider', this);\r\n              yield DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration);\r\n              yield DiagnosticsProperty<T>('Image key', key, defaultValue: null);\r\n            };\r\n            return true;\r\n          }()");
            assertions.FlutterError.onError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("while checking the cache location of an image"), informationCollector: collector, exception: exception, stack: stack}));
            completer.complete(null);
          }
        }).bind(this)), TLAnddynamicAndStackTraceLToFutureLOfNullN()));
        return completer.future;
      }
      [_createErrorHandlerAndKey](configuration, successCallback, errorCallback) {
        let obtainedKey = null;
        let didError = false;
        function handleError(exception, stack) {
          return async.async(dart.void, function* handleError() {
            if (didError) {
              return;
            }
            if (!didError) {
              errorCallback(obtainedKey, exception, stack);
            }
            didError = true;
          });
        }
        dart.fn(handleError, dynamicAndStackTraceLToFutureLOfvoid());
        let dangerZone = async.Zone.current.fork({specification: new async._ZoneSpecification.new({handleUncaughtError: dart.fn((zone, delegate, parent, error, stackTrace) => {
              handleError(error, stackTrace);
            }, ZoneLAndZoneDelegateLAndZoneL__ToNullN())})});
        dangerZone.runGuarded(dart.fn(() => {
          let key = null;
          try {
            key = this.obtainKey(configuration);
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            handleError(error, stackTrace);
            return;
          }
          key.then(dart.void, dart.fn(key => {
            obtainedKey = key;
            try {
              successCallback(key, handleError);
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              handleError(error, stackTrace);
            }
          }, TLToNullN())).catchError(handleError);
        }, VoidToNullN()));
      }
      resolveStreamForKey(configuration, stream, key, handleError) {
        TL().as(key);
        if (stream.completer != null) {
          let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => stream.completer, VoidToImageStreamCompleterL()), {onError: handleError});
          if (!(completer == stream.completer)) dart.assertFailed(null, L1, 500, 14, "identical(completer, stream.completer)");
          return;
        }
        let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => this.load(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodec')), VoidToImageStreamCompleterL()), {onError: handleError});
        if (completer != null) {
          stream.setCompleter(completer);
        }
      }
      evict(opts) {
        let cache = opts && 'cache' in opts ? opts.cache : null;
        let configuration = opts && 'configuration' in opts ? opts.configuration : C0 || CT.C0;
        return async.async(boolL(), (function* evict() {
          cache == null ? cache = binding.imageCache : null;
          let key = (yield this.obtainKey(configuration));
          return cache.evict(key);
        }).bind(this));
      }
      toString() {
        return dart.str(object.objectRuntimeType(this, "ImageConfiguration")) + "()";
      }
    }
    (ImageProvider.new = function() {
      ;
    }).prototype = ImageProvider.prototype;
    dart.addTypeTests(ImageProvider);
    ImageProvider.prototype[_is_ImageProvider_default] = true;
    dart.addTypeCaches(ImageProvider);
    dart.setMethodSignature(ImageProvider, () => ({
      __proto__: dart.getMethods(ImageProvider.__proto__),
      resolve: dart.fnType(dart.legacy(image_stream.ImageStream), [dart.legacy(image_provider.ImageConfiguration)]),
      createStream: dart.fnType(dart.legacy(image_stream.ImageStream), [dart.legacy(image_provider.ImageConfiguration)]),
      obtainCacheStatus: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_cache.ImageCacheStatus))), [], {configuration: dart.legacy(image_provider.ImageConfiguration), handleError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
      [_createErrorHandlerAndKey]: dart.fnType(dart.void, [dart.legacy(image_provider.ImageConfiguration), dart.legacy(dart.fnType(dart.void, [dart.legacy(T), dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))])), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(T), dart.dynamic, dart.legacy(core.StackTrace)]))]),
      resolveStreamForKey: dart.fnType(dart.void, [dart.legacy(image_provider.ImageConfiguration), dart.legacy(image_stream.ImageStream), dart.legacy(core.Object), dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))]),
      evict: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {cache: dart.legacy(image_cache.ImageCache), configuration: dart.legacy(image_provider.ImageConfiguration)}, {}),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setLibraryUri(ImageProvider, L2);
    dart.defineExtensionMethods(ImageProvider, ['toString']);
    return ImageProvider;
  });
  image_provider.ImageProvider = image_provider.ImageProvider$();
  dart.addTypeTests(image_provider.ImageProvider, _is_ImageProvider_default);
  image_provider.NetworkImage = class NetworkImage extends image_provider.ImageProvider {};
  dart.addTypeTests(image_provider.NetworkImage);
  dart.addTypeCaches(image_provider.NetworkImage);
  dart.setLibraryUri(image_provider.NetworkImage, L2);
  var url$ = dart.privateName(_network_image_web, "NetworkImage.url");
  var scale$ = dart.privateName(_network_image_web, "NetworkImage.scale");
  var headers$ = dart.privateName(_network_image_web, "NetworkImage.headers");
  _network_image_web.NetworkImage = class NetworkImage extends image_provider.ImageProvider$(dart.legacy(image_provider.NetworkImage)) {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    obtainKey(configuration) {
      return new (SynchronousFutureOfNetworkImageL()).new(this);
    }
    load(key, decode) {
      NetworkImageL$().as(key);
      let chunkEvents = StreamControllerOfImageChunkEventL().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](NetworkImageL().as(key), decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    [_imageStreamInformationCollector](key) {
      let collector = null;
      if (!dart.test(dart.fn(() => {
        collector = dart.fn(() => JSArrayOfDiagnosticsNodeL().of([new (DiagnosticsPropertyOfImageProviderL()).new("Image provider", this), new (DiagnosticsPropertyOfNetworkImageL()).new("Image key", NetworkImageL().as(key))]), VoidToListLOfDiagnosticsNodeL());
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L0, 64, 12, "() {\r\n      collector = () {\r\n        return <DiagnosticsNode>[\r\n          DiagnosticsProperty<image_provider.ImageProvider>(\r\n              'Image provider', this),\r\n          DiagnosticsProperty<NetworkImage>('Image key', key as NetworkImage),\r\n        ];\r\n      };\r\n      return true;\r\n    }()");
      return collector;
    }
    [_loadAsync](key, decode, chunkEvents) {
      if (!dart.equals(key, this)) dart.assertFailed(null, L0, 87, 12, "key == this");
      let resolved = core.Uri.base.resolve(key.url);
      return ui.webOnlyInstantiateImageCodecFromUrl(resolved, {chunkCallback: dart.fn((bytes, total) => {
          chunkEvents.add(new image_stream.ImageChunkEvent.new({cumulativeBytesLoaded: bytes, expectedTotalBytes: total}));
        }, intLAndintLToNullN())});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return NetworkImageL().is(other) && other.url == this.url && other.scale == this.scale;
    }
    get hashCode() {
      return ui.hashValues(this.url, this.scale);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "NetworkImage")) + "(\"" + dart.str(this.url) + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (_network_image_web.NetworkImage.new = function(url, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[url$] = url;
    this[scale$] = scale;
    this[headers$] = headers;
    if (!(url != null)) dart.assertFailed(null, L0, 26, 16, "url != null");
    if (!(scale != null)) dart.assertFailed(null, L0, 27, 16, "scale != null");
    _network_image_web.NetworkImage.__proto__.new.call(this);
    ;
  }).prototype = _network_image_web.NetworkImage.prototype;
  dart.addTypeTests(_network_image_web.NetworkImage);
  dart.addTypeCaches(_network_image_web.NetworkImage);
  _network_image_web.NetworkImage[dart.implements] = () => [image_provider.NetworkImage];
  dart.setMethodSignature(_network_image_web.NetworkImage, () => ({
    __proto__: dart.getMethods(_network_image_web.NetworkImage.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(_network_image_web.NetworkImage))), [dart.legacy(image_provider.ImageConfiguration)]),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_imageStreamInformationCollector]: dart.fnType(dart.legacy(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), [])), [dart.legacy(image_provider.NetworkImage)]),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(_network_image_web.NetworkImage), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {})), dart.legacy(async.StreamController$(dart.legacy(image_stream.ImageChunkEvent)))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(_network_image_web.NetworkImage, () => ({
    __proto__: dart.getGetters(_network_image_web.NetworkImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(_network_image_web.NetworkImage, L3);
  dart.setFieldSignature(_network_image_web.NetworkImage, () => ({
    __proto__: dart.getFields(_network_image_web.NetworkImage.__proto__),
    url: dart.finalFieldType(dart.legacy(core.String)),
    scale: dart.finalFieldType(dart.legacy(core.double)),
    headers: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(_network_image_web.NetworkImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_network_image_web.NetworkImage, ['hashCode']);
  image_provider.ImageConfiguration = class ImageConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: (t2 = bundle, t2 == null ? this.bundle : t2), devicePixelRatio: (t2$ = devicePixelRatio, t2$ == null ? this.devicePixelRatio : t2$), locale: (t2$0 = locale, t2$0 == null ? this.locale : t2$0), textDirection: (t2$1 = textDirection, t2$1 == null ? this.textDirection : t2$1), size: (t2$2 = size, t2$2 == null ? this.size : t2$2), platform: (t2$3 = platform, t2$3 == null ? this.platform : t2$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return ImageConfigurationL().is(other) && dart.equals(other.bundle, this.bundle) && other.devicePixelRatio == this.devicePixelRatio && dart.equals(other.locale, this.locale) && dart.equals(other.textDirection, this.textDirection) && dart.equals(other.size, this.size) && dart.equals(other.platform, this.platform);
    }
    get hashCode() {
      return ui.hashValues(this.bundle, this.devicePixelRatio, this.locale, this.size, this.platform);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("ImageConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        if (hasArguments) result.write(", ");
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.devicePixelRatio != null) {
        if (hasArguments) result.write(", ");
        result.write("devicePixelRatio: " + dart.str(this.devicePixelRatio[$toStringAsFixed](1)));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) result.write(", ");
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) result.write(", ");
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.size != null) {
        if (hasArguments) result.write(", ");
        result.write("size: " + dart.str(this.size));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) result.write(", ");
        result.write("platform: " + dart.str(diagnostics.describeEnum(this.platform)));
        hasArguments = true;
      }
      result.write(")");
      return result.toString();
    }
  };
  (image_provider.ImageConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    this[bundle$] = bundle;
    this[devicePixelRatio$] = devicePixelRatio;
    this[locale$] = locale;
    this[textDirection$] = textDirection;
    this[size$] = size;
    this[platform$] = platform;
    ;
  }).prototype = image_provider.ImageConfiguration.prototype;
  dart.addTypeTests(image_provider.ImageConfiguration);
  dart.addTypeCaches(image_provider.ImageConfiguration);
  const bundle$ = ImageConfiguration_bundle;
  const devicePixelRatio$ = ImageConfiguration_devicePixelRatio;
  const locale$ = ImageConfiguration_locale;
  const textDirection$ = ImageConfiguration_textDirection;
  const size$ = ImageConfiguration_size;
  const platform$ = ImageConfiguration_platform;
  dart.setMethodSignature(image_provider.ImageConfiguration, () => ({
    __proto__: dart.getMethods(image_provider.ImageConfiguration.__proto__),
    copyWith: dart.fnType(dart.legacy(image_provider.ImageConfiguration), [], {bundle: dart.legacy(asset_bundle.AssetBundle), devicePixelRatio: dart.legacy(core.double), locale: dart.legacy(ui.Locale), platform: dart.legacy(platform.TargetPlatform), size: dart.legacy(ui.Size), textDirection: dart.legacy(ui.TextDirection)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(image_provider.ImageConfiguration, () => ({
    __proto__: dart.getGetters(image_provider.ImageConfiguration.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.ImageConfiguration, L2);
  dart.setFieldSignature(image_provider.ImageConfiguration, () => ({
    __proto__: dart.getFields(image_provider.ImageConfiguration.__proto__),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    devicePixelRatio: dart.finalFieldType(dart.legacy(core.double)),
    locale: dart.finalFieldType(dart.legacy(ui.Locale)),
    textDirection: dart.finalFieldType(dart.legacy(ui.TextDirection)),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    platform: dart.finalFieldType(dart.legacy(platform.TargetPlatform))
  }));
  dart.defineExtensionMethods(image_provider.ImageConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ImageConfiguration, ['hashCode']);
  dart.defineLazy(image_provider.ImageConfiguration, {
    /*image_provider.ImageConfiguration.empty*/get empty() {
      return C0 || CT.C0;
    }
  }, true);
  var bundle$0 = dart.privateName(image_provider, "AssetBundleImageKey.bundle");
  var name$ = dart.privateName(image_provider, "AssetBundleImageKey.name");
  var scale$0 = dart.privateName(image_provider, "AssetBundleImageKey.scale");
  image_provider.AssetBundleImageKey = class AssetBundleImageKey extends core.Object {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get scale() {
      return this[scale$0];
    }
    set scale(value) {
      super.scale = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return AssetBundleImageKeyL().is(other) && dart.equals(other.bundle, this.bundle) && other.name == this.name && other.scale == this.scale;
    }
    get hashCode() {
      return ui.hashValues(this.bundle, this.name, this.scale);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "AssetBundleImageKey")) + "(bundle: " + dart.str(this.bundle) + ", name: \"" + dart.str(this.name) + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.AssetBundleImageKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    this[bundle$0] = bundle;
    this[name$] = name;
    this[scale$0] = scale;
    if (!(bundle != null)) dart.assertFailed(null, L1, 596, 15, "bundle != null");
    if (!(name != null)) dart.assertFailed(null, L1, 597, 15, "name != null");
    if (!(scale != null)) dart.assertFailed(null, L1, 598, 15, "scale != null");
    ;
  }).prototype = image_provider.AssetBundleImageKey.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageKey);
  dart.addTypeCaches(image_provider.AssetBundleImageKey);
  dart.setMethodSignature(image_provider.AssetBundleImageKey, () => ({
    __proto__: dart.getMethods(image_provider.AssetBundleImageKey.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(image_provider.AssetBundleImageKey, () => ({
    __proto__: dart.getGetters(image_provider.AssetBundleImageKey.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.AssetBundleImageKey, L2);
  dart.setFieldSignature(image_provider.AssetBundleImageKey, () => ({
    __proto__: dart.getFields(image_provider.AssetBundleImageKey.__proto__),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    scale: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(image_provider.AssetBundleImageKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.AssetBundleImageKey, ['hashCode']);
  var _loadAsync$ = dart.privateName(image_provider, "_loadAsync");
  image_provider.AssetBundleImageProvider = class AssetBundleImageProvider extends image_provider.ImageProvider$(dart.legacy(image_provider.AssetBundleImageKey)) {
    load(key, decode) {
      AssetBundleImageKeyL().as(key);
      let collector = null;
      if (!dart.test(dart.fn(() => {
        collector = dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
          yield new (DiagnosticsPropertyOfImageProviderL()).new("Image provider", this);
          yield new (DiagnosticsPropertyOfAssetBundleImageKeyL()).new("Image key", key);
        }).bind(this)), VoidToIterableLOfDiagnosticsNodeL());
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 644, 12, "() {\r\n      collector = () sync* {\r\n        yield DiagnosticsProperty<ImageProvider>('Image provider', this);\r\n        yield DiagnosticsProperty<AssetBundleImageKey>('Image key', key);\r\n      };\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, decode), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    [_loadAsync$](key, decode) {
      return async.async(CodecL(), function* _loadAsync() {
        let data = null;
        try {
          data = (yield key.bundle.load(key.name));
        } catch (e) {
          let ex = dart.getThrown(e);
          if (FlutterErrorL().is(ex)) {
            binding.PaintingBinding.instance.imageCache.evict(key);
            dart.rethrow(e);
          } else
            throw e;
        }
        if (data == null) {
          binding.PaintingBinding.instance.imageCache.evict(key);
          dart.throw(new core.StateError.new("Unable to read data"));
        }
        return yield decode(data[$buffer][$asUint8List]());
      });
    }
  };
  (image_provider.AssetBundleImageProvider.new = function() {
    image_provider.AssetBundleImageProvider.__proto__.new.call(this);
    ;
  }).prototype = image_provider.AssetBundleImageProvider.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageProvider);
  dart.addTypeCaches(image_provider.AssetBundleImageProvider);
  dart.setMethodSignature(image_provider.AssetBundleImageProvider, () => ({
    __proto__: dart.getMethods(image_provider.AssetBundleImageProvider.__proto__),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_loadAsync$]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(image_provider.AssetBundleImageKey), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))])
  }));
  dart.setLibraryUri(image_provider.AssetBundleImageProvider, L2);
  var providerCacheKey$ = dart.privateName(image_provider, "_SizeAwareCacheKey.providerCacheKey");
  var width$ = dart.privateName(image_provider, "_SizeAwareCacheKey.width");
  var height$ = dart.privateName(image_provider, "_SizeAwareCacheKey.height");
  image_provider._SizeAwareCacheKey = class _SizeAwareCacheKey extends core.Object {
    get providerCacheKey() {
      return this[providerCacheKey$];
    }
    set providerCacheKey(value) {
      super.providerCacheKey = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return _SizeAwareCacheKeyL().is(other) && dart.equals(other.providerCacheKey, this.providerCacheKey) && other.width == this.width && other.height == this.height;
    }
    get hashCode() {
      return ui.hashValues(this.providerCacheKey, this.width, this.height);
    }
  };
  (image_provider._SizeAwareCacheKey.new = function(providerCacheKey, width, height) {
    this[providerCacheKey$] = providerCacheKey;
    this[width$] = width;
    this[height$] = height;
    ;
  }).prototype = image_provider._SizeAwareCacheKey.prototype;
  dart.addTypeTests(image_provider._SizeAwareCacheKey);
  dart.addTypeCaches(image_provider._SizeAwareCacheKey);
  dart.setMethodSignature(image_provider._SizeAwareCacheKey, () => ({
    __proto__: dart.getMethods(image_provider._SizeAwareCacheKey.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(image_provider._SizeAwareCacheKey, () => ({
    __proto__: dart.getGetters(image_provider._SizeAwareCacheKey.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider._SizeAwareCacheKey, L2);
  dart.setFieldSignature(image_provider._SizeAwareCacheKey, () => ({
    __proto__: dart.getFields(image_provider._SizeAwareCacheKey.__proto__),
    providerCacheKey: dart.finalFieldType(dart.legacy(core.Object)),
    width: dart.finalFieldType(dart.legacy(core.int)),
    height: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(image_provider._SizeAwareCacheKey, ['_equals']);
  dart.defineExtensionAccessors(image_provider._SizeAwareCacheKey, ['hashCode']);
  var imageProvider$ = dart.privateName(image_provider, "ResizeImage.imageProvider");
  var width$0 = dart.privateName(image_provider, "ResizeImage.width");
  var height$0 = dart.privateName(image_provider, "ResizeImage.height");
  var allowUpscaling$ = dart.privateName(image_provider, "ResizeImage.allowUpscaling");
  image_provider.ResizeImage = class ResizeImage extends image_provider.ImageProvider$(dart.legacy(image_provider._SizeAwareCacheKey)) {
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get allowUpscaling() {
      return this[allowUpscaling$];
    }
    set allowUpscaling(value) {
      super.allowUpscaling = value;
    }
    static resizeIfNeeded(cacheWidth, cacheHeight, provider) {
      if (cacheWidth != null || cacheHeight != null) {
        return new image_provider.ResizeImage.new(provider, {width: cacheWidth, height: cacheHeight});
      }
      return provider;
    }
    load(key, decode) {
      _SizeAwareCacheKeyL().as(key);
      let decodeResize = dart.fn((bytes, opts) => {
        let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : null;
        let cacheHeight = opts && 'cacheHeight' in opts ? opts.cacheHeight : null;
        let cacheWidth = opts && 'cacheWidth' in opts ? opts.cacheWidth : null;
        if (!(cacheWidth == null && cacheHeight == null && allowUpscaling == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies " + "cacheWidth, cacheHeight, or allowUpscaling.", L1, 762, 9, "cacheWidth == null && cacheHeight == null && allowUpscaling == null");
        return decode(bytes, {cacheWidth: this.width, cacheHeight: this.height, allowUpscaling: this.allowUpscaling});
      }, Uint8ListL__ToFutureLOfCodecL());
      let completer = this.imageProvider.load(key.providerCacheKey, decodeResize);
      if (!false) {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key.width) + "×" + dart.str(key.height) + ")";
      }
      return completer;
    }
    obtainKey(configuration) {
      let completer = null;
      let result = null;
      this.imageProvider.obtainKey(configuration).then(core.Null, dart.fn(key => {
        if (completer == null) {
          result = new (SynchronousFutureOf_SizeAwareCacheKeyL()).new(new image_provider._SizeAwareCacheKey.new(key, this.width, this.height));
        } else {
          completer.complete(new image_provider._SizeAwareCacheKey.new(key, this.width, this.height));
        }
      }, ObjectLToNullN()));
      if (result != null) {
        return result;
      }
      completer = CompleterOf_SizeAwareCacheKeyL().new();
      return completer.future;
    }
  };
  (image_provider.ResizeImage.new = function(imageProvider, opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
    this[imageProvider$] = imageProvider;
    this[width$0] = width;
    this[height$0] = height;
    this[allowUpscaling$] = allowUpscaling;
    if (!(width != null || height != null)) dart.assertFailed(null, L1, 725, 15, "width != null || height != null");
    if (!(allowUpscaling != null)) dart.assertFailed(null, L1, 726, 15, "allowUpscaling != null");
    image_provider.ResizeImage.__proto__.new.call(this);
    ;
  }).prototype = image_provider.ResizeImage.prototype;
  dart.addTypeTests(image_provider.ResizeImage);
  dart.addTypeCaches(image_provider.ResizeImage);
  dart.setMethodSignature(image_provider.ResizeImage, () => ({
    __proto__: dart.getMethods(image_provider.ResizeImage.__proto__),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_provider._SizeAwareCacheKey))), [dart.legacy(image_provider.ImageConfiguration)])
  }));
  dart.setLibraryUri(image_provider.ResizeImage, L2);
  dart.setFieldSignature(image_provider.ResizeImage, () => ({
    __proto__: dart.getFields(image_provider.ResizeImage.__proto__),
    imageProvider: dart.finalFieldType(dart.legacy(image_provider.ImageProvider)),
    width: dart.finalFieldType(dart.legacy(core.int)),
    height: dart.finalFieldType(dart.legacy(core.int)),
    allowUpscaling: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var file$ = dart.privateName(image_provider, "FileImage.file");
  var scale$1 = dart.privateName(image_provider, "FileImage.scale");
  image_provider.FileImage = class FileImage extends image_provider.ImageProvider {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get scale() {
      return this[scale$1];
    }
    set scale(value) {
      super.scale = value;
    }
    obtainKey(configuration) {
      return new (SynchronousFutureOfFileImageL()).new(this);
    }
    load(key, decode) {
      FileImageL().as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, decode), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
          let t4;
          yield new assertions.ErrorDescription.new("Path: " + dart.str((t4 = this.file, t4 == null ? null : t4.path)));
        }).bind(this)), VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_loadAsync$](key, decode) {
      return async.async(CodecL(), (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, L1, 876, 12, "key == this");
        let bytes = (yield this.file.readAsBytes());
        if (bytes[$lengthInBytes] === 0) {
          binding.PaintingBinding.instance.imageCache.evict(key);
          dart.throw(new core.StateError.new(dart.str(this.file) + " is empty and cannot be loaded as an image."));
        }
        return yield decode(bytes);
      }).bind(this));
    }
    _equals(other) {
      let t4, t4$;
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return FileImageL().is(other) && (t4 = other.file, t4 == null ? null : t4.path) == (t4$ = this.file, t4$ == null ? null : t4$.path) && other.scale == this.scale;
    }
    get hashCode() {
      let t4;
      return ui.hashValues((t4 = this.file, t4 == null ? null : t4.path), this.scale);
    }
    toString() {
      let t4;
      return dart.str(object.objectRuntimeType(this, "FileImage")) + "(\"" + dart.str((t4 = this.file, t4 == null ? null : t4.path)) + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.FileImage.new = function(file, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[file$] = file;
    this[scale$1] = scale;
    if (!(file != null)) dart.assertFailed(null, L1, 849, 14, "file != null");
    if (!(scale != null)) dart.assertFailed(null, L1, 850, 14, "scale != null");
    image_provider.FileImage.__proto__.new.call(this);
    ;
  }).prototype = image_provider.FileImage.prototype;
  dart.addTypeTests(image_provider.FileImage);
  dart.addTypeCaches(image_provider.FileImage);
  dart.setMethodSignature(image_provider.FileImage, () => ({
    __proto__: dart.getMethods(image_provider.FileImage.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_provider.FileImage))), [dart.legacy(image_provider.ImageConfiguration)]),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_loadAsync$]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(image_provider.FileImage), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(image_provider.FileImage, () => ({
    __proto__: dart.getGetters(image_provider.FileImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.FileImage, L2);
  dart.setFieldSignature(image_provider.FileImage, () => ({
    __proto__: dart.getFields(image_provider.FileImage.__proto__),
    file: dart.finalFieldType(dart.legacy(io.File)),
    scale: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(image_provider.FileImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.FileImage, ['hashCode']);
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  var scale$2 = dart.privateName(image_provider, "MemoryImage.scale");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get scale() {
      return this[scale$2];
    }
    set scale(value) {
      super.scale = value;
    }
    obtainKey(configuration) {
      return new (SynchronousFutureOfMemoryImageL()).new(this);
    }
    load(key, decode) {
      MemoryImageL().as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, decode), scale: key.scale, debugLabel: "MemoryImage(" + dart.str(diagnostics.describeIdentity(key.bytes)) + ")"});
    }
    [_loadAsync$](key, decode) {
      if (!dart.equals(key, this)) dart.assertFailed(null, L1, 947, 12, "key == this");
      return decode(this.bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return MemoryImageL().is(other) && dart.equals(other.bytes, this.bytes) && other.scale == this.scale;
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.bytes), this.scale);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "MemoryImage")) + "(" + dart.str(diagnostics.describeIdentity(this.bytes)) + ", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.MemoryImage.new = function(bytes, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[bytes$] = bytes;
    this[scale$2] = scale;
    if (!(bytes != null)) dart.assertFailed(null, L1, 923, 14, "bytes != null");
    if (!(scale != null)) dart.assertFailed(null, L1, 924, 14, "scale != null");
    image_provider.MemoryImage.__proto__.new.call(this);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getMethods(image_provider.MemoryImage.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_provider.MemoryImage))), [dart.legacy(image_provider.ImageConfiguration)]),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_loadAsync$]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(image_provider.MemoryImage), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getGetters(image_provider.MemoryImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.MemoryImage, L2);
  dart.setFieldSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getFields(image_provider.MemoryImage.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    scale: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(image_provider.MemoryImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.MemoryImage, ['hashCode']);
  var assetName$ = dart.privateName(image_provider, "ExactAssetImage.assetName");
  var scale$3 = dart.privateName(image_provider, "ExactAssetImage.scale");
  var bundle$1 = dart.privateName(image_provider, "ExactAssetImage.bundle");
  var package$ = dart.privateName(image_provider, "ExactAssetImage.package");
  image_provider.ExactAssetImage = class ExactAssetImage extends image_provider.AssetBundleImageProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get scale() {
      return this[scale$3];
    }
    set scale(value) {
      super.scale = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[package$];
    }
    set package(value) {
      super.package = value;
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + dart.str(this.assetName);
    }
    obtainKey(configuration) {
      let t4, t4$;
      return new (SynchronousFutureOfAssetBundleImageKeyL()).new(new image_provider.AssetBundleImageKey.new({bundle: (t4$ = (t4 = this.bundle, t4 == null ? configuration.bundle : t4), t4$ == null ? asset_bundle.rootBundle : t4$), name: this.keyName, scale: this.scale}));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return ExactAssetImageL().is(other) && other.keyName == this.keyName && other.scale == this.scale && dart.equals(other.bundle, this.bundle);
    }
    get hashCode() {
      return ui.hashValues(this.keyName, this.scale, this.bundle);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "ExactAssetImage")) + "(name: \"" + dart.str(this.keyName) + "\", scale: " + dart.str(this.scale) + ", bundle: " + dart.str(this.bundle) + ")";
    }
  };
  (image_provider.ExactAssetImage.new = function(assetName, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[assetName$] = assetName;
    this[scale$3] = scale;
    this[bundle$1] = bundle;
    this[package$] = $package;
    if (!(assetName != null)) dart.assertFailed(null, L1, 1054, 15, "assetName != null");
    if (!(scale != null)) dart.assertFailed(null, L1, 1055, 15, "scale != null");
    image_provider.ExactAssetImage.__proto__.new.call(this);
    ;
  }).prototype = image_provider.ExactAssetImage.prototype;
  dart.addTypeTests(image_provider.ExactAssetImage);
  dart.addTypeCaches(image_provider.ExactAssetImage);
  dart.setMethodSignature(image_provider.ExactAssetImage, () => ({
    __proto__: dart.getMethods(image_provider.ExactAssetImage.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_provider.AssetBundleImageKey))), [dart.legacy(image_provider.ImageConfiguration)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(image_provider.ExactAssetImage, () => ({
    __proto__: dart.getGetters(image_provider.ExactAssetImage.__proto__),
    keyName: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.ExactAssetImage, L2);
  dart.setFieldSignature(image_provider.ExactAssetImage, () => ({
    __proto__: dart.getFields(image_provider.ExactAssetImage.__proto__),
    assetName: dart.finalFieldType(dart.legacy(core.String)),
    scale: dart.finalFieldType(dart.legacy(core.double)),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    package: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(image_provider.ExactAssetImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ExactAssetImage, ['hashCode']);
  image_provider._ErrorImageCompleter = class _ErrorImageCompleter extends image_stream.ImageStreamCompleter {
    setError(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let stack = opts && 'stack' in opts ? opts.stack : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      let silent = opts && 'silent' in opts ? opts.silent : false;
      this.reportError({context: context, exception: exception, stack: stack, informationCollector: informationCollector, silent: silent});
    }
  };
  (image_provider._ErrorImageCompleter.new = function() {
    image_provider._ErrorImageCompleter.__proto__.new.call(this);
    ;
  }).prototype = image_provider._ErrorImageCompleter.prototype;
  dart.addTypeTests(image_provider._ErrorImageCompleter);
  dart.addTypeCaches(image_provider._ErrorImageCompleter);
  dart.setMethodSignature(image_provider._ErrorImageCompleter, () => ({
    __proto__: dart.getMethods(image_provider._ErrorImageCompleter.__proto__),
    setError: dart.fnType(dart.void, [], {context: dart.legacy(diagnostics.DiagnosticsNode), exception: dart.dynamic, informationCollector: dart.legacy(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), [])), silent: dart.legacy(core.bool), stack: dart.legacy(core.StackTrace)}, {})
  }));
  dart.setLibraryUri(image_provider._ErrorImageCompleter, L2);
  var _message = dart.privateName(image_provider, "_message");
  var statusCode$ = dart.privateName(image_provider, "NetworkImageLoadException.statusCode");
  var uri$ = dart.privateName(image_provider, "NetworkImageLoadException.uri");
  image_provider.NetworkImageLoadException = class NetworkImageLoadException extends core.Object {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    toString() {
      return this[_message];
    }
  };
  (image_provider.NetworkImageLoadException.new = function(opts) {
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    this[uri$] = uri;
    if (!(uri != null)) dart.assertFailed(null, L1, 1133, 16, "uri != null");
    if (!(statusCode != null)) dart.assertFailed(null, L1, 1134, 16, "statusCode != null");
    this[_message] = "HTTP request failed, statusCode: " + dart.str(statusCode) + ", " + dart.str(uri);
    ;
  }).prototype = image_provider.NetworkImageLoadException.prototype;
  dart.addTypeTests(image_provider.NetworkImageLoadException);
  dart.addTypeCaches(image_provider.NetworkImageLoadException);
  image_provider.NetworkImageLoadException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(image_provider.NetworkImageLoadException, () => ({
    __proto__: dart.getMethods(image_provider.NetworkImageLoadException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(image_provider.NetworkImageLoadException, L2);
  dart.setFieldSignature(image_provider.NetworkImageLoadException, () => ({
    __proto__: dart.getFields(image_provider.NetworkImageLoadException.__proto__),
    statusCode: dart.finalFieldType(dart.legacy(core.int)),
    [_message]: dart.finalFieldType(dart.legacy(core.String)),
    uri: dart.finalFieldType(dart.legacy(core.Uri))
  }));
  dart.defineExtensionMethods(image_provider.NetworkImageLoadException, ['toString']);
  dart.setBaseClass(image_provider.NetworkImage, image_provider.ImageProvider$(image_provider.NetworkImage));
  dart.setBaseClass(image_provider.FileImage, image_provider.ImageProvider$(image_provider.FileImage));
  dart.setBaseClass(image_provider.MemoryImage, image_provider.ImageProvider$(image_provider.MemoryImage));
  dart.trackLibraries("packages/flutter/src/painting/_network_image_web.dart", {
    "package:flutter/src/painting/_network_image_web.dart": _network_image_web,
    "package:flutter/src/painting/image_provider.dart": image_provider
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_provider.dart","_network_image_web.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/painting/_network_image_web.dart.lib.js"}');
  // Exports:
  return {
    src__painting___network_image_web: _network_image_web,
    src__painting__image_provider: image_provider
  };
}));

//# sourceMappingURL=_network_image_web.dart.lib.js.map
