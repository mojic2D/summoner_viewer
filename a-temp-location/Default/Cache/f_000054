define(['dart_sdk', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/foundation/print.dart'], (function load__packages__flutter__src__gestures__force_press_dart(dart_sdk, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__foundation__print$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  var force_press = Object.create(dart.library);
  var $toString = dartx.toString;
  var $isNaN = dartx.isNaN;
  var $clamp = dartx.clamp;
  var _ForceStateL = () => (_ForceStateL = dart.constFn(dart.legacy(force_press._ForceState)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var doubleLAnddoubleLAnddoubleLTodoubleL = () => (doubleLAnddoubleLAnddoubleLTodoubleL = dart.constFn(dart.fnType(doubleL(), [doubleL(), doubleL(), doubleL()])))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerMoveEventL = () => (PointerMoveEventL = dart.constFn(dart.legacy(events.PointerMoveEvent)))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  const CT = Object.create(null);
  var L0 = "package:flutter/src/gestures/force_press.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/gestures/force_press.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$]: "_ForceState.ready",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$]: "_ForceState.possible",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$]: "_ForceState.accepted",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$]: "_ForceState.started",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$]: "_ForceState.peaked",
        index: 4
      });
    },
    get C5() {
      return C5 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4], _ForceStateL());
    },
    get C6() {
      return C6 = dart.fn(force_press.ForcePressGestureRecognizer._inverseLerp, doubleLAnddoubleLAnddoubleLTodoubleL());
    }
  }, false);
  var _name$ = dart.privateName(force_press, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  force_press._ForceState = class _ForceState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (force_press._ForceState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = force_press._ForceState.prototype;
  dart.addTypeTests(force_press._ForceState);
  dart.addTypeCaches(force_press._ForceState);
  dart.setMethodSignature(force_press._ForceState, () => ({
    __proto__: dart.getMethods(force_press._ForceState.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(force_press._ForceState, L0);
  dart.setFieldSignature(force_press._ForceState, () => ({
    __proto__: dart.getFields(force_press._ForceState.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(force_press._ForceState, ['toString']);
  force_press._ForceState.ready = C0 || CT.C0;
  force_press._ForceState.possible = C1 || CT.C1;
  force_press._ForceState.accepted = C2 || CT.C2;
  force_press._ForceState.started = C3 || CT.C3;
  force_press._ForceState.peaked = C4 || CT.C4;
  force_press._ForceState.values = C5 || CT.C5;
  var globalPosition$ = dart.privateName(force_press, "ForcePressDetails.globalPosition");
  var localPosition$ = dart.privateName(force_press, "ForcePressDetails.localPosition");
  var pressure$ = dart.privateName(force_press, "ForcePressDetails.pressure");
  force_press.ForcePressDetails = class ForcePressDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
  };
  (force_press.ForcePressDetails.new = function(opts) {
    let t0;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let pressure = opts && 'pressure' in opts ? opts.pressure : null;
    this[globalPosition$] = globalPosition;
    this[pressure$] = pressure;
    if (!(globalPosition != null)) dart.assertFailed(null, L1, 57, 15, "globalPosition != null");
    if (!(pressure != null)) dart.assertFailed(null, L1, 58, 15, "pressure != null");
    this[localPosition$] = (t0 = localPosition, t0 == null ? globalPosition : t0);
    ;
  }).prototype = force_press.ForcePressDetails.prototype;
  dart.addTypeTests(force_press.ForcePressDetails);
  dart.addTypeCaches(force_press.ForcePressDetails);
  dart.setLibraryUri(force_press.ForcePressDetails, L0);
  dart.setFieldSignature(force_press.ForcePressDetails, () => ({
    __proto__: dart.getFields(force_press.ForcePressDetails.__proto__),
    globalPosition: dart.finalFieldType(dart.legacy(ui.Offset)),
    localPosition: dart.finalFieldType(dart.legacy(ui.Offset)),
    pressure: dart.finalFieldType(dart.legacy(core.double))
  }));
  var C6;
  var _lastPosition = dart.privateName(force_press, "_lastPosition");
  var _lastPressure = dart.privateName(force_press, "_lastPressure");
  var _state = dart.privateName(force_press, "_state");
  var onStart = dart.privateName(force_press, "ForcePressGestureRecognizer.onStart");
  var onUpdate = dart.privateName(force_press, "ForcePressGestureRecognizer.onUpdate");
  var onPeak = dart.privateName(force_press, "ForcePressGestureRecognizer.onPeak");
  var onEnd = dart.privateName(force_press, "ForcePressGestureRecognizer.onEnd");
  var startPressure$ = dart.privateName(force_press, "ForcePressGestureRecognizer.startPressure");
  var peakPressure$ = dart.privateName(force_press, "ForcePressGestureRecognizer.peakPressure");
  var interpolation$ = dart.privateName(force_press, "ForcePressGestureRecognizer.interpolation");
  force_press.ForcePressGestureRecognizer = class ForcePressGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    get onUpdate() {
      return this[onUpdate];
    }
    set onUpdate(value) {
      this[onUpdate] = value;
    }
    get onPeak() {
      return this[onPeak];
    }
    set onPeak(value) {
      this[onPeak] = value;
    }
    get onEnd() {
      return this[onEnd];
    }
    set onEnd(value) {
      this[onEnd] = value;
    }
    get startPressure() {
      return this[startPressure$];
    }
    set startPressure(value) {
      super.startPressure = value;
    }
    get peakPressure() {
      return this[peakPressure$];
    }
    set peakPressure(value) {
      super.peakPressure = value;
    }
    get interpolation() {
      return this[interpolation$];
    }
    set interpolation(value) {
      super.interpolation = value;
    }
    addAllowedPointer(event) {
      if (!PointerUpEventL().is(event) && dart.notNull(event.pressureMax) <= 1.0) {
        this.resolve(arena.GestureDisposition.rejected);
      } else {
        this.startTrackingPointer(event.pointer, event.transform);
        if (this[_state] == force_press._ForceState.ready) {
          this[_state] = force_press._ForceState.possible;
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        }
      }
    }
    handleEvent(event) {
      let t2, t1, t0;
      if (!(this[_state] != force_press._ForceState.ready)) dart.assertFailed(null, L1, 234, 12, "_state != _ForceState.ready");
      if (PointerMoveEventL().is(event) || PointerDownEventL().is(event)) {
        if (dart.notNull(event.pressure) > dart.notNull(event.pressureMax) || dart.notNull(event.pressure) < dart.notNull(event.pressureMin)) {
          print.debugPrint("The reported device pressure " + dart.toString(event.pressure) + " is outside of the device pressure range where: " + dart.toString(event.pressureMin) + " <= pressure <= " + dart.toString(event.pressureMax));
        }
        let pressure = (t0 = event.pressureMin, t1 = event.pressureMax, t2 = event.pressure, this.interpolation(t0, t1, t2));
        if (!(dart.notNull(pressure) >= 0.0 && dart.notNull(pressure) <= 1.0 || pressure[$isNaN])) dart.assertFailed(null, L1, 247, 9, "(pressure >= 0.0 && pressure <= 1.0) || // Interpolated pressure must be between 1.0 and 0.0...\r\n        pressure.isNaN");
        this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_lastPressure] = pressure;
        if (this[_state] == force_press._ForceState.possible) {
          if (dart.notNull(pressure) > dart.notNull(this.startPressure)) {
            this[_state] = force_press._ForceState.started;
            this.resolve(arena.GestureDisposition.accepted);
          } else if (dart.notNull(event.delta.distanceSquared) > 18) {
            this.resolve(arena.GestureDisposition.rejected);
          }
        }
        if (dart.notNull(pressure) > dart.notNull(this.startPressure) && this[_state] == force_press._ForceState.accepted) {
          this[_state] = force_press._ForceState.started;
          if (this.onStart != null) {
            this.invokeCallback(dart.void, "onStart", dart.fn(() => {
              let t0;
              t0 = new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local});
              return this.onStart(t0);
            }, VoidTovoid()));
          }
        }
        if (this.onPeak != null && dart.notNull(pressure) > dart.notNull(this.peakPressure) && this[_state] == force_press._ForceState.started) {
          this[_state] = force_press._ForceState.peaked;
          if (this.onPeak != null) {
            this.invokeCallback(dart.void, "onPeak", dart.fn(() => {
              let t0;
              t0 = new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition});
              return this.onPeak(t0);
            }, VoidTovoid()));
          }
        }
        if (this.onUpdate != null && !pressure[$isNaN] && (this[_state] == force_press._ForceState.started || this[_state] == force_press._ForceState.peaked)) {
          if (this.onUpdate != null) {
            this.invokeCallback(dart.void, "onUpdate", dart.fn(() => {
              let t0;
              t0 = new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition});
              return this.onUpdate(t0);
            }, VoidTovoid()));
          }
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (this[_state] == force_press._ForceState.possible) this[_state] = force_press._ForceState.accepted;
      if (this.onStart != null && this[_state] == force_press._ForceState.started) {
        this.invokeCallback(dart.void, "onStart", dart.fn(() => {
          let t0;
          t0 = new force_press.ForcePressDetails.new({pressure: this[_lastPressure], globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local});
          return this.onStart(t0);
        }, VoidTovoid()));
      }
    }
    didStopTrackingLastPointer(pointer) {
      let wasAccepted = this[_state] == force_press._ForceState.started || this[_state] == force_press._ForceState.peaked;
      if (this[_state] == force_press._ForceState.possible) {
        this.resolve(arena.GestureDisposition.rejected);
        return;
      }
      if (wasAccepted && this.onEnd != null) {
        if (this.onEnd != null) {
          this.invokeCallback(dart.void, "onEnd", dart.fn(() => {
            let t0;
            t0 = new force_press.ForcePressDetails.new({pressure: 0.0, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local});
            return this.onEnd(t0);
          }, VoidTovoid()));
        }
      }
      this[_state] = force_press._ForceState.ready;
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
      this.didStopTrackingLastPointer(pointer);
    }
    static _inverseLerp(min, max, t) {
      if (!(dart.notNull(min) <= dart.notNull(max))) dart.assertFailed(null, L1, 339, 12, "min <= max");
      let value = (dart.notNull(t) - dart.notNull(min)) / (dart.notNull(max) - dart.notNull(min));
      if (!value[$isNaN]) value = value[$clamp](0.0, 1.0);
      return value;
    }
    get debugDescription() {
      return "force press";
    }
  };
  (force_press.ForcePressGestureRecognizer.new = function(opts) {
    let startPressure = opts && 'startPressure' in opts ? opts.startPressure : 0.4;
    let peakPressure = opts && 'peakPressure' in opts ? opts.peakPressure : 0.85;
    let interpolation = opts && 'interpolation' in opts ? opts.interpolation : C6 || CT.C6;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onStart] = null;
    this[onUpdate] = null;
    this[onPeak] = null;
    this[onEnd] = null;
    this[_lastPosition] = null;
    this[_lastPressure] = null;
    this[_state] = force_press._ForceState.ready;
    this[startPressure$] = startPressure;
    this[peakPressure$] = peakPressure;
    this[interpolation$] = interpolation;
    if (!(startPressure != null)) dart.assertFailed(null, L1, 133, 15, "startPressure != null");
    if (!(peakPressure != null)) dart.assertFailed(null, L1, 134, 15, "peakPressure != null");
    if (!(interpolation != null)) dart.assertFailed(null, L1, 135, 15, "interpolation != null");
    if (!(dart.notNull(peakPressure) > dart.notNull(startPressure))) dart.assertFailed(null, L1, 136, 15, "peakPressure > startPressure");
    force_press.ForcePressGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = force_press.ForcePressGestureRecognizer.prototype;
  dart.addTypeTests(force_press.ForcePressGestureRecognizer);
  dart.addTypeCaches(force_press.ForcePressGestureRecognizer);
  dart.setMethodSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getMethods(force_press.ForcePressGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    handleEvent: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getGetters(force_press.ForcePressGestureRecognizer.__proto__),
    debugDescription: dart.legacy(core.String)
  }));
  dart.setLibraryUri(force_press.ForcePressGestureRecognizer, L0);
  dart.setFieldSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getFields(force_press.ForcePressGestureRecognizer.__proto__),
    onStart: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(force_press.ForcePressDetails)]))),
    onUpdate: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(force_press.ForcePressDetails)]))),
    onPeak: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(force_press.ForcePressDetails)]))),
    onEnd: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(force_press.ForcePressDetails)]))),
    startPressure: dart.finalFieldType(dart.legacy(core.double)),
    peakPressure: dart.finalFieldType(dart.legacy(core.double)),
    interpolation: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]))),
    [_lastPosition]: dart.fieldType(dart.legacy(recognizer.OffsetPair)),
    [_lastPressure]: dart.fieldType(dart.legacy(core.double)),
    [_state]: dart.fieldType(dart.legacy(force_press._ForceState))
  }));
  dart.trackLibraries("packages/flutter/src/gestures/force_press.dart", {
    "package:flutter/src/gestures/force_press.dart": force_press
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["force_press.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/gestures/force_press.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__force_press: force_press
  };
}));

//# sourceMappingURL=force_press.dart.lib.js.map
