define(['dart_sdk', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/team.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__gestures__recognizer_dart(dart_sdk, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__team$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const team = packages__flutter__src__gestures__team$46dart.src__gestures__team;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var recognizer = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $times = dartx['*'];
  var $isNotEmpty = dartx.isNotEmpty;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $containsValue = dartx.containsValue;
  var DragStartBehaviorL = () => (DragStartBehaviorL = dart.constFn(dart.legacy(recognizer.DragStartBehavior)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var PointerDeviceKindL = () => (PointerDeviceKindL = dart.constFn(dart.legacy(ui.PointerDeviceKind)))();
  var IdentityMapOfintL$PointerDeviceKindL = () => (IdentityMapOfintL$PointerDeviceKindL = dart.constFn(_js_helper.IdentityMap$(intL(), PointerDeviceKindL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var GestureRecognizerL = () => (GestureRecognizerL = dart.constFn(dart.legacy(recognizer.GestureRecognizer)))();
  var DiagnosticsPropertyOfGestureRecognizerL = () => (DiagnosticsPropertyOfGestureRecognizerL = dart.constFn(diagnostics.DiagnosticsProperty$(GestureRecognizerL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var SyncIterableOfDiagnosticsNodeL = () => (SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(DiagnosticsNodeL())))();
  var IterableOfDiagnosticsNodeL = () => (IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(DiagnosticsNodeL())))();
  var IterableLOfDiagnosticsNodeL = () => (IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(IterableOfDiagnosticsNodeL())))();
  var VoidToIterableLOfDiagnosticsNodeL = () => (VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(IterableLOfDiagnosticsNodeL(), [])))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var DiagnosticsPropertyOfObjectL = () => (DiagnosticsPropertyOfObjectL = dart.constFn(diagnostics.DiagnosticsProperty$(ObjectL())))();
  var GestureArenaEntryL = () => (GestureArenaEntryL = dart.constFn(dart.legacy(arena.GestureArenaEntry)))();
  var IdentityMapOfintL$GestureArenaEntryL = () => (IdentityMapOfintL$GestureArenaEntryL = dart.constFn(_js_helper.IdentityMap$(intL(), GestureArenaEntryL())))();
  var _IdentityHashSetOfintL = () => (_IdentityHashSetOfintL = dart.constFn(collection._IdentityHashSet$(intL())))();
  var ListOfGestureArenaEntryL = () => (ListOfGestureArenaEntryL = dart.constFn(core.List$(GestureArenaEntryL())))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerCancelEventL = () => (PointerCancelEventL = dart.constFn(dart.legacy(events.PointerCancelEvent)))();
  var GestureRecognizerStateL = () => (GestureRecognizerStateL = dart.constFn(dart.legacy(recognizer.GestureRecognizerState)))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  var PointerMoveEventL = () => (PointerMoveEventL = dart.constFn(dart.legacy(events.PointerMoveEvent)))();
  var EnumPropertyOfGestureRecognizerStateL = () => (EnumPropertyOfGestureRecognizerStateL = dart.constFn(diagnostics.EnumProperty$(GestureRecognizerStateL())))();
  const CT = Object.create(null);
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/gestures/recognizer.dart";
  var L0 = "package:flutter/src/gestures/recognizer.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$]: "DragStartBehavior.down",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.constList([C0 || CT.C0, C1 || CT.C1], DragStartBehaviorL());
    },
    get C3() {
      return C3 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$]: "GestureRecognizerState.ready",
        index: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$]: "GestureRecognizerState.possible",
        index: 1
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$]: "GestureRecognizerState.defunct",
        index: 2
      });
    },
    get C6() {
      return C6 = dart.constList([C3 || CT.C3, C4 || CT.C4, C5 || CT.C5], GestureRecognizerStateL());
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: recognizer.OffsetPair.prototype,
        [global$]: C8 || CT.C8,
        [local$]: C8 || CT.C8
      });
    }
  }, false);
  var _name$ = dart.privateName(recognizer, "_name");
  var C0;
  var C1;
  var C2;
  recognizer.DragStartBehavior = class DragStartBehavior extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (recognizer.DragStartBehavior.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = recognizer.DragStartBehavior.prototype;
  dart.addTypeTests(recognizer.DragStartBehavior);
  dart.addTypeCaches(recognizer.DragStartBehavior);
  dart.setMethodSignature(recognizer.DragStartBehavior, () => ({
    __proto__: dart.getMethods(recognizer.DragStartBehavior.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(recognizer.DragStartBehavior, L0);
  dart.setFieldSignature(recognizer.DragStartBehavior, () => ({
    __proto__: dart.getFields(recognizer.DragStartBehavior.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(recognizer.DragStartBehavior, ['toString']);
  recognizer.DragStartBehavior.down = C0 || CT.C0;
  recognizer.DragStartBehavior.start = C1 || CT.C1;
  recognizer.DragStartBehavior.values = C2 || CT.C2;
  var _pointerToKind = dart.privateName(recognizer, "_pointerToKind");
  var _kindFilter = dart.privateName(recognizer, "_kindFilter");
  var debugOwner$ = dart.privateName(recognizer, "GestureRecognizer.debugOwner");
  const GestureArenaMember_DiagnosticableTreeMixin$36 = class GestureArenaMember_DiagnosticableTreeMixin extends arena.GestureArenaMember {};
  (GestureArenaMember_DiagnosticableTreeMixin$36.new = function() {
  }).prototype = GestureArenaMember_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(GestureArenaMember_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  recognizer.GestureRecognizer = class GestureRecognizer extends GestureArenaMember_DiagnosticableTreeMixin$36 {
    get debugOwner() {
      return this[debugOwner$];
    }
    set debugOwner(value) {
      super.debugOwner = value;
    }
    addPointer(event) {
      this[_pointerToKind][$_set](event.pointer, event.kind);
      if (dart.test(this.isPointerAllowed(event))) {
        this.addAllowedPointer(event);
      } else {
        this.handleNonAllowedPointer(event);
      }
    }
    addAllowedPointer(event) {
    }
    handleNonAllowedPointer(event) {
    }
    isPointerAllowed(event) {
      return this[_kindFilter] == null || dart.equals(this[_kindFilter], event.kind);
    }
    getKindForPointer(pointer) {
      if (!dart.test(this[_pointerToKind][$containsKey](pointer))) dart.assertFailed(null, L1, 143, 12, "_pointerToKind.containsKey(pointer)");
      return this[_pointerToKind][$_get](pointer);
    }
    dispose() {
    }
    invokeCallback(T, name, callback, opts) {
      let debugReport = opts && 'debugReport' in opts ? opts.debugReport : null;
      if (!(callback != null)) dart.assertFailed(null, L1, 171, 12, "callback != null");
      let result = null;
      try {
        if (!dart.test(dart.fn(() => {
          let t0;
          if (dart.test(debug.debugPrintRecognizerCallbacksTrace)) {
            let report = debugReport != null ? debugReport() : null;
            let prefix = dart.test(debug.debugPrintGestureArenaDiagnostics) ? " "[$times](19) + "❙ " : "";
            print.debugPrint(prefix + dart.str(this) + " calling " + dart.str(name) + " callback." + (dart.equals((t0 = report, t0 == null ? null : t0[$isNotEmpty]), true) ? " " + dart.str(report) : ""));
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 174, 14, "() {\r\n        if (debugPrintRecognizerCallbacksTrace) {\r\n          final String report = debugReport != null ? debugReport() : null;\r\n          // The 19 in the line below is the width of the prefix used by\r\n          // _debugLogDiagnostic in arena.dart.\r\n          final String prefix = debugPrintGestureArenaDiagnostics ? ' ' * 19 + '❙ ' : '';\r\n          debugPrint('$prefix$this calling $name callback.${ report?.isNotEmpty == true ? \" $report\" : \"\" }');\r\n        }\r\n        return true;\r\n      }()");
        result = callback();
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        let collector = null;
        if (!dart.test(dart.fn(() => {
          collector = dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
            yield new diagnostics.StringProperty.new("Handler", name);
            yield new (DiagnosticsPropertyOfGestureRecognizerL()).new("Recognizer", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
          }).bind(this)), VoidToIterableLOfDiagnosticsNodeL());
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 187, 14, "() {\r\n        collector = () sync* {\r\n          yield StringProperty('Handler', name);\r\n          yield DiagnosticsProperty<GestureRecognizer>('Recognizer', this, style: DiagnosticsTreeStyle.errorProperty);\r\n        };\r\n        return true;\r\n      }()");
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture", context: new assertions.ErrorDescription.new("while handling a gesture"), informationCollector: collector}));
      }
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfObjectL()).new("debugOwner", this.debugOwner, {defaultValue: null}));
    }
  };
  (recognizer.GestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_pointerToKind] = new (IdentityMapOfintL$PointerDeviceKindL()).new();
    this[debugOwner$] = debugOwner;
    this[_kindFilter] = kind;
    ;
  }).prototype = recognizer.GestureRecognizer.prototype;
  dart.addTypeTests(recognizer.GestureRecognizer);
  dart.addTypeCaches(recognizer.GestureRecognizer);
  dart.setMethodSignature(recognizer.GestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.GestureRecognizer.__proto__),
    addPointer: dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]),
    addAllowedPointer: dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]),
    handleNonAllowedPointer: dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]),
    isPointerAllowed: dart.fnType(dart.legacy(core.bool), [dart.legacy(events.PointerDownEvent)]),
    getKindForPointer: dart.fnType(dart.legacy(ui.PointerDeviceKind), [dart.legacy(core.int)]),
    dispose: dart.fnType(dart.void, []),
    invokeCallback: dart.gFnType(T => [dart.legacy(T), [dart.legacy(core.String), dart.legacy(dart.fnType(dart.legacy(T), []))], {debugReport: dart.legacy(dart.fnType(dart.legacy(core.String), []))}, {}]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(recognizer.GestureRecognizer, L0);
  dart.setFieldSignature(recognizer.GestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.GestureRecognizer.__proto__),
    debugOwner: dart.finalFieldType(dart.legacy(core.Object)),
    [_kindFilter]: dart.finalFieldType(dart.legacy(ui.PointerDeviceKind)),
    [_pointerToKind]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(ui.PointerDeviceKind))))
  }));
  var _entries = dart.privateName(recognizer, "_entries");
  var _trackedPointers = dart.privateName(recognizer, "_trackedPointers");
  var _team = dart.privateName(recognizer, "_team");
  var _addPointerToArena = dart.privateName(recognizer, "_addPointerToArena");
  recognizer.OneSequenceGestureRecognizer = class OneSequenceGestureRecognizer extends recognizer.GestureRecognizer {
    handleNonAllowedPointer(event) {
      this.resolve(arena.GestureDisposition.rejected);
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
    }
    resolve(disposition) {
      let localEntries = ListOfGestureArenaEntryL().from(this[_entries][$values]);
      this[_entries][$clear]();
      for (let entry of localEntries)
        entry.resolve(disposition);
    }
    resolvePointer(pointer, disposition) {
      let entry = this[_entries][$_get](pointer);
      if (entry != null) {
        entry.resolve(disposition);
        this[_entries][$remove](pointer);
      }
    }
    dispose() {
      this.resolve(arena.GestureDisposition.rejected);
      for (let pointer of this[_trackedPointers])
        binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
      this[_trackedPointers].clear();
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, L1, 283, 12, "_entries.isEmpty");
      super.dispose();
    }
    get team() {
      return this[_team];
    }
    set team(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 301, 12, "value != null");
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, L1, 302, 12, "_entries.isEmpty");
      if (!dart.test(this[_trackedPointers][$isEmpty])) dart.assertFailed(null, L1, 303, 12, "_trackedPointers.isEmpty");
      if (!(this[_team] == null)) dart.assertFailed(null, L1, 304, 12, "_team == null");
      this[_team] = value;
    }
    [_addPointerToArena](pointer) {
      if (this[_team] != null) return this[_team].add(pointer, this);
      return binding.GestureBinding.instance.gestureArena.add(pointer, this);
    }
    startTrackingPointer(pointer, transform = null) {
      binding.GestureBinding.instance.pointerRouter.addRoute(pointer, dart.bind(this, 'handleEvent'), transform);
      this[_trackedPointers].add(pointer);
      if (!!dart.test(this[_entries][$containsValue](pointer))) dart.assertFailed(null, L1, 327, 12, "!_entries.containsValue(pointer)");
      this[_entries][$_set](pointer, this[_addPointerToArena](pointer));
    }
    stopTrackingPointer(pointer) {
      if (dart.test(this[_trackedPointers].contains(pointer))) {
        binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
        this[_trackedPointers].remove(pointer);
        if (dart.test(this[_trackedPointers][$isEmpty])) this.didStopTrackingLastPointer(pointer);
      }
    }
    stopTrackingIfPointerNoLongerDown(event) {
      if (PointerUpEventL().is(event) || PointerCancelEventL().is(event)) this.stopTrackingPointer(event.pointer);
    }
  };
  (recognizer.OneSequenceGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_entries] = new (IdentityMapOfintL$GestureArenaEntryL()).new();
    this[_trackedPointers] = new (_IdentityHashSetOfintL()).new();
    this[_team] = null;
    recognizer.OneSequenceGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = recognizer.OneSequenceGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.OneSequenceGestureRecognizer);
  dart.addTypeCaches(recognizer.OneSequenceGestureRecognizer);
  dart.setMethodSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.OneSequenceGestureRecognizer.__proto__),
    acceptGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    rejectGesture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    resolve: dart.fnType(dart.void, [dart.legacy(arena.GestureDisposition)]),
    resolvePointer: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(arena.GestureDisposition)]),
    [_addPointerToArena]: dart.fnType(dart.legacy(arena.GestureArenaEntry), [dart.legacy(core.int)]),
    startTrackingPointer: dart.fnType(dart.void, [dart.legacy(core.int)], [dart.legacy(vector_math_64.Matrix4)]),
    stopTrackingPointer: dart.fnType(dart.void, [dart.legacy(core.int)]),
    stopTrackingIfPointerNoLongerDown: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)])
  }));
  dart.setGetterSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getGetters(recognizer.OneSequenceGestureRecognizer.__proto__),
    team: dart.legacy(team.GestureArenaTeam)
  }));
  dart.setSetterSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getSetters(recognizer.OneSequenceGestureRecognizer.__proto__),
    team: dart.legacy(team.GestureArenaTeam)
  }));
  dart.setLibraryUri(recognizer.OneSequenceGestureRecognizer, L0);
  dart.setFieldSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.OneSequenceGestureRecognizer.__proto__),
    [_entries]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(arena.GestureArenaEntry)))),
    [_trackedPointers]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.int)))),
    [_team]: dart.fieldType(dart.legacy(team.GestureArenaTeam))
  }));
  var C3;
  var C4;
  var C5;
  var C6;
  recognizer.GestureRecognizerState = class GestureRecognizerState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (recognizer.GestureRecognizerState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = recognizer.GestureRecognizerState.prototype;
  dart.addTypeTests(recognizer.GestureRecognizerState);
  dart.addTypeCaches(recognizer.GestureRecognizerState);
  dart.setMethodSignature(recognizer.GestureRecognizerState, () => ({
    __proto__: dart.getMethods(recognizer.GestureRecognizerState.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(recognizer.GestureRecognizerState, L0);
  dart.setFieldSignature(recognizer.GestureRecognizerState, () => ({
    __proto__: dart.getFields(recognizer.GestureRecognizerState.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(recognizer.GestureRecognizerState, ['toString']);
  recognizer.GestureRecognizerState.ready = C3 || CT.C3;
  recognizer.GestureRecognizerState.possible = C4 || CT.C4;
  recognizer.GestureRecognizerState.defunct = C5 || CT.C5;
  recognizer.GestureRecognizerState.values = C6 || CT.C6;
  var _gestureAccepted = dart.privateName(recognizer, "_gestureAccepted");
  var _timer = dart.privateName(recognizer, "_timer");
  var _getGlobalDistance = dart.privateName(recognizer, "_getGlobalDistance");
  var _stopTimer = dart.privateName(recognizer, "_stopTimer");
  var deadline$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.deadline");
  var preAcceptSlopTolerance$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.preAcceptSlopTolerance");
  var postAcceptSlopTolerance$ = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.postAcceptSlopTolerance");
  var state = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.state");
  var primaryPointer = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.primaryPointer");
  var initialPosition = dart.privateName(recognizer, "PrimaryPointerGestureRecognizer.initialPosition");
  recognizer.PrimaryPointerGestureRecognizer = class PrimaryPointerGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get deadline() {
      return this[deadline$];
    }
    set deadline(value) {
      super.deadline = value;
    }
    get preAcceptSlopTolerance() {
      return this[preAcceptSlopTolerance$];
    }
    set preAcceptSlopTolerance(value) {
      super.preAcceptSlopTolerance = value;
    }
    get postAcceptSlopTolerance() {
      return this[postAcceptSlopTolerance$];
    }
    set postAcceptSlopTolerance(value) {
      super.postAcceptSlopTolerance = value;
    }
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get primaryPointer() {
      return this[primaryPointer];
    }
    set primaryPointer(value) {
      this[primaryPointer] = value;
    }
    get initialPosition() {
      return this[initialPosition];
    }
    set initialPosition(value) {
      this[initialPosition] = value;
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      if (this.state == recognizer.GestureRecognizerState.ready) {
        this.state = recognizer.GestureRecognizerState.possible;
        this.primaryPointer = event.pointer;
        this.initialPosition = new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
        if (this.deadline != null) this[_timer] = async.Timer.new(this.deadline, dart.fn(() => this.didExceedDeadlineWithEvent(event), VoidTovoid()));
      }
    }
    handleEvent(event) {
      if (!(this.state != recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, L1, 462, 12, "state != GestureRecognizerState.ready");
      if (this.state == recognizer.GestureRecognizerState.possible && event.pointer == this.primaryPointer) {
        let isPreAcceptSlopPastTolerance = !dart.test(this[_gestureAccepted]) && this.preAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.preAcceptSlopTolerance);
        let isPostAcceptSlopPastTolerance = dart.test(this[_gestureAccepted]) && this.postAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.postAcceptSlopTolerance);
        if (PointerMoveEventL().is(event) && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {
          this.resolve(arena.GestureDisposition.rejected);
          this.stopTrackingPointer(this.primaryPointer);
        } else {
          this.handlePrimaryPointer(event);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    didExceedDeadline() {
      if (!(this.deadline == null)) dart.assertFailed(null, L1, 493, 12, "deadline == null");
    }
    didExceedDeadlineWithEvent(event) {
      this.didExceedDeadline();
    }
    acceptGesture(pointer) {
      if (pointer == this.primaryPointer) {
        this[_stopTimer]();
        this[_gestureAccepted] = true;
      }
    }
    rejectGesture(pointer) {
      if (pointer == this.primaryPointer && this.state == recognizer.GestureRecognizerState.possible) {
        this[_stopTimer]();
        this.state = recognizer.GestureRecognizerState.defunct;
      }
    }
    didStopTrackingLastPointer(pointer) {
      if (!(this.state != recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, L1, 524, 12, "state != GestureRecognizerState.ready");
      this[_stopTimer]();
      this.state = recognizer.GestureRecognizerState.ready;
    }
    dispose() {
      this[_stopTimer]();
      super.dispose();
    }
    [_stopTimer]() {
      if (this[_timer] != null) {
        this[_timer].cancel();
        this[_timer] = null;
      }
    }
    [_getGlobalDistance](event) {
      let offset = event.position['-'](this.initialPosition.global);
      return offset.distance;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfGestureRecognizerStateL()).new("state", this.state));
    }
  };
  (recognizer.PrimaryPointerGestureRecognizer.new = function(opts) {
    let deadline = opts && 'deadline' in opts ? opts.deadline : null;
    let preAcceptSlopTolerance = opts && 'preAcceptSlopTolerance' in opts ? opts.preAcceptSlopTolerance : 18;
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : 18;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[state] = recognizer.GestureRecognizerState.ready;
    this[primaryPointer] = null;
    this[initialPosition] = null;
    this[_gestureAccepted] = false;
    this[_timer] = null;
    this[deadline$] = deadline;
    this[preAcceptSlopTolerance$] = preAcceptSlopTolerance;
    this[postAcceptSlopTolerance$] = postAcceptSlopTolerance;
    if (!(preAcceptSlopTolerance == null || dart.notNull(preAcceptSlopTolerance) >= 0)) dart.assertFailed("The preAcceptSlopTolerance must be positive or null", L1, 397, 10, "preAcceptSlopTolerance == null || preAcceptSlopTolerance >= 0");
    if (!(postAcceptSlopTolerance == null || dart.notNull(postAcceptSlopTolerance) >= 0)) dart.assertFailed("The postAcceptSlopTolerance must be positive or null", L1, 401, 10, "postAcceptSlopTolerance == null || postAcceptSlopTolerance >= 0");
    recognizer.PrimaryPointerGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = recognizer.PrimaryPointerGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.PrimaryPointerGestureRecognizer);
  dart.addTypeCaches(recognizer.PrimaryPointerGestureRecognizer);
  dart.setMethodSignature(recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.PrimaryPointerGestureRecognizer.__proto__),
    handleEvent: dart.fnType(dart.void, [dart.legacy(events.PointerEvent)]),
    didExceedDeadline: dart.fnType(dart.void, []),
    didExceedDeadlineWithEvent: dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_stopTimer]: dart.fnType(dart.void, []),
    [_getGlobalDistance]: dart.fnType(dart.legacy(core.double), [dart.legacy(events.PointerEvent)])
  }));
  dart.setLibraryUri(recognizer.PrimaryPointerGestureRecognizer, L0);
  dart.setFieldSignature(recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.PrimaryPointerGestureRecognizer.__proto__),
    deadline: dart.finalFieldType(dart.legacy(core.Duration)),
    preAcceptSlopTolerance: dart.finalFieldType(dart.legacy(core.double)),
    postAcceptSlopTolerance: dart.finalFieldType(dart.legacy(core.double)),
    state: dart.fieldType(dart.legacy(recognizer.GestureRecognizerState)),
    primaryPointer: dart.fieldType(dart.legacy(core.int)),
    initialPosition: dart.fieldType(dart.legacy(recognizer.OffsetPair)),
    [_gestureAccepted]: dart.fieldType(dart.legacy(core.bool)),
    [_timer]: dart.fieldType(dart.legacy(async.Timer))
  }));
  var local$ = dart.privateName(recognizer, "OffsetPair.local");
  var global$ = dart.privateName(recognizer, "OffsetPair.global");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C8;
  var C7;
  recognizer.OffsetPair = class OffsetPair extends core.Object {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    get global() {
      return this[global$];
    }
    set global(value) {
      super.global = value;
    }
    static fromEventPosition(event) {
      return new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
    }
    static fromEventDelta(event) {
      return new recognizer.OffsetPair.new({local: event.localDelta, global: event.delta});
    }
    ['+'](other) {
      return new recognizer.OffsetPair.new({local: this.local['+'](other.local), global: this.global['+'](other.global)});
    }
    ['-'](other) {
      return new recognizer.OffsetPair.new({local: this.local['-'](other.local), global: this.global['-'](other.global)});
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "OffsetPair")) + "(local: " + dart.str(this.local) + ", global: " + dart.str(this.global) + ")";
    }
  };
  (recognizer.OffsetPair.new = function(opts) {
    let local = opts && 'local' in opts ? opts.local : null;
    let global = opts && 'global' in opts ? opts.global : null;
    this[local$] = local;
    this[global$] = global;
    ;
  }).prototype = recognizer.OffsetPair.prototype;
  dart.addTypeTests(recognizer.OffsetPair);
  dart.addTypeCaches(recognizer.OffsetPair);
  dart.setMethodSignature(recognizer.OffsetPair, () => ({
    __proto__: dart.getMethods(recognizer.OffsetPair.__proto__),
    '+': dart.fnType(dart.legacy(recognizer.OffsetPair), [dart.legacy(recognizer.OffsetPair)]),
    '-': dart.fnType(dart.legacy(recognizer.OffsetPair), [dart.legacy(recognizer.OffsetPair)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(recognizer.OffsetPair, L0);
  dart.setFieldSignature(recognizer.OffsetPair, () => ({
    __proto__: dart.getFields(recognizer.OffsetPair.__proto__),
    local: dart.finalFieldType(dart.legacy(ui.Offset)),
    global: dart.finalFieldType(dart.legacy(ui.Offset))
  }));
  dart.defineExtensionMethods(recognizer.OffsetPair, ['toString']);
  dart.defineLazy(recognizer.OffsetPair, {
    /*recognizer.OffsetPair.zero*/get zero() {
      return C7 || CT.C7;
    }
  }, true);
  dart.trackLibraries("packages/flutter/src/gestures/recognizer.dart", {
    "package:flutter/src/gestures/recognizer.dart": recognizer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["recognizer.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6CA;;sDARK;;;;EAQL;;;;;;;;;;;;;;;;;;;;;;;;;;IA8Be;;;;;;eAyBoB;AACW,MAA1C,AAAc,4BAAC,AAAM,KAAD,UAAY,AAAM,KAAD;AACrC,oBAAI,sBAAiB,KAAK;AACA,QAAxB,uBAAkB,KAAK;;AAEO,QAA9B,6BAAwB,KAAK;;IAEjC;sBAUwC;IAAS;4BASH;IAAS;qBAIhB;AAGrC,YAAO,AAAY,AAAQ,sBAAL,QAAoB,YAAZ,mBAAe,AAAM,KAAD;IACpD;sBAOwC;AACtC,qBAAO,AAAe,mCAAY,OAAO;AACzC,YAAO,AAAc,6BAAC,OAAO;IAC/B;;IASiB;sBAgBU,MAA4B;UAAmB;AACxE,YAAO,AAAS,QAAD,IAAI;AACjB;AACF;AACE,uBAAO,AASN;;AARC,wBAAI;AACW,yBAAS,AAAY,WAAD,IAAI,OAAO,AAAW,WAAA,KAAK;AAG/C,mCAAS,2CAAoC,AAAI,AAAK,YAAH,MAAK,OAAO;AACuB,YAAnG,AAAU,iBAAG,AAAqF,MAA/E,YAAC,QAAI,uBAAU,IAAI,oBAAgC,kBAAnB,MAAM,eAAN,OAAQ,kBAAc,QAAO,AAAW,eAAR,MAAM,IAAI;;AAE/F,gBAAO;;AAEU,QAAnB,SAAS,AAAQ,QAAA;;YACV;YAAW;AACG;AACrB,uBAAO,AAMN;AAFE,UAHD,YAAY;AACV,kBAAM,mCAAe,WAAW,IAAI;AACpC,kBAAM,oDAAuC,cAAc,cAAkC;UAC9F;AACD,gBAAO;;AAQP,QANW,oCAAY,mDACZ,SAAS,SACb,KAAK,WACH,oBACA,oCAAiB,mDACJ,SAAS;;AAGnC,YAAO,OAAM;IACf;wBAGqD;AACd,MAA/B,0BAAoB,UAAU;AACqD,MAAzF,AAAW,UAAD,KAAK,yCAA4B,cAAc,gCAA0B;IACrF;;;QA3IyB;QAA8B;IAcrB,uBAAyC;IAdlD;IAAoD,oBAAE,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAmKrC;AACR,MAApC,aAA2B;IAC7B;kBAOuB;IAAW;kBAGX;IAAW;YAaF;AACA,yBAAe,gCAA6B,AAAS;AACnE,MAAhB,AAAS;AACT,eAA6B,QAAS,aAAY;AACtB,QAA1B,AAAM,KAAD,SAAS,WAAW;IAC7B;mBAMwB,SAA4B;AAC1B,kBAAQ,AAAQ,sBAAC,OAAO;AAChD,UAAI,KAAK,IAAI;AACe,QAA1B,AAAM,KAAD,SAAS,WAAW;AACD,QAAxB,AAAS,wBAAO,OAAO;;IAE3B;;AAIsC,MAApC,aAA2B;AAC3B,eAAe,UAAW;AAC+C,QAAxD,AAAS,AAAc,0DAAY,OAAO,YAAE;AACrC,MAAxB,AAAiB;AACjB,qBAAO,AAAS;AACD,MAAT;IACR;;AAY6B;IAAK;aAGR;AACxB,YAAO,AAAM,KAAD,IAAI;AAChB,qBAAO,AAAS;AAChB,qBAAO,AAAiB;AACxB,YAAO,AAAM,eAAG;AACH,MAAb,cAAQ,KAAK;IACf;yBAEyC;AACvC,UAAI,eAAS,MACX,MAAO,AAAM,iBAAI,OAAO,EAAE;AAC5B,YAAsB,AAAS,AAAa,kDAAI,OAAO,EAAE;IAC3D;yBAY8B,SAAkB;AACiC,MAAhE,AAAS,AAAc,uDAAS,OAAO,YAAE,sBAAa,SAAS;AACjD,MAA7B,AAAiB,2BAAI,OAAO;AAC5B,WAAO,WAAC,AAAS,+BAAc,OAAO;AACS,MAA/C,AAAQ,sBAAC,OAAO,EAAI,yBAAmB,OAAO;IAChD;wBAS6B;AAC3B,oBAAI,AAAiB,gCAAS,OAAO;AACoC,QAAxD,AAAS,AAAc,0DAAY,OAAO,YAAE;AAC3B,QAAhC,AAAiB,8BAAO,OAAO;AAC/B,sBAAI,AAAiB,mCACnB,AAAmC,gCAAR,OAAO;;IAExC;sCAKoD;AAClD,UAAU,qBAAN,KAAK,KAA4B,yBAAN,KAAK,GAClC,AAAkC,yBAAd,AAAM,KAAD;IAC7B;;;QAhIS;QACW;IAGc,iBAAmC;IACtD,yBAAmB;IAoEjB;AAvEZ,kFAAkB,UAAU,QAAQ,IAAI;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqJhD;;2DAbK;;;;EAaL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmCiB;;;;;;IASF;;;;;;IAUA;;;;;;IAKU;;;;;;IAGnB;;;;;;IAGO;;;;;;sBAQ6B;AACc,MAApD,0BAAqB,AAAM,KAAD,UAAU,AAAM,KAAD;AACzC,UAAI,AAAM,cAA0B;AACK,QAAvC,aAA+B;AACD,QAA9B,sBAAiB,AAAM,KAAD;AAC0D,QAAhF,uBAAkB,sCAAkB,AAAM,KAAD,wBAAwB,AAAM,KAAD;AACtE,YAAI,iBAAY,MACd,AAAiE,eAAxD,gBAAM,eAAU,cAAM,gCAA2B,KAAK;;IAErE;gBAG8B;AAC5B,YAAO,AAAM,cAA0B;AACvC,UAAI,AAAM,cAA0B,8CAAY,AAAM,AAAQ,KAAT,YAAY;AACpD,2CAEwB,WAD9B,2BACD,+BAA0B,QACA,aAA1B,yBAAmB,KAAK,kBAAI;AACrB,4CAEyB,UADhC,2BACA,gCAA2B,QACD,aAA1B,yBAAmB,KAAK,kBAAI;AAEhC,YAAU,uBAAN,KAAK,MAAyB,4BAA4B,IAAI,6BAA6B;AACzD,UAApC,aAA2B;AACQ,UAAnC,yBAAoB;;AAEO,UAA3B,0BAAqB,KAAK;;;AAGU,MAAxC,uCAAkC,KAAK;IACzC;;AAYE,YAAO,AAAS,iBAAG;IACrB;+BAQiD;AAC5B,MAAnB;IACF;kBAGuB;AACrB,UAAI,AAAQ,OAAD,IAAI;AACD,QAAZ;AACuB,QAAvB,yBAAmB;;IAEvB;kBAGuB;AACrB,UAAI,AAAQ,OAAD,IAAI,uBAAkB,AAAM,cAA0B;AACnD,QAAZ;AACsC,QAAtC,aAA+B;;IAEnC;+BAGoC;AAClC,YAAO,AAAM,cAA0B;AAC3B,MAAZ;AACoC,MAApC,aAA+B;IACjC;;AAIc,MAAZ;AACe,MAAT;IACR;;AAGE,UAAI,gBAAU;AACG,QAAf,AAAO;AACM,QAAb,eAAS;;IAEb;yBAEuC;AACxB,mBAAS,AAAM,AAAS,KAAV,eAAY,AAAgB;AACvD,YAAO,AAAO,OAAD;IACf;wBAGqD;AACd,MAA/B,0BAAoB,UAAU;AACgC,MAApE,AAAW,UAAD,KAAK,kDAAqC,SAAS;IAC/D;;;QAhKO;QACA;QACA;QACE;QACW;IAwCG,cAA+B;IAGlD;IAGO;IAIN,yBAAmB;IAClB;IAvDC;IACA;IACA;UAIA,AAAuB,AAAQ,sBAAT,IAAI,QAA+B,aAAvB,sBAAsB,KAAI,sBAC5D;UAGA,AAAwB,AAAQ,uBAAT,IAAI,QAAgC,aAAxB,uBAAuB,KAAI,sBAC9D;AAEF,qFAAkB,UAAU,QAAQ,IAAI;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkLjC;;;;;;IAIA;;;;;;6BAlBqC;AAChD,YAAO,uCAAkB,AAAM,KAAD,wBAAwB,AAAM,KAAD;IAC7D;0BAI+C;AAC7C,YAAO,uCAAkB,AAAM,KAAD,qBAAqB,AAAM,KAAD;IAC1D;UAagC;AAC9B,YAAO,uCACE,AAAM,gBAAE,AAAM,KAAD,iBACZ,AAAO,iBAAE,AAAM,KAAD;IAE1B;UAGgC;AAC9B,YAAO,uCACE,AAAM,gBAAE,AAAM,KAAD,iBACZ,AAAO,iBAAE,AAAM,KAAD;IAE1B;;AAGqB,YAA0E,UAAvE,yBAAkB,MAAM,iBAAc,sBAAS,cAAK,wBAAW,eAAM;IAAE;;;QA3C9E;QACA;IADA;IACA;;EACf;;;;;;;;;;;;;;;;;;MAesB,0BAAI","file":"../../../../../../packages/flutter/src/gestures/recognizer.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__recognizer: recognizer
  };
}));

//# sourceMappingURL=recognizer.dart.lib.js.map
