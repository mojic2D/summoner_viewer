define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/painting/debug.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/decoration.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__flutter__src__rendering__proxy_box_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__painting__debug$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__decoration$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const binding = packages__flutter__src__rendering__layer$46dart.src__rendering__binding;
  const mouse_tracking = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_tracking;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const object$ = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const inline_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__inline_span;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const debug = packages__flutter__src__painting__debug$46dart.src__painting__debug;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var proxy_box = Object.create(dart.library);
  var $toString = dartx.toString;
  var $isFinite = dartx.isFinite;
  var $ceil = dartx.ceil;
  var $_equals = dartx._equals;
  var $every = dartx.every;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var RenderObjectL = () => (RenderObjectL = dart.constFn(dart.legacy(object.RenderObject)))();
  var ParentDataL = () => (ParentDataL = dart.constFn(dart.legacy(object.ParentData)))();
  var HitTestBehaviorL = () => (HitTestBehaviorL = dart.constFn(dart.legacy(proxy_box.HitTestBehavior)))();
  var EnumPropertyOfHitTestBehaviorL = () => (EnumPropertyOfHitTestBehaviorL = dart.constFn(diagnostics.EnumProperty$(HitTestBehaviorL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var BoxConstraintsL = () => (BoxConstraintsL = dart.constFn(dart.legacy(box.BoxConstraints)))();
  var DiagnosticsPropertyOfBoxConstraintsL = () => (DiagnosticsPropertyOfBoxConstraintsL = dart.constFn(diagnostics.DiagnosticsProperty$(BoxConstraintsL())))();
  var OpacityLayerL = () => (OpacityLayerL = dart.constFn(dart.legacy(layer.OpacityLayer)))();
  var PipelineOwnerL = () => (PipelineOwnerL = dart.constFn(dart.legacy(object.PipelineOwner)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var AnimationOfdoubleL = () => (AnimationOfdoubleL = dart.constFn(animation.Animation$(doubleL())))();
  var AnimationLOfdoubleL = () => (AnimationLOfdoubleL = dart.constFn(dart.legacy(AnimationOfdoubleL())))();
  var DiagnosticsPropertyOfAnimationLOfdoubleL = () => (DiagnosticsPropertyOfAnimationLOfdoubleL = dart.constFn(diagnostics.DiagnosticsProperty$(AnimationLOfdoubleL())))();
  var ShaderMaskLayerL = () => (ShaderMaskLayerL = dart.constFn(dart.legacy(layer.ShaderMaskLayer)))();
  var BackdropFilterLayerL = () => (BackdropFilterLayerL = dart.constFn(dart.legacy(layer.BackdropFilterLayer)))();
  var PathL = () => (PathL = dart.constFn(dart.legacy(ui.Path)))();
  var CustomClipperOfPathL = () => (CustomClipperOfPathL = dart.constFn(proxy_box.CustomClipper$(PathL())))();
  var CustomClipperLOfPathL = () => (CustomClipperLOfPathL = dart.constFn(dart.legacy(CustomClipperOfPathL())))();
  var ShapeBorderClipperL = () => (ShapeBorderClipperL = dart.constFn(dart.legacy(proxy_box.ShapeBorderClipper)))();
  var ColorL = () => (ColorL = dart.constFn(dart.legacy(ui.Color)))();
  var JSArrayOfColorL = () => (JSArrayOfColorL = dart.constFn(_interceptors.JSArray$(ColorL())))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var ClipRectLayerL = () => (ClipRectLayerL = dart.constFn(dart.legacy(layer.ClipRectLayer)))();
  var ClipRRectLayerL = () => (ClipRRectLayerL = dart.constFn(dart.legacy(layer.ClipRRectLayer)))();
  var ClipPathLayerL = () => (ClipPathLayerL = dart.constFn(dart.legacy(layer.ClipPathLayer)))();
  var PhysicalModelLayerL = () => (PhysicalModelLayerL = dart.constFn(dart.legacy(layer.PhysicalModelLayer)))();
  var BoxShapeL = () => (BoxShapeL = dart.constFn(dart.legacy(box_border.BoxShape)))();
  var DiagnosticsPropertyOfBoxShapeL = () => (DiagnosticsPropertyOfBoxShapeL = dart.constFn(diagnostics.DiagnosticsProperty$(BoxShapeL())))();
  var BorderRadiusL = () => (BorderRadiusL = dart.constFn(dart.legacy(border_radius.BorderRadius)))();
  var DiagnosticsPropertyOfBorderRadiusL = () => (DiagnosticsPropertyOfBorderRadiusL = dart.constFn(diagnostics.DiagnosticsProperty$(BorderRadiusL())))();
  var DiagnosticsPropertyOfCustomClipperLOfPathL = () => (DiagnosticsPropertyOfCustomClipperLOfPathL = dart.constFn(diagnostics.DiagnosticsProperty$(CustomClipperLOfPathL())))();
  var DecorationPositionL = () => (DecorationPositionL = dart.constFn(dart.legacy(proxy_box.DecorationPosition)))();
  var DecorationL = () => (DecorationL = dart.constFn(dart.legacy(decoration.Decoration)))();
  var DiagnosticsPropertyOfDecorationL = () => (DiagnosticsPropertyOfDecorationL = dart.constFn(diagnostics.DiagnosticsProperty$(DecorationL())))();
  var BoxPainterL = () => (BoxPainterL = dart.constFn(dart.legacy(decoration.BoxPainter)))();
  var DiagnosticsPropertyOfBoxPainterL = () => (DiagnosticsPropertyOfBoxPainterL = dart.constFn(diagnostics.DiagnosticsProperty$(BoxPainterL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var JSArrayOfDiagnosticsNodeL = () => (JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(DiagnosticsNodeL())))();
  var ImageConfigurationL = () => (ImageConfigurationL = dart.constFn(dart.legacy(image_provider.ImageConfiguration)))();
  var DiagnosticsPropertyOfImageConfigurationL = () => (DiagnosticsPropertyOfImageConfigurationL = dart.constFn(diagnostics.DiagnosticsProperty$(ImageConfigurationL())))();
  var BoxHitTestResultL = () => (BoxHitTestResultL = dart.constFn(dart.legacy(box.BoxHitTestResult)))();
  var OffsetL = () => (OffsetL = dart.constFn(dart.legacy(ui.Offset)))();
  var BoxHitTestResultLAndOffsetLToboolL = () => (BoxHitTestResultLAndOffsetLToboolL = dart.constFn(dart.fnType(boolL(), [BoxHitTestResultL(), OffsetL()])))();
  var TransformLayerL = () => (TransformLayerL = dart.constFn(dart.legacy(layer.TransformLayer)))();
  var RenderBoxL = () => (RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))();
  var DiagnosticsPropertyOfOffsetL = () => (DiagnosticsPropertyOfOffsetL = dart.constFn(diagnostics.DiagnosticsProperty$(OffsetL())))();
  var AlignmentGeometryL = () => (AlignmentGeometryL = dart.constFn(dart.legacy(alignment.AlignmentGeometry)))();
  var DiagnosticsPropertyOfAlignmentGeometryL = () => (DiagnosticsPropertyOfAlignmentGeometryL = dart.constFn(diagnostics.DiagnosticsProperty$(AlignmentGeometryL())))();
  var TextDirectionL = () => (TextDirectionL = dart.constFn(dart.legacy(ui.TextDirection)))();
  var EnumPropertyOfTextDirectionL = () => (EnumPropertyOfTextDirectionL = dart.constFn(diagnostics.EnumProperty$(TextDirectionL())))();
  var DiagnosticsPropertyOfboolL = () => (DiagnosticsPropertyOfboolL = dart.constFn(diagnostics.DiagnosticsProperty$(boolL())))();
  var doubleLToboolL = () => (doubleLToboolL = dart.constFn(dart.fnType(boolL(), [doubleL()])))();
  var BoxFitL = () => (BoxFitL = dart.constFn(dart.legacy(box_fit.BoxFit)))();
  var EnumPropertyOfBoxFitL = () => (EnumPropertyOfBoxFitL = dart.constFn(diagnostics.EnumProperty$(BoxFitL())))();
  var HitTestEntryL = () => (HitTestEntryL = dart.constFn(dart.legacy(hit_test.HitTestEntry)))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var PointerMoveEventL = () => (PointerMoveEventL = dart.constFn(dart.legacy(events.PointerMoveEvent)))();
  var PointerUpEventL = () => (PointerUpEventL = dart.constFn(dart.legacy(events.PointerUpEvent)))();
  var PointerCancelEventL = () => (PointerCancelEventL = dart.constFn(dart.legacy(events.PointerCancelEvent)))();
  var PointerSignalEventL = () => (PointerSignalEventL = dart.constFn(dart.legacy(events.PointerSignalEvent)))();
  var FunctionL = () => (FunctionL = dart.constFn(dart.legacy(core.Function)))();
  var FlagsSummaryOfFunctionL = () => (FlagsSummaryOfFunctionL = dart.constFn(diagnostics.FlagsSummary$(FunctionL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var IdentityMapOfStringL$FunctionL = () => (IdentityMapOfStringL$FunctionL = dart.constFn(_js_helper.IdentityMap$(StringL(), FunctionL())))();
  var MouseCursorL = () => (MouseCursorL = dart.constFn(dart.legacy(mouse_cursor.MouseCursor)))();
  var DiagnosticsPropertyOfMouseCursorL = () => (DiagnosticsPropertyOfMouseCursorL = dart.constFn(diagnostics.DiagnosticsProperty$(MouseCursorL())))();
  var OffsetLayerL = () => (OffsetLayerL = dart.constFn(dart.legacy(layer.OffsetLayer)))();
  var SemanticsActionL = () => (SemanticsActionL = dart.constFn(dart.legacy(ui.SemanticsAction)))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var IterablePropertyOfStringL = () => (IterablePropertyOfStringL = dart.constFn(diagnostics.IterableProperty$(StringL())))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var DiagnosticsPropertyOfintL = () => (DiagnosticsPropertyOfintL = dart.constFn(diagnostics.DiagnosticsProperty$(intL())))();
  var LeaderLayerL = () => (LeaderLayerL = dart.constFn(dart.legacy(layer.LeaderLayer)))();
  var LayerLinkL = () => (LayerLinkL = dart.constFn(dart.legacy(layer.LayerLink)))();
  var DiagnosticsPropertyOfLayerLinkL = () => (DiagnosticsPropertyOfLayerLinkL = dart.constFn(diagnostics.DiagnosticsProperty$(LayerLinkL())))();
  var FollowerLayerL = () => (FollowerLayerL = dart.constFn(dart.legacy(layer.FollowerLayer)))();
  const CT = Object.create(null);
  var L0 = "package:flutter/src/rendering/proxy_box.dart";
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/rendering/proxy_box.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_name$]: "HitTestBehavior.deferToChild",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_name$]: "HitTestBehavior.opaque",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_name$]: "HitTestBehavior.translucent",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2], HitTestBehaviorL());
    },
    get C4() {
      return C4 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2425393296.0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.modulate",
        index: 13
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.antiAlias",
        index: 2
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 10,
        [OffsetBase__dx]: 10
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294902015.0
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C10 || CT.C10,
        [TextStyle_inherit]: true
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: text_span.TextSpan.prototype,
        [InlineSpan_style]: C12 || CT.C12,
        [TextSpan_semanticsLabel]: null,
        [TextSpan_recognizer]: null,
        [TextSpan_children]: null,
        [TextSpan_text]: "✂"
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C14 || CT.C14,
        [BorderRadius_bottomLeft]: C14 || CT.C14,
        [BorderRadius_topRight]: C14 || CT.C14,
        [BorderRadius_topLeft]: C14 || CT.C14
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [_name$0]: "BoxShape.rectangle",
        index: 0
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [_name$0]: "BoxShape.circle",
        index: 1
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: proxy_box.DecorationPosition.prototype,
        [_name$]: "DecorationPosition.background",
        index: 0
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: proxy_box.DecorationPosition.prototype,
        [_name$]: "DecorationPosition.foreground",
        index: 1
      });
    },
    get C21() {
      return C21 = dart.constList([C19 || CT.C19, C20 || CT.C20], DecorationPositionL());
    },
    get C22() {
      return C22 = dart.const({
        __proto__: image_provider.ImageConfiguration.prototype,
        [ImageConfiguration_platform]: null,
        [ImageConfiguration_size]: null,
        [ImageConfiguration_textDirection]: null,
        [ImageConfiguration_locale]: null,
        [ImageConfiguration_devicePixelRatio]: null,
        [ImageConfiguration_bundle]: null
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$1]: "BoxFit.contain",
        index: 1
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: box.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: mouse_cursor._DeferringMouseCursor.prototype
      });
    },
    get C27() {
      return C27 = dart.const({
        __proto__: ui.Rect.prototype,
        [Rect_bottom]: 1 / 0,
        [Rect_right]: 1 / 0,
        [Rect_top]: -1 / 0,
        [Rect_left]: -1 / 0
      });
    }
  }, false);
  const _is_RenderProxyBoxMixin_default = Symbol('_is_RenderProxyBoxMixin_default');
  proxy_box.RenderProxyBoxMixin$ = dart.generic(T => {
    class RenderProxyBoxMixin extends core.Object {}
    RenderProxyBoxMixin[dart.mixinOn] = _RenderProxyBoxMixin$36RenderBox$36RenderObjectWithChildMixin => class RenderProxyBoxMixin extends _RenderProxyBoxMixin$36RenderBox$36RenderObjectWithChildMixin {
      setupParentData(child) {
        RenderObjectL().as(child);
        if (!ParentDataL().is(child.parentData)) child.parentData = new object.ParentData.new();
      }
      computeMinIntrinsicWidth(height) {
        if (this.child != null) return this.child.getMinIntrinsicWidth(height);
        return 0.0;
      }
      computeMaxIntrinsicWidth(height) {
        if (this.child != null) return this.child.getMaxIntrinsicWidth(height);
        return 0.0;
      }
      computeMinIntrinsicHeight(width) {
        if (this.child != null) return this.child.getMinIntrinsicHeight(width);
        return 0.0;
      }
      computeMaxIntrinsicHeight(width) {
        if (this.child != null) return this.child.getMaxIntrinsicHeight(width);
        return 0.0;
      }
      computeDistanceToActualBaseline(baseline) {
        if (this.child != null) return this.child.getDistanceToActualBaseline(baseline);
        return super.computeDistanceToActualBaseline(baseline);
      }
      performLayout() {
        if (this.child != null) {
          this.child.layout(this.constraints, {parentUsesSize: true});
          this.size = this.child.size;
        } else {
          this.performResize();
        }
      }
      hitTestChildren(result, opts) {
        let t0, t0$;
        let position = opts && 'position' in opts ? opts.position : null;
        t0$ = (t0 = this.child, t0 == null ? null : t0.hitTest(result, {position: position}));
        return t0$ == null ? false : t0$;
      }
      applyPaintTransform(child, transform) {
        RenderObjectL().as(child);
      }
      paint(context, offset) {
        if (this.child != null) context.paintChild(this.child, offset);
      }
    };
    dart.addTypeTests(RenderProxyBoxMixin);
    RenderProxyBoxMixin.prototype[_is_RenderProxyBoxMixin_default] = true;
    dart.addTypeCaches(RenderProxyBoxMixin);
    RenderProxyBoxMixin[dart.implements] = () => [object.RenderObjectWithChildMixin$(dart.legacy(T)), box.RenderBox];
    dart.setMethodSignature(RenderProxyBoxMixin, () => ({
      __proto__: dart.getMethods(RenderProxyBoxMixin.__proto__),
      setupParentData: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      computeMinIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
      computeMaxIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
      computeMinIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
      computeMaxIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
      computeDistanceToActualBaseline: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.TextBaseline)]),
      performLayout: dart.fnType(dart.void, []),
      hitTestChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(box.BoxHitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
      applyPaintTransform: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(vector_math_64.Matrix4)]),
      paint: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)])
    }));
    dart.setLibraryUri(RenderProxyBoxMixin, L0);
    return RenderProxyBoxMixin;
  });
  proxy_box.RenderProxyBoxMixin = proxy_box.RenderProxyBoxMixin$();
  dart.addTypeTests(proxy_box.RenderProxyBoxMixin, _is_RenderProxyBoxMixin_default);
  const RenderBox_RenderObjectWithChildMixin$36 = class RenderBox_RenderObjectWithChildMixin extends box.RenderBox {};
  (RenderBox_RenderObjectWithChildMixin$36.new = function() {
    object.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox))[dart.mixinNew].call(this);
    RenderBox_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderObjectWithChildMixin$36, object.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox)));
  const RenderBox_RenderProxyBoxMixin$36 = class RenderBox_RenderProxyBoxMixin extends RenderBox_RenderObjectWithChildMixin$36 {};
  (RenderBox_RenderProxyBoxMixin$36.new = function() {
    RenderBox_RenderProxyBoxMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderProxyBoxMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderProxyBoxMixin$36, proxy_box.RenderProxyBoxMixin$(dart.legacy(box.RenderBox)));
  proxy_box.RenderProxyBox = class RenderProxyBox extends RenderBox_RenderProxyBoxMixin$36 {};
  (proxy_box.RenderProxyBox.new = function(child = null) {
    proxy_box.RenderProxyBox.__proto__.new.call(this);
    this.child = child;
  }).prototype = proxy_box.RenderProxyBox.prototype;
  dart.addTypeTests(proxy_box.RenderProxyBox);
  dart.addTypeCaches(proxy_box.RenderProxyBox);
  dart.setLibraryUri(proxy_box.RenderProxyBox, L0);
  var _name$ = dart.privateName(proxy_box, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  proxy_box.HitTestBehavior = class HitTestBehavior extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (proxy_box.HitTestBehavior.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = proxy_box.HitTestBehavior.prototype;
  dart.addTypeTests(proxy_box.HitTestBehavior);
  dart.addTypeCaches(proxy_box.HitTestBehavior);
  dart.setMethodSignature(proxy_box.HitTestBehavior, () => ({
    __proto__: dart.getMethods(proxy_box.HitTestBehavior.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(proxy_box.HitTestBehavior, L0);
  dart.setFieldSignature(proxy_box.HitTestBehavior, () => ({
    __proto__: dart.getFields(proxy_box.HitTestBehavior.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(proxy_box.HitTestBehavior, ['toString']);
  proxy_box.HitTestBehavior.deferToChild = C0 || CT.C0;
  proxy_box.HitTestBehavior.opaque = C1 || CT.C1;
  proxy_box.HitTestBehavior.translucent = C2 || CT.C2;
  proxy_box.HitTestBehavior.values = C3 || CT.C3;
  var behavior$ = dart.privateName(proxy_box, "RenderProxyBoxWithHitTestBehavior.behavior");
  proxy_box.RenderProxyBoxWithHitTestBehavior = class RenderProxyBoxWithHitTestBehavior extends proxy_box.RenderProxyBox {
    get behavior() {
      return this[behavior$];
    }
    set behavior(value) {
      this[behavior$] = value;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let hitTarget = false;
      if (dart.test(this.size.contains(position))) {
        hitTarget = dart.test(this.hitTestChildren(result, {position: position})) || dart.test(this.hitTestSelf(position));
        if (hitTarget || this.behavior == proxy_box.HitTestBehavior.translucent) result.add(new box.BoxHitTestEntry.new(this, position));
      }
      return hitTarget;
    }
    hitTestSelf(position) {
      return this.behavior == proxy_box.HitTestBehavior.opaque;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfHitTestBehaviorL()).new("behavior", this.behavior, {defaultValue: null}));
    }
  };
  (proxy_box.RenderProxyBoxWithHitTestBehavior.new = function(opts) {
    let behavior = opts && 'behavior' in opts ? opts.behavior : C0 || CT.C0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[behavior$] = behavior;
    proxy_box.RenderProxyBoxWithHitTestBehavior.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderProxyBoxWithHitTestBehavior.prototype;
  dart.addTypeTests(proxy_box.RenderProxyBoxWithHitTestBehavior);
  dart.addTypeCaches(proxy_box.RenderProxyBoxWithHitTestBehavior);
  dart.setLibraryUri(proxy_box.RenderProxyBoxWithHitTestBehavior, L0);
  dart.setFieldSignature(proxy_box.RenderProxyBoxWithHitTestBehavior, () => ({
    __proto__: dart.getFields(proxy_box.RenderProxyBoxWithHitTestBehavior.__proto__),
    behavior: dart.fieldType(dart.legacy(proxy_box.HitTestBehavior))
  }));
  var _additionalConstraints = dart.privateName(proxy_box, "_additionalConstraints");
  var Color_value = dart.privateName(ui, "Color.value");
  var C4;
  proxy_box.RenderConstrainedBox = class RenderConstrainedBox extends proxy_box.RenderProxyBox {
    get additionalConstraints() {
      return this[_additionalConstraints];
    }
    set additionalConstraints(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 214, 12, "value != null");
      if (!dart.test(value.debugAssertIsValid())) dart.assertFailed(null, L1, 215, 12, "value.debugAssertIsValid()");
      if (dart.equals(this[_additionalConstraints], value)) return;
      this[_additionalConstraints] = value;
      this.markNeedsLayout();
    }
    computeMinIntrinsicWidth(height) {
      if (dart.test(this[_additionalConstraints].hasBoundedWidth) && dart.test(this[_additionalConstraints].hasTightWidth)) return this[_additionalConstraints].minWidth;
      let width = super.computeMinIntrinsicWidth(height);
      if (!width[$isFinite]) dart.assertFailed(null, L1, 227, 12, "width.isFinite");
      if (!dart.test(this[_additionalConstraints].hasInfiniteWidth)) return this[_additionalConstraints].constrainWidth(width);
      return width;
    }
    computeMaxIntrinsicWidth(height) {
      if (dart.test(this[_additionalConstraints].hasBoundedWidth) && dart.test(this[_additionalConstraints].hasTightWidth)) return this[_additionalConstraints].minWidth;
      let width = super.computeMaxIntrinsicWidth(height);
      if (!width[$isFinite]) dart.assertFailed(null, L1, 238, 12, "width.isFinite");
      if (!dart.test(this[_additionalConstraints].hasInfiniteWidth)) return this[_additionalConstraints].constrainWidth(width);
      return width;
    }
    computeMinIntrinsicHeight(width) {
      if (dart.test(this[_additionalConstraints].hasBoundedHeight) && dart.test(this[_additionalConstraints].hasTightHeight)) return this[_additionalConstraints].minHeight;
      let height = super.computeMinIntrinsicHeight(width);
      if (!height[$isFinite]) dart.assertFailed(null, L1, 249, 12, "height.isFinite");
      if (!dart.test(this[_additionalConstraints].hasInfiniteHeight)) return this[_additionalConstraints].constrainHeight(height);
      return height;
    }
    computeMaxIntrinsicHeight(width) {
      if (dart.test(this[_additionalConstraints].hasBoundedHeight) && dart.test(this[_additionalConstraints].hasTightHeight)) return this[_additionalConstraints].minHeight;
      let height = super.computeMaxIntrinsicHeight(width);
      if (!height[$isFinite]) dart.assertFailed(null, L1, 260, 12, "height.isFinite");
      if (!dart.test(this[_additionalConstraints].hasInfiniteHeight)) return this[_additionalConstraints].constrainHeight(height);
      return height;
    }
    performLayout() {
      let constraints = this.constraints;
      if (this.child != null) {
        this.child.layout(this[_additionalConstraints].enforce(constraints), {parentUsesSize: true});
        this.size = this.child.size;
      } else {
        this.size = this[_additionalConstraints].enforce(constraints).constrain(ui.Size.zero);
      }
    }
    debugPaintSize(context, offset) {
      super.debugPaintSize(context, offset);
      if (!dart.test(dart.fn(() => {
        let t0;
        let paint = null;
        if (this.child == null || dart.test(this.child.size.isEmpty)) {
          paint = (t0 = ui.Paint.new(), (() => {
            t0.color = C4 || CT.C4;
            return t0;
          })());
          context.canvas.drawRect(offset['&'](this.size), paint);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 280, 12, "() {\r\n      Paint paint;\r\n      if (child == null || child.size.isEmpty) {\r\n        paint = Paint()\r\n          ..color = const Color(0x90909090);\r\n        context.canvas.drawRect(offset & size, paint);\r\n      }\r\n      return true;\r\n    }()");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfBoxConstraintsL()).new("additionalConstraints", this.additionalConstraints));
    }
  };
  (proxy_box.RenderConstrainedBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (!(additionalConstraints != null)) dart.assertFailed(null, L1, 205, 15, "additionalConstraints != null");
    if (!dart.test(additionalConstraints.debugAssertIsValid())) dart.assertFailed(null, L1, 206, 15, "additionalConstraints.debugAssertIsValid()");
    this[_additionalConstraints] = additionalConstraints;
    proxy_box.RenderConstrainedBox.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderConstrainedBox.prototype;
  dart.addTypeTests(proxy_box.RenderConstrainedBox);
  dart.addTypeCaches(proxy_box.RenderConstrainedBox);
  dart.setGetterSignature(proxy_box.RenderConstrainedBox, () => ({
    __proto__: dart.getGetters(proxy_box.RenderConstrainedBox.__proto__),
    additionalConstraints: dart.legacy(box.BoxConstraints)
  }));
  dart.setSetterSignature(proxy_box.RenderConstrainedBox, () => ({
    __proto__: dart.getSetters(proxy_box.RenderConstrainedBox.__proto__),
    additionalConstraints: dart.legacy(box.BoxConstraints)
  }));
  dart.setLibraryUri(proxy_box.RenderConstrainedBox, L0);
  dart.setFieldSignature(proxy_box.RenderConstrainedBox, () => ({
    __proto__: dart.getFields(proxy_box.RenderConstrainedBox.__proto__),
    [_additionalConstraints]: dart.fieldType(dart.legacy(box.BoxConstraints))
  }));
  var _maxWidth = dart.privateName(proxy_box, "_maxWidth");
  var _maxHeight = dart.privateName(proxy_box, "_maxHeight");
  var _limitConstraints = dart.privateName(proxy_box, "_limitConstraints");
  proxy_box.RenderLimitedBox = class RenderLimitedBox extends proxy_box.RenderProxyBox {
    get maxWidth() {
      return this[_maxWidth];
    }
    set maxWidth(value) {
      if (!(value != null && dart.notNull(value) >= 0.0)) dart.assertFailed(null, L1, 330, 12, "value != null && value >= 0.0");
      if (this[_maxWidth] == value) return;
      this[_maxWidth] = value;
      this.markNeedsLayout();
    }
    get maxHeight() {
      return this[_maxHeight];
    }
    set maxHeight(value) {
      if (!(value != null && dart.notNull(value) >= 0.0)) dart.assertFailed(null, L1, 341, 12, "value != null && value >= 0.0");
      if (this[_maxHeight] == value) return;
      this[_maxHeight] = value;
      this.markNeedsLayout();
    }
    [_limitConstraints](constraints) {
      return new box.BoxConstraints.new({minWidth: constraints.minWidth, maxWidth: dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(this.maxWidth), minHeight: constraints.minHeight, maxHeight: dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(this.maxHeight)});
    }
    performLayout() {
      if (this.child != null) {
        let constraints = this.constraints;
        this.child.layout(this[_limitConstraints](constraints), {parentUsesSize: true});
        this.size = constraints.constrain(this.child.size);
      } else {
        this.size = this[_limitConstraints](this.constraints).constrain(ui.Size.zero);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("maxWidth", this.maxWidth, {defaultValue: 1 / 0}));
      properties.add(new diagnostics.DoubleProperty.new("maxHeight", this.maxHeight, {defaultValue: 1 / 0}));
    }
  };
  (proxy_box.RenderLimitedBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    if (!(maxWidth != null && dart.notNull(maxWidth) >= 0.0)) dart.assertFailed(null, L1, 320, 15, "maxWidth != null && maxWidth >= 0.0");
    if (!(maxHeight != null && dart.notNull(maxHeight) >= 0.0)) dart.assertFailed(null, L1, 321, 15, "maxHeight != null && maxHeight >= 0.0");
    this[_maxWidth] = maxWidth;
    this[_maxHeight] = maxHeight;
    proxy_box.RenderLimitedBox.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderLimitedBox.prototype;
  dart.addTypeTests(proxy_box.RenderLimitedBox);
  dart.addTypeCaches(proxy_box.RenderLimitedBox);
  dart.setMethodSignature(proxy_box.RenderLimitedBox, () => ({
    __proto__: dart.getMethods(proxy_box.RenderLimitedBox.__proto__),
    [_limitConstraints]: dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(box.BoxConstraints)])
  }));
  dart.setGetterSignature(proxy_box.RenderLimitedBox, () => ({
    __proto__: dart.getGetters(proxy_box.RenderLimitedBox.__proto__),
    maxWidth: dart.legacy(core.double),
    maxHeight: dart.legacy(core.double)
  }));
  dart.setSetterSignature(proxy_box.RenderLimitedBox, () => ({
    __proto__: dart.getSetters(proxy_box.RenderLimitedBox.__proto__),
    maxWidth: dart.legacy(core.double),
    maxHeight: dart.legacy(core.double)
  }));
  dart.setLibraryUri(proxy_box.RenderLimitedBox, L0);
  dart.setFieldSignature(proxy_box.RenderLimitedBox, () => ({
    __proto__: dart.getFields(proxy_box.RenderLimitedBox.__proto__),
    [_maxWidth]: dart.fieldType(dart.legacy(core.double)),
    [_maxHeight]: dart.fieldType(dart.legacy(core.double))
  }));
  var _aspectRatio = dart.privateName(proxy_box, "_aspectRatio");
  var _applyAspectRatio = dart.privateName(proxy_box, "_applyAspectRatio");
  proxy_box.RenderAspectRatio = class RenderAspectRatio extends proxy_box.RenderProxyBox {
    get aspectRatio() {
      return this[_aspectRatio];
    }
    set aspectRatio(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 422, 12, "value != null");
      if (!(dart.notNull(value) > 0.0)) dart.assertFailed(null, L1, 423, 12, "value > 0.0");
      if (!value[$isFinite]) dart.assertFailed(null, L1, 424, 12, "value.isFinite");
      if (this[_aspectRatio] == value) return;
      this[_aspectRatio] = value;
      this.markNeedsLayout();
    }
    computeMinIntrinsicWidth(height) {
      if (height[$isFinite]) return dart.notNull(height) * dart.notNull(this[_aspectRatio]);
      if (this.child != null) return this.child.getMinIntrinsicWidth(height);
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (height[$isFinite]) return dart.notNull(height) * dart.notNull(this[_aspectRatio]);
      if (this.child != null) return this.child.getMaxIntrinsicWidth(height);
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (width[$isFinite]) return dart.notNull(width) / dart.notNull(this[_aspectRatio]);
      if (this.child != null) return this.child.getMinIntrinsicHeight(width);
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (width[$isFinite]) return dart.notNull(width) / dart.notNull(this[_aspectRatio]);
      if (this.child != null) return this.child.getMaxIntrinsicHeight(width);
      return 0.0;
    }
    [_applyAspectRatio](constraints) {
      if (!dart.test(constraints.debugAssertIsValid())) dart.assertFailed(null, L1, 468, 12, "constraints.debugAssertIsValid()");
      if (!dart.test(dart.fn(() => {
        if (!dart.test(constraints.hasBoundedWidth) && !dart.test(constraints.hasBoundedHeight)) {
          dart.throw(assertions.FlutterError.new(dart.str(this.runtimeType) + " has unbounded constraints.\n" + "This " + dart.str(this.runtimeType) + " was given an aspect ratio of " + dart.str(this.aspectRatio) + " but was given " + "both unbounded width and unbounded height constraints. Because both " + "constraints were unbounded, this render object doesn't know how much " + "size to consume."));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 469, 12, "() {\r\n      if (!constraints.hasBoundedWidth && !constraints.hasBoundedHeight) {\r\n        throw FlutterError(\r\n          '$runtimeType has unbounded constraints.\\n'\r\n          'This $runtimeType was given an aspect ratio of $aspectRatio but was given '\r\n          'both unbounded width and unbounded height constraints. Because both '\r\n          'constraints were unbounded, this render object doesn\\'t know how much '\r\n          'size to consume.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (dart.test(constraints.isTight)) return constraints.smallest;
      let width = constraints.maxWidth;
      let height = null;
      if (width[$isFinite]) {
        height = dart.notNull(width) / dart.notNull(this[_aspectRatio]);
      } else {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this[_aspectRatio]);
      }
      if (dart.notNull(width) > dart.notNull(constraints.maxWidth)) {
        width = constraints.maxWidth;
        height = dart.notNull(width) / dart.notNull(this[_aspectRatio]);
      }
      if (dart.notNull(height) > dart.notNull(constraints.maxHeight)) {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this[_aspectRatio]);
      }
      if (dart.notNull(width) < dart.notNull(constraints.minWidth)) {
        width = constraints.minWidth;
        height = dart.notNull(width) / dart.notNull(this[_aspectRatio]);
      }
      if (dart.notNull(height) < dart.notNull(constraints.minHeight)) {
        height = constraints.minHeight;
        width = dart.notNull(height) * dart.notNull(this[_aspectRatio]);
      }
      return constraints.constrain(new ui.Size.new(width, height));
    }
    performLayout() {
      this.size = this[_applyAspectRatio](this.constraints);
      if (this.child != null) this.child.layout(new box.BoxConstraints.tight(this.size));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("aspectRatio", this.aspectRatio));
    }
  };
  (proxy_box.RenderAspectRatio.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let aspectRatio = opts && 'aspectRatio' in opts ? opts.aspectRatio : null;
    if (!(aspectRatio != null)) dart.assertFailed(null, L1, 409, 15, "aspectRatio != null");
    if (!(dart.notNull(aspectRatio) > 0.0)) dart.assertFailed(null, L1, 410, 15, "aspectRatio > 0.0");
    if (!aspectRatio[$isFinite]) dart.assertFailed(null, L1, 411, 15, "aspectRatio.isFinite");
    this[_aspectRatio] = aspectRatio;
    proxy_box.RenderAspectRatio.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderAspectRatio.prototype;
  dart.addTypeTests(proxy_box.RenderAspectRatio);
  dart.addTypeCaches(proxy_box.RenderAspectRatio);
  dart.setMethodSignature(proxy_box.RenderAspectRatio, () => ({
    __proto__: dart.getMethods(proxy_box.RenderAspectRatio.__proto__),
    [_applyAspectRatio]: dart.fnType(dart.legacy(ui.Size), [dart.legacy(box.BoxConstraints)])
  }));
  dart.setGetterSignature(proxy_box.RenderAspectRatio, () => ({
    __proto__: dart.getGetters(proxy_box.RenderAspectRatio.__proto__),
    aspectRatio: dart.legacy(core.double)
  }));
  dart.setSetterSignature(proxy_box.RenderAspectRatio, () => ({
    __proto__: dart.getSetters(proxy_box.RenderAspectRatio.__proto__),
    aspectRatio: dart.legacy(core.double)
  }));
  dart.setLibraryUri(proxy_box.RenderAspectRatio, L0);
  dart.setFieldSignature(proxy_box.RenderAspectRatio, () => ({
    __proto__: dart.getFields(proxy_box.RenderAspectRatio.__proto__),
    [_aspectRatio]: dart.fieldType(dart.legacy(core.double))
  }));
  var _stepWidth = dart.privateName(proxy_box, "_stepWidth");
  var _stepHeight = dart.privateName(proxy_box, "_stepHeight");
  proxy_box.RenderIntrinsicWidth = class RenderIntrinsicWidth extends proxy_box.RenderProxyBox {
    get stepWidth() {
      return this[_stepWidth];
    }
    set stepWidth(value) {
      if (!(value == null || dart.notNull(value) > 0.0)) dart.assertFailed(null, L1, 593, 12, "value == null || value > 0.0");
      if (value == this[_stepWidth]) return;
      this[_stepWidth] = value;
      this.markNeedsLayout();
    }
    get stepHeight() {
      return this[_stepHeight];
    }
    set stepHeight(value) {
      if (!(value == null || dart.notNull(value) > 0.0)) dart.assertFailed(null, L1, 606, 12, "value == null || value > 0.0");
      if (value == this[_stepHeight]) return;
      this[_stepHeight] = value;
      this.markNeedsLayout();
    }
    static _applyStep(input, step) {
      if (!input[$isFinite]) dart.assertFailed(null, L1, 614, 12, "input.isFinite");
      if (step == null) return input;
      return (dart.notNull(input) / dart.notNull(step))[$ceil]() * dart.notNull(step);
    }
    computeMinIntrinsicWidth(height) {
      return this.computeMaxIntrinsicWidth(height);
    }
    computeMaxIntrinsicWidth(height) {
      if (this.child == null) return 0.0;
      let width = this.child.getMaxIntrinsicWidth(height);
      return proxy_box.RenderIntrinsicWidth._applyStep(width, this[_stepWidth]);
    }
    computeMinIntrinsicHeight(width) {
      if (this.child == null) return 0.0;
      if (!width[$isFinite]) width = this.computeMaxIntrinsicWidth(1 / 0);
      if (!width[$isFinite]) dart.assertFailed(null, L1, 639, 12, "width.isFinite");
      let height = this.child.getMinIntrinsicHeight(width);
      return proxy_box.RenderIntrinsicWidth._applyStep(height, this[_stepHeight]);
    }
    computeMaxIntrinsicHeight(width) {
      if (this.child == null) return 0.0;
      if (!width[$isFinite]) width = this.computeMaxIntrinsicWidth(1 / 0);
      if (!width[$isFinite]) dart.assertFailed(null, L1, 650, 12, "width.isFinite");
      let height = this.child.getMaxIntrinsicHeight(width);
      return proxy_box.RenderIntrinsicWidth._applyStep(height, this[_stepHeight]);
    }
    performLayout() {
      if (this.child != null) {
        let childConstraints = this.constraints;
        if (!dart.test(childConstraints.hasTightWidth)) {
          let width = this.child.getMaxIntrinsicWidth(childConstraints.maxHeight);
          if (!width[$isFinite]) dart.assertFailed(null, L1, 661, 16, "width.isFinite");
          childConstraints = childConstraints.tighten({width: proxy_box.RenderIntrinsicWidth._applyStep(width, this[_stepWidth])});
        }
        if (this[_stepHeight] != null) {
          let height = this.child.getMaxIntrinsicHeight(childConstraints.maxWidth);
          if (!height[$isFinite]) dart.assertFailed(null, L1, 666, 16, "height.isFinite");
          childConstraints = childConstraints.tighten({height: proxy_box.RenderIntrinsicWidth._applyStep(height, this[_stepHeight])});
        }
        this.child.layout(childConstraints, {parentUsesSize: true});
        this.size = this.child.size;
      } else {
        this.performResize();
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("stepWidth", this.stepWidth));
      properties.add(new diagnostics.DoubleProperty.new("stepHeight", this.stepHeight));
    }
  };
  (proxy_box.RenderIntrinsicWidth.new = function(opts) {
    let stepWidth = opts && 'stepWidth' in opts ? opts.stepWidth : null;
    let stepHeight = opts && 'stepHeight' in opts ? opts.stepHeight : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(stepWidth == null || dart.notNull(stepWidth) > 0.0)) dart.assertFailed(null, L1, 581, 15, "stepWidth == null || stepWidth > 0.0");
    if (!(stepHeight == null || dart.notNull(stepHeight) > 0.0)) dart.assertFailed(null, L1, 582, 15, "stepHeight == null || stepHeight > 0.0");
    this[_stepWidth] = stepWidth;
    this[_stepHeight] = stepHeight;
    proxy_box.RenderIntrinsicWidth.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderIntrinsicWidth.prototype;
  dart.addTypeTests(proxy_box.RenderIntrinsicWidth);
  dart.addTypeCaches(proxy_box.RenderIntrinsicWidth);
  dart.setGetterSignature(proxy_box.RenderIntrinsicWidth, () => ({
    __proto__: dart.getGetters(proxy_box.RenderIntrinsicWidth.__proto__),
    stepWidth: dart.legacy(core.double),
    stepHeight: dart.legacy(core.double)
  }));
  dart.setSetterSignature(proxy_box.RenderIntrinsicWidth, () => ({
    __proto__: dart.getSetters(proxy_box.RenderIntrinsicWidth.__proto__),
    stepWidth: dart.legacy(core.double),
    stepHeight: dart.legacy(core.double)
  }));
  dart.setLibraryUri(proxy_box.RenderIntrinsicWidth, L0);
  dart.setFieldSignature(proxy_box.RenderIntrinsicWidth, () => ({
    __proto__: dart.getFields(proxy_box.RenderIntrinsicWidth.__proto__),
    [_stepWidth]: dart.fieldType(dart.legacy(core.double)),
    [_stepHeight]: dart.fieldType(dart.legacy(core.double))
  }));
  proxy_box.RenderIntrinsicHeight = class RenderIntrinsicHeight extends proxy_box.RenderProxyBox {
    computeMinIntrinsicWidth(height) {
      if (this.child == null) return 0.0;
      if (!height[$isFinite]) height = this.child.getMaxIntrinsicHeight(1 / 0);
      if (!height[$isFinite]) dart.assertFailed(null, L1, 724, 12, "height.isFinite");
      return this.child.getMinIntrinsicWidth(height);
    }
    computeMaxIntrinsicWidth(height) {
      if (this.child == null) return 0.0;
      if (!height[$isFinite]) height = this.child.getMaxIntrinsicHeight(1 / 0);
      if (!height[$isFinite]) dart.assertFailed(null, L1, 734, 12, "height.isFinite");
      return this.child.getMaxIntrinsicWidth(height);
    }
    computeMinIntrinsicHeight(width) {
      return this.computeMaxIntrinsicHeight(width);
    }
    performLayout() {
      if (this.child != null) {
        let childConstraints = this.constraints;
        if (!dart.test(childConstraints.hasTightHeight)) {
          let height = this.child.getMaxIntrinsicHeight(childConstraints.maxWidth);
          if (!height[$isFinite]) dart.assertFailed(null, L1, 749, 16, "height.isFinite");
          childConstraints = childConstraints.tighten({height: height});
        }
        this.child.layout(childConstraints, {parentUsesSize: true});
        this.size = this.child.size;
      } else {
        this.performResize();
      }
    }
  };
  (proxy_box.RenderIntrinsicHeight.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    proxy_box.RenderIntrinsicHeight.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderIntrinsicHeight.prototype;
  dart.addTypeTests(proxy_box.RenderIntrinsicHeight);
  dart.addTypeCaches(proxy_box.RenderIntrinsicHeight);
  dart.setLibraryUri(proxy_box.RenderIntrinsicHeight, L0);
  var _opacity = dart.privateName(proxy_box, "_opacity");
  var _alwaysIncludeSemantics = dart.privateName(proxy_box, "_alwaysIncludeSemantics");
  var _alpha = dart.privateName(proxy_box, "_alpha");
  proxy_box.RenderOpacity = class RenderOpacity extends proxy_box.RenderProxyBox {
    get alwaysNeedsCompositing() {
      return this.child != null && this[_alpha] !== 0 && this[_alpha] !== 255;
    }
    get opacity() {
      return this[_opacity];
    }
    set opacity(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 804, 12, "value != null");
      if (!(dart.notNull(value) >= 0.0 && dart.notNull(value) <= 1.0)) dart.assertFailed(null, L1, 805, 12, "value >= 0.0 && value <= 1.0");
      if (this[_opacity] == value) return;
      let didNeedCompositing = this.alwaysNeedsCompositing;
      let wasVisible = this[_alpha] !== 0;
      this[_opacity] = value;
      this[_alpha] = ui.Color.getAlphaFromOpacity(this[_opacity]);
      if (!dart.equals(didNeedCompositing, this.alwaysNeedsCompositing)) this.markNeedsCompositingBitsUpdate();
      this.markNeedsPaint();
      if (!wasVisible[$_equals](this[_alpha] !== 0) && !dart.test(this.alwaysIncludeSemantics)) this.markNeedsSemanticsUpdate();
    }
    get alwaysIncludeSemantics() {
      return this[_alwaysIncludeSemantics];
    }
    set alwaysIncludeSemantics(value) {
      if (dart.equals(value, this[_alwaysIncludeSemantics])) return;
      this[_alwaysIncludeSemantics] = value;
      this.markNeedsSemanticsUpdate();
    }
    paint(context, offset) {
      if (this.child != null) {
        if (this[_alpha] === 0) {
          this.layer = null;
          return;
        }
        if (this[_alpha] === 255) {
          this.layer = null;
          context.paintChild(this.child, offset);
          return;
        }
        if (!dart.test(this.needsCompositing)) dart.assertFailed(null, L1, 847, 14, "needsCompositing");
        this.layer = context.pushOpacity(offset, this[_alpha], dart.bind(this, 'paint', super.paint), {oldLayer: OpacityLayerL().as(this.layer)});
      }
    }
    visitChildrenForSemantics(visitor) {
      if (this.child != null && (this[_alpha] !== 0 || dart.test(this.alwaysIncludeSemantics))) visitor(this.child);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("opacity", this.opacity));
      properties.add(new diagnostics.FlagProperty.new("alwaysIncludeSemantics", {value: this.alwaysIncludeSemantics, ifTrue: "alwaysIncludeSemantics"}));
    }
  };
  (proxy_box.RenderOpacity.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    let alwaysIncludeSemantics = opts && 'alwaysIncludeSemantics' in opts ? opts.alwaysIncludeSemantics : false;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(opacity != null)) dart.assertFailed(null, L1, 778, 15, "opacity != null");
    if (!(dart.notNull(opacity) >= 0.0 && dart.notNull(opacity) <= 1.0)) dart.assertFailed(null, L1, 779, 15, "opacity >= 0.0 && opacity <= 1.0");
    if (!(alwaysIncludeSemantics != null)) dart.assertFailed(null, L1, 780, 15, "alwaysIncludeSemantics != null");
    this[_opacity] = opacity;
    this[_alwaysIncludeSemantics] = alwaysIncludeSemantics;
    this[_alpha] = ui.Color.getAlphaFromOpacity(opacity);
    proxy_box.RenderOpacity.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderOpacity.prototype;
  dart.addTypeTests(proxy_box.RenderOpacity);
  dart.addTypeCaches(proxy_box.RenderOpacity);
  dart.setGetterSignature(proxy_box.RenderOpacity, () => ({
    __proto__: dart.getGetters(proxy_box.RenderOpacity.__proto__),
    opacity: dart.legacy(core.double),
    alwaysIncludeSemantics: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderOpacity, () => ({
    __proto__: dart.getSetters(proxy_box.RenderOpacity.__proto__),
    opacity: dart.legacy(core.double),
    alwaysIncludeSemantics: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderOpacity, L0);
  dart.setFieldSignature(proxy_box.RenderOpacity, () => ({
    __proto__: dart.getFields(proxy_box.RenderOpacity.__proto__),
    [_alpha]: dart.fieldType(dart.legacy(core.int)),
    [_opacity]: dart.fieldType(dart.legacy(core.double)),
    [_alwaysIncludeSemantics]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _currentlyNeedsCompositing = dart.privateName(proxy_box, "_currentlyNeedsCompositing");
  var _updateOpacity = dart.privateName(proxy_box, "_updateOpacity");
  const _is_RenderAnimatedOpacityMixin_default = Symbol('_is_RenderAnimatedOpacityMixin_default');
  proxy_box.RenderAnimatedOpacityMixin$ = dart.generic(T => {
    class RenderAnimatedOpacityMixin extends object.RenderObjectWithChildMixin$(dart.legacy(T)) {}
    RenderAnimatedOpacityMixin[dart.mixinOn] = RenderObjectWithChildMixin => class RenderAnimatedOpacityMixin extends RenderObjectWithChildMixin {
      get alwaysNeedsCompositing() {
        return this.child != null && dart.test(this[_currentlyNeedsCompositing]);
      }
      get opacity() {
        return this[_opacity];
      }
      set opacity(value) {
        if (!(value != null)) dart.assertFailed(null, L1, 888, 12, "value != null");
        if (dart.equals(this[_opacity], value)) return;
        if (dart.test(this.attached) && this[_opacity] != null) this[_opacity].removeListener(dart.bind(this, _updateOpacity));
        this[_opacity] = value;
        if (dart.test(this.attached)) this[_opacity].addListener(dart.bind(this, _updateOpacity));
        this[_updateOpacity]();
      }
      get alwaysIncludeSemantics() {
        return this[_alwaysIncludeSemantics];
      }
      set alwaysIncludeSemantics(value) {
        if (dart.equals(value, this[_alwaysIncludeSemantics])) return;
        this[_alwaysIncludeSemantics] = value;
        this.markNeedsSemanticsUpdate();
      }
      attach(owner) {
        PipelineOwnerL().as(owner);
        super.attach(owner);
        this[_opacity].addListener(dart.bind(this, _updateOpacity));
        this[_updateOpacity]();
      }
      detach() {
        this[_opacity].removeListener(dart.bind(this, _updateOpacity));
        super.detach();
      }
      [_updateOpacity]() {
        let oldAlpha = this[_alpha];
        this[_alpha] = ui.Color.getAlphaFromOpacity(this[_opacity].value);
        if (oldAlpha != this[_alpha]) {
          let didNeedCompositing = this[_currentlyNeedsCompositing];
          this[_currentlyNeedsCompositing] = dart.notNull(this[_alpha]) > 0 && dart.notNull(this[_alpha]) < 255;
          if (this.child != null && !dart.equals(didNeedCompositing, this[_currentlyNeedsCompositing])) this.markNeedsCompositingBitsUpdate();
          this.markNeedsPaint();
          if (oldAlpha === 0 || this[_alpha] === 0) this.markNeedsSemanticsUpdate();
        }
      }
      paint(context, offset) {
        if (this.child != null) {
          if (this[_alpha] === 0) {
            this.layer = null;
            return;
          }
          if (this[_alpha] === 255) {
            this.layer = null;
            context.paintChild(this.child, offset);
            return;
          }
          if (!dart.test(this.needsCompositing)) dart.assertFailed(null, L1, 954, 14, "needsCompositing");
          this.layer = context.pushOpacity(offset, this[_alpha], dart.bind(this, 'paint', super.paint), {oldLayer: OpacityLayerL().as(this.layer)});
        }
      }
      visitChildrenForSemantics(visitor) {
        if (this.child != null && (this[_alpha] !== 0 || dart.test(this.alwaysIncludeSemantics))) visitor(this.child);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (DiagnosticsPropertyOfAnimationLOfdoubleL()).new("opacity", this.opacity));
        properties.add(new diagnostics.FlagProperty.new("alwaysIncludeSemantics", {value: this.alwaysIncludeSemantics, ifTrue: "alwaysIncludeSemantics"}));
      }
    };
    (RenderAnimatedOpacityMixin[dart.mixinNew] = function() {
      this[_alpha] = null;
      this[_currentlyNeedsCompositing] = null;
      this[_opacity] = null;
      this[_alwaysIncludeSemantics] = null;
    }).prototype = RenderAnimatedOpacityMixin.prototype;
    dart.addTypeTests(RenderAnimatedOpacityMixin);
    RenderAnimatedOpacityMixin.prototype[_is_RenderAnimatedOpacityMixin_default] = true;
    dart.addTypeCaches(RenderAnimatedOpacityMixin);
    RenderAnimatedOpacityMixin[dart.implements] = () => [object.RenderObjectWithChildMixin$(dart.legacy(T))];
    dart.setMethodSignature(RenderAnimatedOpacityMixin, () => ({
      __proto__: dart.getMethods(RenderAnimatedOpacityMixin.__proto__),
      [_updateOpacity]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RenderAnimatedOpacityMixin, () => ({
      __proto__: dart.getGetters(RenderAnimatedOpacityMixin.__proto__),
      opacity: dart.legacy(animation.Animation$(dart.legacy(core.double))),
      alwaysIncludeSemantics: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(RenderAnimatedOpacityMixin, () => ({
      __proto__: dart.getSetters(RenderAnimatedOpacityMixin.__proto__),
      opacity: dart.legacy(animation.Animation$(dart.legacy(core.double))),
      alwaysIncludeSemantics: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(RenderAnimatedOpacityMixin, L0);
    dart.setFieldSignature(RenderAnimatedOpacityMixin, () => ({
      __proto__: dart.getFields(RenderAnimatedOpacityMixin.__proto__),
      [_alpha]: dart.fieldType(dart.legacy(core.int)),
      [_currentlyNeedsCompositing]: dart.fieldType(dart.legacy(core.bool)),
      [_opacity]: dart.fieldType(dart.legacy(animation.Animation$(dart.legacy(core.double)))),
      [_alwaysIncludeSemantics]: dart.fieldType(dart.legacy(core.bool))
    }));
    return RenderAnimatedOpacityMixin;
  });
  proxy_box.RenderAnimatedOpacityMixin = proxy_box.RenderAnimatedOpacityMixin$();
  dart.addTypeTests(proxy_box.RenderAnimatedOpacityMixin, _is_RenderAnimatedOpacityMixin_default);
  const RenderProxyBox_RenderProxyBoxMixin$36 = class RenderProxyBox_RenderProxyBoxMixin extends proxy_box.RenderProxyBox {};
  (RenderProxyBox_RenderProxyBoxMixin$36.new = function(child) {
    RenderProxyBox_RenderProxyBoxMixin$36.__proto__.new.call(this, child);
  }).prototype = RenderProxyBox_RenderProxyBoxMixin$36.prototype;
  dart.applyMixin(RenderProxyBox_RenderProxyBoxMixin$36, proxy_box.RenderProxyBoxMixin$(dart.legacy(box.RenderBox)));
  const RenderProxyBox_RenderAnimatedOpacityMixin$36 = class RenderProxyBox_RenderAnimatedOpacityMixin extends RenderProxyBox_RenderProxyBoxMixin$36 {};
  (RenderProxyBox_RenderAnimatedOpacityMixin$36.new = function(child) {
    proxy_box.RenderAnimatedOpacityMixin$(dart.legacy(box.RenderBox))[dart.mixinNew].call(this);
    RenderProxyBox_RenderAnimatedOpacityMixin$36.__proto__.new.call(this, child);
  }).prototype = RenderProxyBox_RenderAnimatedOpacityMixin$36.prototype;
  dart.applyMixin(RenderProxyBox_RenderAnimatedOpacityMixin$36, proxy_box.RenderAnimatedOpacityMixin$(dart.legacy(box.RenderBox)));
  proxy_box.RenderAnimatedOpacity = class RenderAnimatedOpacity extends RenderProxyBox_RenderAnimatedOpacityMixin$36 {};
  (proxy_box.RenderAnimatedOpacity.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let alwaysIncludeSemantics = opts && 'alwaysIncludeSemantics' in opts ? opts.alwaysIncludeSemantics : false;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(opacity != null)) dart.assertFailed(null, L1, 985, 15, "opacity != null");
    if (!(alwaysIncludeSemantics != null)) dart.assertFailed(null, L1, 986, 15, "alwaysIncludeSemantics != null");
    proxy_box.RenderAnimatedOpacity.__proto__.new.call(this, child);
    this.opacity = opacity;
    this.alwaysIncludeSemantics = alwaysIncludeSemantics;
  }).prototype = proxy_box.RenderAnimatedOpacity.prototype;
  dart.addTypeTests(proxy_box.RenderAnimatedOpacity);
  dart.addTypeCaches(proxy_box.RenderAnimatedOpacity);
  dart.setLibraryUri(proxy_box.RenderAnimatedOpacity, L0);
  var _name = dart.privateName(ui, "_name");
  var C5;
  var _shaderCallback = dart.privateName(proxy_box, "_shaderCallback");
  var _blendMode = dart.privateName(proxy_box, "_blendMode");
  proxy_box.RenderShaderMask = class RenderShaderMask extends proxy_box.RenderProxyBox {
    get layer() {
      return ShaderMaskLayerL().as(super.layer);
    }
    set layer(value) {
      super.layer = value;
    }
    get shaderCallback() {
      return this[_shaderCallback];
    }
    set shaderCallback(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1031, 12, "value != null");
      if (dart.equals(this[_shaderCallback], value)) return;
      this[_shaderCallback] = value;
      this.markNeedsPaint();
    }
    get blendMode() {
      return this[_blendMode];
    }
    set blendMode(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1045, 12, "value != null");
      if (dart.equals(this[_blendMode], value)) return;
      this[_blendMode] = value;
      this.markNeedsPaint();
    }
    get alwaysNeedsCompositing() {
      return this.child != null;
    }
    paint(context, offset) {
      let t1, t0;
      if (this.child != null) {
        if (!dart.test(this.needsCompositing)) dart.assertFailed(null, L1, 1058, 14, "needsCompositing");
        this.layer == null ? this.layer = new layer.ShaderMaskLayer.new() : null;
        t0 = this.layer;
        (() => {
          t0.shader = (t1 = ui.Offset.zero['&'](this.size), this[_shaderCallback](t1));
          t0.maskRect = offset['&'](this.size);
          t0.blendMode = this[_blendMode];
          return t0;
        })();
        context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), offset);
      } else {
        this.layer = null;
      }
    }
  };
  (proxy_box.RenderShaderMask.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let shaderCallback = opts && 'shaderCallback' in opts ? opts.shaderCallback : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : C5 || CT.C5;
    if (!(shaderCallback != null)) dart.assertFailed(null, L1, 1010, 15, "shaderCallback != null");
    if (!(blendMode != null)) dart.assertFailed(null, L1, 1011, 15, "blendMode != null");
    this[_shaderCallback] = shaderCallback;
    this[_blendMode] = blendMode;
    proxy_box.RenderShaderMask.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderShaderMask.prototype;
  dart.addTypeTests(proxy_box.RenderShaderMask);
  dart.addTypeCaches(proxy_box.RenderShaderMask);
  dart.setGetterSignature(proxy_box.RenderShaderMask, () => ({
    __proto__: dart.getGetters(proxy_box.RenderShaderMask.__proto__),
    layer: dart.legacy(layer.ShaderMaskLayer),
    shaderCallback: dart.legacy(dart.fnType(dart.legacy(ui.Shader), [dart.legacy(ui.Rect)])),
    blendMode: dart.legacy(ui.BlendMode)
  }));
  dart.setSetterSignature(proxy_box.RenderShaderMask, () => ({
    __proto__: dart.getSetters(proxy_box.RenderShaderMask.__proto__),
    shaderCallback: dart.legacy(dart.fnType(dart.legacy(ui.Shader), [dart.legacy(ui.Rect)])),
    blendMode: dart.legacy(ui.BlendMode)
  }));
  dart.setLibraryUri(proxy_box.RenderShaderMask, L0);
  dart.setFieldSignature(proxy_box.RenderShaderMask, () => ({
    __proto__: dart.getFields(proxy_box.RenderShaderMask.__proto__),
    [_shaderCallback]: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(ui.Shader), [dart.legacy(ui.Rect)]))),
    [_blendMode]: dart.fieldType(dart.legacy(ui.BlendMode))
  }));
  var _filter = dart.privateName(proxy_box, "_filter");
  proxy_box.RenderBackdropFilter = class RenderBackdropFilter extends proxy_box.RenderProxyBox {
    get layer() {
      return BackdropFilterLayerL().as(super.layer);
    }
    set layer(value) {
      super.layer = value;
    }
    get filter() {
      return this[_filter];
    }
    set filter(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1095, 12, "value != null");
      if (dart.equals(this[_filter], value)) return;
      this[_filter] = value;
      this.markNeedsPaint();
    }
    get alwaysNeedsCompositing() {
      return this.child != null;
    }
    paint(context, offset) {
      if (this.child != null) {
        if (!dart.test(this.needsCompositing)) dart.assertFailed(null, L1, 1108, 14, "needsCompositing");
        this.layer == null ? this.layer = new layer.BackdropFilterLayer.new() : null;
        this.layer.filter = this[_filter];
        context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), offset);
      } else {
        this.layer = null;
      }
    }
  };
  (proxy_box.RenderBackdropFilter.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let filter = opts && 'filter' in opts ? opts.filter : null;
    if (!(filter != null)) dart.assertFailed(null, L1, 1080, 14, "filter != null");
    this[_filter] = filter;
    proxy_box.RenderBackdropFilter.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderBackdropFilter.prototype;
  dart.addTypeTests(proxy_box.RenderBackdropFilter);
  dart.addTypeCaches(proxy_box.RenderBackdropFilter);
  dart.setGetterSignature(proxy_box.RenderBackdropFilter, () => ({
    __proto__: dart.getGetters(proxy_box.RenderBackdropFilter.__proto__),
    layer: dart.legacy(layer.BackdropFilterLayer),
    filter: dart.legacy(ui.ImageFilter)
  }));
  dart.setSetterSignature(proxy_box.RenderBackdropFilter, () => ({
    __proto__: dart.getSetters(proxy_box.RenderBackdropFilter.__proto__),
    filter: dart.legacy(ui.ImageFilter)
  }));
  dart.setLibraryUri(proxy_box.RenderBackdropFilter, L0);
  dart.setFieldSignature(proxy_box.RenderBackdropFilter, () => ({
    __proto__: dart.getFields(proxy_box.RenderBackdropFilter.__proto__),
    [_filter]: dart.fieldType(dart.legacy(ui.ImageFilter))
  }));
  var _reclip = dart.privateName(proxy_box, "_reclip");
  const _is_CustomClipper_default = Symbol('_is_CustomClipper_default');
  var _reclip$ = dart.privateName(proxy_box, "CustomClipper._reclip");
  proxy_box.CustomClipper$ = dart.generic(T => {
    class CustomClipper extends change_notifier.Listenable {
      get [_reclip]() {
        return this[_reclip$];
      }
      set [_reclip](value) {
        super[_reclip] = value;
      }
      addListener(listener) {
        let t0;
        t0 = this[_reclip];
        return t0 == null ? null : t0.addListener(listener);
      }
      removeListener(listener) {
        let t0;
        t0 = this[_reclip];
        return t0 == null ? null : t0.removeListener(listener);
      }
      getApproximateClipRect(size) {
        return ui.Offset.zero['&'](size);
      }
      toString() {
        return object$.objectRuntimeType(this, "CustomClipper");
      }
    }
    (CustomClipper.new = function(opts) {
      let reclip = opts && 'reclip' in opts ? opts.reclip : null;
      this[_reclip$] = reclip;
      CustomClipper.__proto__.new.call(this);
      ;
    }).prototype = CustomClipper.prototype;
    dart.addTypeTests(CustomClipper);
    CustomClipper.prototype[_is_CustomClipper_default] = true;
    dart.addTypeCaches(CustomClipper);
    dart.setMethodSignature(CustomClipper, () => ({
      __proto__: dart.getMethods(CustomClipper.__proto__),
      addListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
      removeListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
      getApproximateClipRect: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(ui.Size)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setLibraryUri(CustomClipper, L0);
    dart.setFieldSignature(CustomClipper, () => ({
      __proto__: dart.getFields(CustomClipper.__proto__),
      [_reclip]: dart.finalFieldType(dart.legacy(change_notifier.Listenable))
    }));
    dart.defineExtensionMethods(CustomClipper, ['toString']);
    return CustomClipper;
  });
  proxy_box.CustomClipper = proxy_box.CustomClipper$();
  dart.addTypeTests(proxy_box.CustomClipper, _is_CustomClipper_default);
  var shape$ = dart.privateName(proxy_box, "ShapeBorderClipper.shape");
  var textDirection$ = dart.privateName(proxy_box, "ShapeBorderClipper.textDirection");
  proxy_box.ShapeBorderClipper = class ShapeBorderClipper extends proxy_box.CustomClipper$(dart.legacy(ui.Path)) {
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    getClip(size) {
      return this.shape.getOuterPath(ui.Offset.zero['&'](size), {textDirection: this.textDirection});
    }
    shouldReclip(oldClipper) {
      CustomClipperLOfPathL().as(oldClipper);
      if (!dart.equals(dart.runtimeType(oldClipper), dart.wrapType(ShapeBorderClipperL()))) return true;
      let typedOldClipper = ShapeBorderClipperL().as(oldClipper);
      return !dart.equals(typedOldClipper.shape, this.shape) || !dart.equals(typedOldClipper.textDirection, this.textDirection);
    }
  };
  (proxy_box.ShapeBorderClipper.new = function(opts) {
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[shape$] = shape;
    this[textDirection$] = textDirection;
    if (!(shape != null)) dart.assertFailed(null, L1, 1214, 15, "shape != null");
    proxy_box.ShapeBorderClipper.__proto__.new.call(this);
    ;
  }).prototype = proxy_box.ShapeBorderClipper.prototype;
  dart.addTypeTests(proxy_box.ShapeBorderClipper);
  dart.addTypeCaches(proxy_box.ShapeBorderClipper);
  dart.setMethodSignature(proxy_box.ShapeBorderClipper, () => ({
    __proto__: dart.getMethods(proxy_box.ShapeBorderClipper.__proto__),
    getClip: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size)]),
    shouldReclip: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(proxy_box.ShapeBorderClipper, L0);
  dart.setFieldSignature(proxy_box.ShapeBorderClipper, () => ({
    __proto__: dart.getFields(proxy_box.ShapeBorderClipper.__proto__),
    shape: dart.finalFieldType(dart.legacy(borders.ShapeBorder)),
    textDirection: dart.finalFieldType(dart.legacy(ui.TextDirection))
  }));
  var C6;
  var _clip = dart.privateName(proxy_box, "_clip");
  var _debugPaint = dart.privateName(proxy_box, "_debugPaint");
  var _debugText = dart.privateName(proxy_box, "_debugText");
  var _clipper = dart.privateName(proxy_box, "_clipper");
  var _clipBehavior = dart.privateName(proxy_box, "_clipBehavior");
  var _markNeedsClip = dart.privateName(proxy_box, "_markNeedsClip");
  var _defaultClip = dart.privateName(proxy_box, "_defaultClip");
  var _updateClip = dart.privateName(proxy_box, "_updateClip");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C7;
  var C8;
  var C9;
  var C10;
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var C12;
  var InlineSpan_style = dart.privateName(inline_span, "InlineSpan.style");
  var TextSpan_semanticsLabel = dart.privateName(text_span, "TextSpan.semanticsLabel");
  var TextSpan_recognizer = dart.privateName(text_span, "TextSpan.recognizer");
  var TextSpan_children = dart.privateName(text_span, "TextSpan.children");
  var TextSpan_text = dart.privateName(text_span, "TextSpan.text");
  var C11;
  const _is__RenderCustomClip_default = Symbol('_is__RenderCustomClip_default');
  proxy_box._RenderCustomClip$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var CustomClipperOfTL = () => (CustomClipperOfTL = dart.constFn(proxy_box.CustomClipper$(TL())))();
    var CustomClipperLOfTL = () => (CustomClipperLOfTL = dart.constFn(dart.legacy(CustomClipperOfTL())))();
    class _RenderCustomClip extends proxy_box.RenderProxyBox {
      get clipper() {
        return this[_clipper];
      }
      set clipper(newClipper) {
        let t0, t0$;
        CustomClipperLOfTL().as(newClipper);
        if (dart.equals(this[_clipper], newClipper)) return;
        let oldClipper = this[_clipper];
        this[_clipper] = newClipper;
        if (!(newClipper != null || oldClipper != null)) dart.assertFailed(null, L1, 1259, 12, "newClipper != null || oldClipper != null");
        if (newClipper == null || oldClipper == null || !dart.equals(dart.runtimeType(newClipper), dart.runtimeType(oldClipper)) || dart.test(newClipper.shouldReclip(oldClipper))) {
          this[_markNeedsClip]();
        }
        if (dart.test(this.attached)) {
          t0 = oldClipper;
          t0 == null ? null : t0.removeListener(dart.bind(this, _markNeedsClip));
          t0$ = newClipper;
          t0$ == null ? null : t0$.addListener(dart.bind(this, _markNeedsClip));
        }
      }
      attach(owner) {
        let t0;
        PipelineOwnerL().as(owner);
        super.attach(owner);
        t0 = this[_clipper];
        t0 == null ? null : t0.addListener(dart.bind(this, _markNeedsClip));
      }
      detach() {
        let t0;
        t0 = this[_clipper];
        t0 == null ? null : t0.removeListener(dart.bind(this, _markNeedsClip));
        super.detach();
      }
      [_markNeedsClip]() {
        this[_clip] = null;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
      get clipBehavior() {
        return this[_clipBehavior];
      }
      set clipBehavior(value) {
        if (!dart.equals(value, this[_clipBehavior])) {
          this[_clipBehavior] = value;
          this.markNeedsPaint();
        }
      }
      performLayout() {
        let oldSize = dart.test(this.hasSize) ? this.size : null;
        super.performLayout();
        if (!dart.equals(oldSize, this.size)) this[_clip] = null;
      }
      [_updateClip]() {
        let t0, t0$;
        this[_clip] == null ? this[_clip] = (t0$ = (t0 = this[_clipper], t0 == null ? null : t0.getClip(this.size)), t0$ == null ? this[_defaultClip] : t0$) : null;
      }
      describeApproximatePaintClip(child) {
        let t0, t0$;
        RenderObjectL().as(child);
        t0$ = (t0 = this[_clipper], t0 == null ? null : t0.getApproximateClipRect(this.size));
        return t0$ == null ? ui.Offset.zero['&'](this.size) : t0$;
      }
      debugPaintSize(context, offset) {
        if (!dart.test(dart.fn(() => {
          let t0, t0$;
          this[_debugPaint] == null ? this[_debugPaint] = (t0 = ui.Paint.new(), (() => {
            t0.shader = ui.Gradient.linear(C7 || CT.C7, C8 || CT.C8, JSArrayOfColorL().of([C9 || CT.C9, C10 || CT.C10, C10 || CT.C10, C9 || CT.C9]), JSArrayOfdoubleL().of([0.25, 0.25, 0.75, 0.75]), ui.TileMode.repeated);
            t0.strokeWidth = 2.0;
            t0.style = ui.PaintingStyle.stroke;
            return t0;
          })()) : null;
          this[_debugText] == null ? this[_debugText] = (t0$ = new text_painter.TextPainter.new({text: C11 || CT.C11, textDirection: ui.TextDirection.rtl}), (() => {
            t0$.layout();
            return t0$;
          })()) : null;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 1322, 12, "() {\r\n      _debugPaint ??= Paint()\r\n        ..shader = ui.Gradient.linear(\r\n          const Offset(0.0, 0.0),\r\n          const Offset(10.0, 10.0),\r\n          <Color>[const Color(0x00000000), const Color(0xFFFF00FF), const Color(0xFFFF00FF), const Color(0x00000000)],\r\n          <double>[0.25, 0.25, 0.75, 0.75],\r\n          TileMode.repeated,\r\n        )\r\n        ..strokeWidth = 2.0\r\n        ..style = PaintingStyle.stroke;\r\n      _debugText ??= TextPainter(\r\n        text: const TextSpan(\r\n          text: '✂',\r\n          style: TextStyle(\r\n            color: Color(0xFFFF00FF),\r\n              fontSize: 14.0,\r\n            ),\r\n          ),\r\n          textDirection: TextDirection.rtl, // doesn't matter, it's one character\r\n        )\r\n        ..layout();\r\n      return true;\r\n    }()");
      }
    }
    (_RenderCustomClip.new = function(opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let clipper = opts && 'clipper' in opts ? opts.clipper : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C6 || CT.C6;
      this[_clip] = null;
      this[_debugPaint] = null;
      this[_debugText] = null;
      if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1246, 15, "clipBehavior != null");
      this[_clipper] = clipper;
      this[_clipBehavior] = clipBehavior;
      _RenderCustomClip.__proto__.new.call(this, child);
      ;
    }).prototype = _RenderCustomClip.prototype;
    dart.addTypeTests(_RenderCustomClip);
    _RenderCustomClip.prototype[_is__RenderCustomClip_default] = true;
    dart.addTypeCaches(_RenderCustomClip);
    dart.setMethodSignature(_RenderCustomClip, () => ({
      __proto__: dart.getMethods(_RenderCustomClip.__proto__),
      [_markNeedsClip]: dart.fnType(dart.void, []),
      [_updateClip]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_RenderCustomClip, () => ({
      __proto__: dart.getGetters(_RenderCustomClip.__proto__),
      clipper: dart.legacy(proxy_box.CustomClipper$(dart.legacy(T))),
      clipBehavior: dart.legacy(ui.Clip)
    }));
    dart.setSetterSignature(_RenderCustomClip, () => ({
      __proto__: dart.getSetters(_RenderCustomClip.__proto__),
      clipper: dart.legacy(core.Object),
      clipBehavior: dart.legacy(ui.Clip)
    }));
    dart.setLibraryUri(_RenderCustomClip, L0);
    dart.setFieldSignature(_RenderCustomClip, () => ({
      __proto__: dart.getFields(_RenderCustomClip.__proto__),
      [_clipper]: dart.fieldType(dart.legacy(proxy_box.CustomClipper$(dart.legacy(T)))),
      [_clip]: dart.fieldType(dart.legacy(T)),
      [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip)),
      [_debugPaint]: dart.fieldType(dart.legacy(ui.Paint)),
      [_debugText]: dart.fieldType(dart.legacy(text_painter.TextPainter))
    }));
    return _RenderCustomClip;
  });
  proxy_box._RenderCustomClip = proxy_box._RenderCustomClip$();
  dart.addTypeTests(proxy_box._RenderCustomClip, _is__RenderCustomClip_default);
  proxy_box.RenderClipRect = class RenderClipRect extends proxy_box._RenderCustomClip$(dart.legacy(ui.Rect)) {
    get [_defaultClip]() {
      return ui.Offset.zero['&'](this.size);
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_clipper] != null) {
        this[_updateClip]();
        if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1376, 14, "_clip != null");
        if (!dart.test(this[_clip].contains(position))) return false;
      }
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      if (this.child != null) {
        this[_updateClip]();
        this.layer = context.pushClipRect(this.needsCompositing, offset, this[_clip], dart.bind(this, 'paint', super.paint), {clipBehavior: this.clipBehavior, oldLayer: ClipRectLayerL().as(this.layer)});
      } else {
        this.layer = null;
      }
    }
    debugPaintSize(context, offset) {
      if (!dart.test(dart.fn(() => {
        if (this.child != null) {
          super.debugPaintSize(context, offset);
          context.canvas.drawRect(this[_clip].shift(offset), this[_debugPaint]);
          this[_debugText].paint(context.canvas, offset['+'](new ui.Offset.new(dart.notNull(this[_clip].width) / 8.0, -dart.notNull(this[_debugText].text.style.fontSize) * 1.1)));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 1402, 12, "() {\r\n      if (child != null) {\r\n        super.debugPaintSize(context, offset);\r\n        context.canvas.drawRect(_clip.shift(offset), _debugPaint);\r\n        _debugText.paint(context.canvas, offset + Offset(_clip.width / 8.0, -_debugText.text.style.fontSize * 1.1));\r\n      }\r\n      return true;\r\n    }()");
    }
  };
  (proxy_box.RenderClipRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let clipper = opts && 'clipper' in opts ? opts.clipper : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C6 || CT.C6;
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1365, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L1, 1366, 15, "clipBehavior != Clip.none");
    proxy_box.RenderClipRect.__proto__.new.call(this, {child: child, clipper: clipper, clipBehavior: clipBehavior});
    ;
  }).prototype = proxy_box.RenderClipRect.prototype;
  dart.addTypeTests(proxy_box.RenderClipRect);
  dart.addTypeCaches(proxy_box.RenderClipRect);
  dart.setGetterSignature(proxy_box.RenderClipRect, () => ({
    __proto__: dart.getGetters(proxy_box.RenderClipRect.__proto__),
    [_defaultClip]: dart.legacy(ui.Rect)
  }));
  dart.setLibraryUri(proxy_box.RenderClipRect, L0);
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var C14;
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var C13;
  var _borderRadius = dart.privateName(proxy_box, "_borderRadius");
  proxy_box.RenderClipRRect = class RenderClipRRect extends proxy_box._RenderCustomClip$(dart.legacy(ui.RRect)) {
    get borderRadius() {
      return this[_borderRadius];
    }
    set borderRadius(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1448, 12, "value != null");
      if (dart.equals(this[_borderRadius], value)) return;
      this[_borderRadius] = value;
      this[_markNeedsClip]();
    }
    get [_defaultClip]() {
      return this[_borderRadius].toRRect(ui.Offset.zero['&'](this.size));
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_clipper] != null) {
        this[_updateClip]();
        if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1462, 14, "_clip != null");
        if (!dart.test(this[_clip].contains(position))) return false;
      }
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      if (this.child != null) {
        this[_updateClip]();
        this.layer = context.pushClipRRect(this.needsCompositing, offset, this[_clip].outerRect, this[_clip], dart.bind(this, 'paint', super.paint), {clipBehavior: this.clipBehavior, oldLayer: ClipRRectLayerL().as(this.layer)});
      } else {
        this.layer = null;
      }
    }
    debugPaintSize(context, offset) {
      if (!dart.test(dart.fn(() => {
        if (this.child != null) {
          super.debugPaintSize(context, offset);
          context.canvas.drawRRect(this[_clip].shift(offset), this[_debugPaint]);
          this[_debugText].paint(context.canvas, offset['+'](new ui.Offset.new(this[_clip].tlRadiusX, -dart.notNull(this[_debugText].text.style.fontSize) * 1.1)));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 1487, 12, "() {\r\n      if (child != null) {\r\n        super.debugPaintSize(context, offset);\r\n        context.canvas.drawRRect(_clip.shift(offset), _debugPaint);\r\n        _debugText.paint(context.canvas, offset + Offset(_clip.tlRadiusX, -_debugText.text.style.fontSize * 1.1));\r\n      }\r\n      return true;\r\n    }()");
    }
  };
  (proxy_box.RenderClipRRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C13 || CT.C13;
    let clipper = opts && 'clipper' in opts ? opts.clipper : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C6 || CT.C6;
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1432, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L1, 1433, 15, "clipBehavior != Clip.none");
    this[_borderRadius] = borderRadius;
    proxy_box.RenderClipRRect.__proto__.new.call(this, {child: child, clipper: clipper, clipBehavior: clipBehavior});
    if (!(this[_borderRadius] != null || clipper != null)) dart.assertFailed(null, L1, 1436, 12, "_borderRadius != null || clipper != null");
  }).prototype = proxy_box.RenderClipRRect.prototype;
  dart.addTypeTests(proxy_box.RenderClipRRect);
  dart.addTypeCaches(proxy_box.RenderClipRRect);
  dart.setGetterSignature(proxy_box.RenderClipRRect, () => ({
    __proto__: dart.getGetters(proxy_box.RenderClipRRect.__proto__),
    borderRadius: dart.legacy(border_radius.BorderRadius),
    [_defaultClip]: dart.legacy(ui.RRect)
  }));
  dart.setSetterSignature(proxy_box.RenderClipRRect, () => ({
    __proto__: dart.getSetters(proxy_box.RenderClipRRect.__proto__),
    borderRadius: dart.legacy(border_radius.BorderRadius)
  }));
  dart.setLibraryUri(proxy_box.RenderClipRRect, L0);
  dart.setFieldSignature(proxy_box.RenderClipRRect, () => ({
    __proto__: dart.getFields(proxy_box.RenderClipRRect.__proto__),
    [_borderRadius]: dart.fieldType(dart.legacy(border_radius.BorderRadius))
  }));
  var _cachedRect = dart.privateName(proxy_box, "_cachedRect");
  var _cachedPath = dart.privateName(proxy_box, "_cachedPath");
  var _getClipPath = dart.privateName(proxy_box, "_getClipPath");
  proxy_box.RenderClipOval = class RenderClipOval extends proxy_box._RenderCustomClip$(dart.legacy(ui.Rect)) {
    [_getClipPath](rect) {
      let t0;
      if (!dart.equals(rect, this[_cachedRect])) {
        this[_cachedRect] = rect;
        this[_cachedPath] = (t0 = ui.Path.new(), (() => {
          t0.addOval(this[_cachedRect]);
          return t0;
        })());
      }
      return this[_cachedPath];
    }
    get [_defaultClip]() {
      return ui.Offset.zero['&'](this.size);
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      this[_updateClip]();
      if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1535, 12, "_clip != null");
      let center = this[_clip].center;
      let offset = new ui.Offset.new((dart.notNull(position.dx) - dart.notNull(center.dx)) / dart.notNull(this[_clip].width), (dart.notNull(position.dy) - dart.notNull(center.dy)) / dart.notNull(this[_clip].height));
      if (dart.notNull(offset.distanceSquared) > 0.25) return false;
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      if (this.child != null) {
        this[_updateClip]();
        this.layer = context.pushClipPath(this.needsCompositing, offset, this[_clip], this[_getClipPath](this[_clip]), dart.bind(this, 'paint', super.paint), {clipBehavior: this.clipBehavior, oldLayer: ClipPathLayerL().as(this.layer)});
      } else {
        this.layer = null;
      }
    }
    debugPaintSize(context, offset) {
      if (!dart.test(dart.fn(() => {
        if (this.child != null) {
          super.debugPaintSize(context, offset);
          context.canvas.drawPath(this[_getClipPath](this[_clip]).shift(offset), this[_debugPaint]);
          this[_debugText].paint(context.canvas, offset['+'](new ui.Offset.new((dart.notNull(this[_clip].width) - dart.notNull(this[_debugText].width)) / 2.0, -dart.notNull(this[_debugText].text.style.fontSize) * 1.1)));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 1566, 12, "() {\r\n      if (child != null) {\r\n        super.debugPaintSize(context, offset);\r\n        context.canvas.drawPath(_getClipPath(_clip).shift(offset), _debugPaint);\r\n        _debugText.paint(context.canvas, offset + Offset((_clip.width - _debugText.width) / 2.0, -_debugText.text.style.fontSize * 1.1));\r\n      }\r\n      return true;\r\n    }()");
    }
  };
  (proxy_box.RenderClipOval.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let clipper = opts && 'clipper' in opts ? opts.clipper : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C6 || CT.C6;
    this[_cachedRect] = null;
    this[_cachedPath] = null;
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1514, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L1, 1515, 15, "clipBehavior != Clip.none");
    proxy_box.RenderClipOval.__proto__.new.call(this, {child: child, clipper: clipper, clipBehavior: clipBehavior});
    ;
  }).prototype = proxy_box.RenderClipOval.prototype;
  dart.addTypeTests(proxy_box.RenderClipOval);
  dart.addTypeCaches(proxy_box.RenderClipOval);
  dart.setMethodSignature(proxy_box.RenderClipOval, () => ({
    __proto__: dart.getMethods(proxy_box.RenderClipOval.__proto__),
    [_getClipPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Rect)])
  }));
  dart.setGetterSignature(proxy_box.RenderClipOval, () => ({
    __proto__: dart.getGetters(proxy_box.RenderClipOval.__proto__),
    [_defaultClip]: dart.legacy(ui.Rect)
  }));
  dart.setLibraryUri(proxy_box.RenderClipOval, L0);
  dart.setFieldSignature(proxy_box.RenderClipOval, () => ({
    __proto__: dart.getFields(proxy_box.RenderClipOval.__proto__),
    [_cachedRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_cachedPath]: dart.fieldType(dart.legacy(ui.Path))
  }));
  proxy_box.RenderClipPath = class RenderClipPath extends proxy_box._RenderCustomClip$(dart.legacy(ui.Path)) {
    get [_defaultClip]() {
      let t0;
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(ui.Offset.zero['&'](this.size));
        return t0;
      })();
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_clipper] != null) {
        this[_updateClip]();
        if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1612, 14, "_clip != null");
        if (!dart.test(this[_clip].contains(position))) return false;
      }
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      if (this.child != null) {
        this[_updateClip]();
        this.layer = context.pushClipPath(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), this[_clip], dart.bind(this, 'paint', super.paint), {clipBehavior: this.clipBehavior, oldLayer: ClipPathLayerL().as(this.layer)});
      } else {
        this.layer = null;
      }
    }
    debugPaintSize(context, offset) {
      if (!dart.test(dart.fn(() => {
        if (this.child != null) {
          super.debugPaintSize(context, offset);
          context.canvas.drawPath(this[_clip].shift(offset), this[_debugPaint]);
          this[_debugText].paint(context.canvas, offset);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 1639, 12, "() {\r\n      if (child != null) {\r\n        super.debugPaintSize(context, offset);\r\n        context.canvas.drawPath(_clip.shift(offset), _debugPaint);\r\n        _debugText.paint(context.canvas, offset);\r\n      }\r\n      return true;\r\n    }()");
    }
  };
  (proxy_box.RenderClipPath.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let clipper = opts && 'clipper' in opts ? opts.clipper : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C6 || CT.C6;
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1601, 15, "clipBehavior != null");
    if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, L1, 1602, 15, "clipBehavior != Clip.none");
    proxy_box.RenderClipPath.__proto__.new.call(this, {child: child, clipper: clipper, clipBehavior: clipBehavior});
    ;
  }).prototype = proxy_box.RenderClipPath.prototype;
  dart.addTypeTests(proxy_box.RenderClipPath);
  dart.addTypeCaches(proxy_box.RenderClipPath);
  dart.setGetterSignature(proxy_box.RenderClipPath, () => ({
    __proto__: dart.getGetters(proxy_box.RenderClipPath.__proto__),
    [_defaultClip]: dart.legacy(ui.Path)
  }));
  dart.setLibraryUri(proxy_box.RenderClipPath, L0);
  var C15;
  var _elevation = dart.privateName(proxy_box, "_elevation");
  var _color = dart.privateName(proxy_box, "_color");
  var _shadowColor = dart.privateName(proxy_box, "_shadowColor");
  const _is__RenderPhysicalModelBase_default = Symbol('_is__RenderPhysicalModelBase_default');
  proxy_box._RenderPhysicalModelBase$ = dart.generic(T => {
    class _RenderPhysicalModelBase extends proxy_box._RenderCustomClip$(dart.legacy(T)) {
      get elevation() {
        return this[_elevation];
      }
      set elevation(value) {
        if (!(value != null && dart.notNull(value) >= 0.0)) dart.assertFailed(null, L1, 1682, 12, "value != null && value >= 0.0");
        if (this.elevation == value) return;
        let didNeedCompositing = this.alwaysNeedsCompositing;
        this[_elevation] = value;
        if (!dart.equals(didNeedCompositing, this.alwaysNeedsCompositing)) this.markNeedsCompositingBitsUpdate();
        this.markNeedsPaint();
      }
      get shadowColor() {
        return this[_shadowColor];
      }
      set shadowColor(value) {
        if (!(value != null)) dart.assertFailed(null, L1, 1696, 12, "value != null");
        if (dart.equals(this.shadowColor, value)) return;
        this[_shadowColor] = value;
        this.markNeedsPaint();
      }
      get color() {
        return this[_color];
      }
      set color(value) {
        if (!(value != null)) dart.assertFailed(null, L1, 1707, 12, "value != null");
        if (dart.equals(this.color, value)) return;
        this[_color] = value;
        this.markNeedsPaint();
      }
      get alwaysNeedsCompositing() {
        return true;
      }
      describeSemanticsConfiguration(config) {
        super.describeSemanticsConfiguration(config);
        config.elevation = this.elevation;
      }
      debugFillProperties(description) {
        super.debugFillProperties(description);
        description.add(new diagnostics.DoubleProperty.new("elevation", this.elevation));
        description.add(new colors.ColorProperty.new("color", this.color));
        description.add(new colors.ColorProperty.new("shadowColor", this.color));
      }
    }
    (_RenderPhysicalModelBase.new = function(opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C15 || CT.C15;
      let clipper = opts && 'clipper' in opts ? opts.clipper : null;
      if (!(elevation != null && dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, L1, 1664, 15, "elevation != null && elevation >= 0.0");
      if (!(color != null)) dart.assertFailed(null, L1, 1665, 15, "color != null");
      if (!(shadowColor != null)) dart.assertFailed(null, L1, 1666, 15, "shadowColor != null");
      if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1667, 15, "clipBehavior != null");
      this[_elevation] = elevation;
      this[_color] = color;
      this[_shadowColor] = shadowColor;
      _RenderPhysicalModelBase.__proto__.new.call(this, {child: child, clipBehavior: clipBehavior, clipper: clipper});
      ;
    }).prototype = _RenderPhysicalModelBase.prototype;
    dart.addTypeTests(_RenderPhysicalModelBase);
    _RenderPhysicalModelBase.prototype[_is__RenderPhysicalModelBase_default] = true;
    dart.addTypeCaches(_RenderPhysicalModelBase);
    dart.setGetterSignature(_RenderPhysicalModelBase, () => ({
      __proto__: dart.getGetters(_RenderPhysicalModelBase.__proto__),
      elevation: dart.legacy(core.double),
      shadowColor: dart.legacy(ui.Color),
      color: dart.legacy(ui.Color)
    }));
    dart.setSetterSignature(_RenderPhysicalModelBase, () => ({
      __proto__: dart.getSetters(_RenderPhysicalModelBase.__proto__),
      elevation: dart.legacy(core.double),
      shadowColor: dart.legacy(ui.Color),
      color: dart.legacy(ui.Color)
    }));
    dart.setLibraryUri(_RenderPhysicalModelBase, L0);
    dart.setFieldSignature(_RenderPhysicalModelBase, () => ({
      __proto__: dart.getFields(_RenderPhysicalModelBase.__proto__),
      [_elevation]: dart.fieldType(dart.legacy(core.double)),
      [_shadowColor]: dart.fieldType(dart.legacy(ui.Color)),
      [_color]: dart.fieldType(dart.legacy(ui.Color))
    }));
    return _RenderPhysicalModelBase;
  });
  proxy_box._RenderPhysicalModelBase = proxy_box._RenderPhysicalModelBase$();
  dart.addTypeTests(proxy_box._RenderPhysicalModelBase, _is__RenderPhysicalModelBase_default);
  var _name$0 = dart.privateName(box_border, "_name");
  var C16;
  var C17;
  var _shape = dart.privateName(proxy_box, "_shape");
  var C18;
  proxy_box.RenderPhysicalModel = class RenderPhysicalModel extends proxy_box._RenderPhysicalModelBase$(dart.legacy(ui.RRect)) {
    get layer() {
      return PhysicalModelLayerL().as(super.layer);
    }
    set layer(value) {
      super.layer = value;
    }
    get shape() {
      return this[_shape];
    }
    set shape(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1777, 12, "value != null");
      if (this.shape == value) return;
      this[_shape] = value;
      this[_markNeedsClip]();
    }
    get borderRadius() {
      return this[_borderRadius];
    }
    set borderRadius(value) {
      if (dart.equals(this.borderRadius, value)) return;
      this[_borderRadius] = value;
      this[_markNeedsClip]();
    }
    get [_defaultClip]() {
      let t0;
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L1, 1803, 12, "hasSize");
      if (!(this[_shape] != null)) dart.assertFailed(null, L1, 1804, 12, "_shape != null");
      switch (this[_shape]) {
        case C16 || CT.C16:
        {
          return (t0 = this.borderRadius, t0 == null ? border_radius.BorderRadius.zero : t0).toRRect(ui.Offset.zero['&'](this.size));
        }
        case C18 || CT.C18:
        {
          let rect = ui.Offset.zero['&'](this.size);
          return new ui.RRect.fromRectXY(rect, dart.notNull(rect.width) / 2, dart.notNull(rect.height) / 2);
        }
      }
      return null;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_clipper] != null) {
        this[_updateClip]();
        if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1819, 14, "_clip != null");
        if (!dart.test(this[_clip].contains(position))) return false;
      }
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      let t0, t0$;
      if (this.child != null) {
        this[_updateClip]();
        let offsetRRect = this[_clip].shift(offset);
        let offsetBounds = offsetRRect.outerRect;
        let offsetRRectAsPath = (t0 = ui.Path.new(), (() => {
          t0.addRRect(offsetRRect);
          return t0;
        })());
        let paintShadows = true;
        if (!dart.test(dart.fn(() => {
          let t0;
          if (dart.test(debug.debugDisableShadows)) {
            if (dart.notNull(this.elevation) > 0.0) {
              context.canvas.drawRRect(offsetRRect, (t0 = ui.Paint.new(), (() => {
                t0.color = this.shadowColor;
                t0.style = ui.PaintingStyle.stroke;
                t0.strokeWidth = dart.notNull(this.elevation) * 2.0;
                return t0;
              })()));
            }
            paintShadows = false;
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 1834, 14, "() {\r\n        if (debugDisableShadows) {\r\n          if (elevation > 0.0) {\r\n            context.canvas.drawRRect(\r\n              offsetRRect,\r\n              Paint()\r\n                ..color = shadowColor\r\n                ..style = PaintingStyle.stroke\r\n                ..strokeWidth = elevation * 2.0,\r\n            );\r\n          }\r\n          paintShadows = false;\r\n        }\r\n        return true;\r\n      }()");
        this.layer == null ? this.layer = new layer.PhysicalModelLayer.new() : null;
        t0$ = this.layer;
        (() => {
          t0$.clipPath = offsetRRectAsPath;
          t0$.clipBehavior = this.clipBehavior;
          t0$.elevation = paintShadows ? this.elevation : 0.0;
          t0$.color = this.color;
          t0$.shadowColor = this.shadowColor;
          return t0$;
        })();
        context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), offset, {childPaintBounds: offsetBounds});
        if (!dart.test(dart.fn(() => {
          this.layer.debugCreator = this.debugCreator;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 1857, 14, "() {\r\n        layer.debugCreator = debugCreator;\r\n        return true;\r\n      }()");
      } else {
        this.layer = null;
      }
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (DiagnosticsPropertyOfBoxShapeL()).new("shape", this.shape));
      description.add(new (DiagnosticsPropertyOfBorderRadiusL()).new("borderRadius", this.borderRadius));
    }
  };
  (proxy_box.RenderPhysicalModel.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let shape = opts && 'shape' in opts ? opts.shape : C16 || CT.C16;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C15 || CT.C15;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : 0;
    let color = opts && 'color' in opts ? opts.color : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : C17 || CT.C17;
    if (!(shape != null)) dart.assertFailed(null, L1, 1752, 15, "shape != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 1753, 15, "clipBehavior != null");
    if (!(elevation != null && dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, L1, 1754, 15, "elevation != null && elevation >= 0.0");
    if (!(color != null)) dart.assertFailed(null, L1, 1755, 15, "color != null");
    if (!(shadowColor != null)) dart.assertFailed(null, L1, 1756, 15, "shadowColor != null");
    this[_shape] = shape;
    this[_borderRadius] = borderRadius;
    proxy_box.RenderPhysicalModel.__proto__.new.call(this, {clipBehavior: clipBehavior, child: child, elevation: elevation, color: color, shadowColor: shadowColor});
    ;
  }).prototype = proxy_box.RenderPhysicalModel.prototype;
  dart.addTypeTests(proxy_box.RenderPhysicalModel);
  dart.addTypeCaches(proxy_box.RenderPhysicalModel);
  dart.setGetterSignature(proxy_box.RenderPhysicalModel, () => ({
    __proto__: dart.getGetters(proxy_box.RenderPhysicalModel.__proto__),
    layer: dart.legacy(layer.PhysicalModelLayer),
    shape: dart.legacy(box_border.BoxShape),
    borderRadius: dart.legacy(border_radius.BorderRadius),
    [_defaultClip]: dart.legacy(ui.RRect)
  }));
  dart.setSetterSignature(proxy_box.RenderPhysicalModel, () => ({
    __proto__: dart.getSetters(proxy_box.RenderPhysicalModel.__proto__),
    shape: dart.legacy(box_border.BoxShape),
    borderRadius: dart.legacy(border_radius.BorderRadius)
  }));
  dart.setLibraryUri(proxy_box.RenderPhysicalModel, L0);
  dart.setFieldSignature(proxy_box.RenderPhysicalModel, () => ({
    __proto__: dart.getFields(proxy_box.RenderPhysicalModel.__proto__),
    [_shape]: dart.fieldType(dart.legacy(box_border.BoxShape)),
    [_borderRadius]: dart.fieldType(dart.legacy(border_radius.BorderRadius))
  }));
  proxy_box.RenderPhysicalShape = class RenderPhysicalShape extends proxy_box._RenderPhysicalModelBase$(dart.legacy(ui.Path)) {
    get layer() {
      return PhysicalModelLayerL().as(super.layer);
    }
    set layer(value) {
      super.layer = value;
    }
    get [_defaultClip]() {
      let t0;
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(ui.Offset.zero['&'](this.size));
        return t0;
      })();
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_clipper] != null) {
        this[_updateClip]();
        if (!(this[_clip] != null)) dart.assertFailed(null, L1, 1919, 14, "_clip != null");
        if (!dart.test(this[_clip].contains(position))) return false;
      }
      return super.hitTest(result, {position: position});
    }
    paint(context, offset) {
      let t0;
      if (this.child != null) {
        this[_updateClip]();
        let offsetBounds = offset['&'](this.size);
        let offsetPath = this[_clip].shift(offset);
        let paintShadows = true;
        if (!dart.test(dart.fn(() => {
          let t0;
          if (dart.test(debug.debugDisableShadows)) {
            if (dart.notNull(this.elevation) > 0.0) {
              context.canvas.drawPath(offsetPath, (t0 = ui.Paint.new(), (() => {
                t0.color = this.shadowColor;
                t0.style = ui.PaintingStyle.stroke;
                t0.strokeWidth = dart.notNull(this.elevation) * 2.0;
                return t0;
              })()));
            }
            paintShadows = false;
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 1933, 14, "() {\r\n        if (debugDisableShadows) {\r\n          if (elevation > 0.0) {\r\n            context.canvas.drawPath(\r\n              offsetPath,\r\n              Paint()\r\n                ..color = shadowColor\r\n                ..style = PaintingStyle.stroke\r\n                ..strokeWidth = elevation * 2.0,\r\n            );\r\n          }\r\n          paintShadows = false;\r\n        }\r\n        return true;\r\n      }()");
        this.layer == null ? this.layer = new layer.PhysicalModelLayer.new() : null;
        t0 = this.layer;
        (() => {
          t0.clipPath = offsetPath;
          t0.clipBehavior = this.clipBehavior;
          t0.elevation = paintShadows ? this.elevation : 0.0;
          t0.color = this.color;
          t0.shadowColor = this.shadowColor;
          return t0;
        })();
        context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), offset, {childPaintBounds: offsetBounds});
        if (!dart.test(dart.fn(() => {
          this.layer.debugCreator = this.debugCreator;
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 1956, 14, "() {\r\n        layer.debugCreator = debugCreator;\r\n        return true;\r\n      }()");
      } else {
        this.layer = null;
      }
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (DiagnosticsPropertyOfCustomClipperLOfPathL()).new("clipper", this.clipper));
    }
  };
  (proxy_box.RenderPhysicalShape.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let clipper = opts && 'clipper' in opts ? opts.clipper : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C15 || CT.C15;
    let elevation = opts && 'elevation' in opts ? opts.elevation : 0;
    let color = opts && 'color' in opts ? opts.color : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : C17 || CT.C17;
    if (!(clipper != null)) dart.assertFailed(null, L1, 1896, 15, "clipper != null");
    if (!(elevation != null && dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, L1, 1897, 15, "elevation != null && elevation >= 0.0");
    if (!(color != null)) dart.assertFailed(null, L1, 1898, 15, "color != null");
    if (!(shadowColor != null)) dart.assertFailed(null, L1, 1899, 15, "shadowColor != null");
    proxy_box.RenderPhysicalShape.__proto__.new.call(this, {child: child, elevation: elevation, color: color, shadowColor: shadowColor, clipper: clipper, clipBehavior: clipBehavior});
    ;
  }).prototype = proxy_box.RenderPhysicalShape.prototype;
  dart.addTypeTests(proxy_box.RenderPhysicalShape);
  dart.addTypeCaches(proxy_box.RenderPhysicalShape);
  dart.setGetterSignature(proxy_box.RenderPhysicalShape, () => ({
    __proto__: dart.getGetters(proxy_box.RenderPhysicalShape.__proto__),
    layer: dart.legacy(layer.PhysicalModelLayer),
    [_defaultClip]: dart.legacy(ui.Path)
  }));
  dart.setLibraryUri(proxy_box.RenderPhysicalShape, L0);
  var C19;
  var C20;
  var C21;
  proxy_box.DecorationPosition = class DecorationPosition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (proxy_box.DecorationPosition.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = proxy_box.DecorationPosition.prototype;
  dart.addTypeTests(proxy_box.DecorationPosition);
  dart.addTypeCaches(proxy_box.DecorationPosition);
  dart.setMethodSignature(proxy_box.DecorationPosition, () => ({
    __proto__: dart.getMethods(proxy_box.DecorationPosition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(proxy_box.DecorationPosition, L0);
  dart.setFieldSignature(proxy_box.DecorationPosition, () => ({
    __proto__: dart.getFields(proxy_box.DecorationPosition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(proxy_box.DecorationPosition, ['toString']);
  proxy_box.DecorationPosition.background = C19 || CT.C19;
  proxy_box.DecorationPosition.foreground = C20 || CT.C20;
  proxy_box.DecorationPosition.values = C21 || CT.C21;
  var ImageConfiguration_platform = dart.privateName(image_provider, "ImageConfiguration.platform");
  var ImageConfiguration_size = dart.privateName(image_provider, "ImageConfiguration.size");
  var ImageConfiguration_textDirection = dart.privateName(image_provider, "ImageConfiguration.textDirection");
  var ImageConfiguration_locale = dart.privateName(image_provider, "ImageConfiguration.locale");
  var ImageConfiguration_devicePixelRatio = dart.privateName(image_provider, "ImageConfiguration.devicePixelRatio");
  var ImageConfiguration_bundle = dart.privateName(image_provider, "ImageConfiguration.bundle");
  var C22;
  var _painter = dart.privateName(proxy_box, "_painter");
  var _decoration = dart.privateName(proxy_box, "_decoration");
  var _position = dart.privateName(proxy_box, "_position");
  var _configuration = dart.privateName(proxy_box, "_configuration");
  proxy_box.RenderDecoratedBox = class RenderDecoratedBox extends proxy_box.RenderProxyBox {
    get decoration() {
      return this[_decoration];
    }
    set decoration(value) {
      let t0;
      if (!(value != null)) dart.assertFailed(null, L1, 2011, 12, "value != null");
      if (dart.equals(value, this[_decoration])) return;
      t0 = this[_painter];
      t0 == null ? null : t0.dispose();
      this[_painter] = null;
      this[_decoration] = value;
      this.markNeedsPaint();
    }
    get position() {
      return this[_position];
    }
    set position(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2024, 12, "value != null");
      if (value == this[_position]) return;
      this[_position] = value;
      this.markNeedsPaint();
    }
    get configuration() {
      return this[_configuration];
    }
    set configuration(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2040, 12, "value != null");
      if (dart.equals(value, this[_configuration])) return;
      this[_configuration] = value;
      this.markNeedsPaint();
    }
    detach() {
      let t0;
      t0 = this[_painter];
      t0 == null ? null : t0.dispose();
      this[_painter] = null;
      super.detach();
      this.markNeedsPaint();
    }
    hitTestSelf(position) {
      return this[_decoration].hitTest(this.size, position, {textDirection: this.configuration.textDirection});
    }
    paint(context, offset) {
      if (!(this.size.width != null)) dart.assertFailed(null, L1, 2067, 12, "size.width != null");
      if (!(this.size.height != null)) dart.assertFailed(null, L1, 2068, 12, "size.height != null");
      this[_painter] == null ? this[_painter] = this[_decoration].createBoxPainter(dart.bind(this, 'markNeedsPaint')) : null;
      let filledConfiguration = this.configuration.copyWith({size: this.size});
      if (this.position == proxy_box.DecorationPosition.background) {
        let debugSaveCount = null;
        if (!dart.test(dart.fn(() => {
          debugSaveCount = context.canvas.getSaveCount();
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 2073, 14, "() {\r\n        debugSaveCount = context.canvas.getSaveCount();\r\n        return true;\r\n      }()");
        this[_painter].paint(context.canvas, offset, filledConfiguration);
        if (!dart.test(dart.fn(() => {
          if (debugSaveCount != context.canvas.getSaveCount()) {
            dart.throw(new assertions.FlutterError.fromParts(JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new(dart.str(dart.runtimeType(this[_decoration])) + " painter had mismatching save and restore calls."), new assertions.ErrorDescription.new("Before painting the decoration, the canvas save count was " + dart.str(debugSaveCount) + ". " + "After painting it, the canvas save count was " + dart.str(context.canvas.getSaveCount()) + ". " + "Every call to save() or saveLayer() must be matched by a call to restore()."), new (DiagnosticsPropertyOfDecorationL()).new("The decoration was", this.decoration, {style: diagnostics.DiagnosticsTreeStyle.errorProperty}), new (DiagnosticsPropertyOfBoxPainterL()).new("The painter was", this[_painter], {style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 2078, 14, "() {\r\n        if (debugSaveCount != context.canvas.getSaveCount()) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('${_decoration.runtimeType} painter had mismatching save and restore calls.'),\r\n            ErrorDescription(\r\n              'Before painting the decoration, the canvas save count was $debugSaveCount. '\r\n              'After painting it, the canvas save count was ${context.canvas.getSaveCount()}. '\r\n              'Every call to save() or saveLayer() must be matched by a call to restore().'\r\n            ),\r\n            DiagnosticsProperty<Decoration>('The decoration was', decoration, style: DiagnosticsTreeStyle.errorProperty),\r\n            DiagnosticsProperty<BoxPainter>('The painter was', _painter, style: DiagnosticsTreeStyle.errorProperty),\r\n          ]);\r\n        }\r\n        return true;\r\n      }()");
        if (dart.test(this.decoration.isComplex)) context.setIsComplexHint();
      }
      super.paint(context, offset);
      if (this.position == proxy_box.DecorationPosition.foreground) {
        this[_painter].paint(context.canvas, offset, filledConfiguration);
        if (dart.test(this.decoration.isComplex)) context.setIsComplexHint();
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(this[_decoration].toDiagnosticsNode({name: "decoration"}));
      properties.add(new (DiagnosticsPropertyOfImageConfigurationL()).new("configuration", this.configuration));
    }
  };
  (proxy_box.RenderDecoratedBox.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let position = opts && 'position' in opts ? opts.position : C19 || CT.C19;
    let configuration = opts && 'configuration' in opts ? opts.configuration : C22 || CT.C22;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_painter] = null;
    if (!(decoration != null)) dart.assertFailed(null, L1, 1995, 15, "decoration != null");
    if (!(position != null)) dart.assertFailed(null, L1, 1996, 15, "position != null");
    if (!(configuration != null)) dart.assertFailed(null, L1, 1997, 15, "configuration != null");
    this[_decoration] = decoration;
    this[_position] = position;
    this[_configuration] = configuration;
    proxy_box.RenderDecoratedBox.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderDecoratedBox.prototype;
  dart.addTypeTests(proxy_box.RenderDecoratedBox);
  dart.addTypeCaches(proxy_box.RenderDecoratedBox);
  dart.setGetterSignature(proxy_box.RenderDecoratedBox, () => ({
    __proto__: dart.getGetters(proxy_box.RenderDecoratedBox.__proto__),
    decoration: dart.legacy(decoration.Decoration),
    position: dart.legacy(proxy_box.DecorationPosition),
    configuration: dart.legacy(image_provider.ImageConfiguration)
  }));
  dart.setSetterSignature(proxy_box.RenderDecoratedBox, () => ({
    __proto__: dart.getSetters(proxy_box.RenderDecoratedBox.__proto__),
    decoration: dart.legacy(decoration.Decoration),
    position: dart.legacy(proxy_box.DecorationPosition),
    configuration: dart.legacy(image_provider.ImageConfiguration)
  }));
  dart.setLibraryUri(proxy_box.RenderDecoratedBox, L0);
  dart.setFieldSignature(proxy_box.RenderDecoratedBox, () => ({
    __proto__: dart.getFields(proxy_box.RenderDecoratedBox.__proto__),
    [_painter]: dart.fieldType(dart.legacy(decoration.BoxPainter)),
    [_decoration]: dart.fieldType(dart.legacy(decoration.Decoration)),
    [_position]: dart.fieldType(dart.legacy(proxy_box.DecorationPosition)),
    [_configuration]: dart.fieldType(dart.legacy(image_provider.ImageConfiguration))
  }));
  var _origin = dart.privateName(proxy_box, "_origin");
  var _alignment = dart.privateName(proxy_box, "_alignment");
  var _textDirection = dart.privateName(proxy_box, "_textDirection");
  var _transform = dart.privateName(proxy_box, "_transform");
  var _effectiveTransform = dart.privateName(proxy_box, "_effectiveTransform");
  var transformHitTests$ = dart.privateName(proxy_box, "RenderTransform.transformHitTests");
  proxy_box.RenderTransform = class RenderTransform extends proxy_box.RenderProxyBox {
    get transformHitTests() {
      return this[transformHitTests$];
    }
    set transformHitTests(value) {
      this[transformHitTests$] = value;
    }
    get origin() {
      return this[_origin];
    }
    set origin(value) {
      if (dart.equals(this[_origin], value)) return;
      this[_origin] = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get alignment() {
      return this[_alignment];
    }
    set alignment(value) {
      if (dart.equals(this[_alignment], value)) return;
      this[_alignment] = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (dart.equals(this[_textDirection], value)) return;
      this[_textDirection] = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    set transform(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2195, 12, "value != null");
      if (dart.equals(this[_transform], value)) return;
      this[_transform] = vector_math_64.Matrix4.copy(value);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    setIdentity() {
      this[_transform].setIdentity();
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    rotateX(radians) {
      this[_transform].rotateX(radians);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    rotateY(radians) {
      this[_transform].rotateY(radians);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    rotateZ(radians) {
      this[_transform].rotateZ(radians);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    translate(x, y = 0, z = 0) {
      this[_transform].translate(x, y, z);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    scale(x, y = null, z = null) {
      this[_transform].scale(x, y, z);
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get [_effectiveTransform]() {
      let t0;
      let resolvedAlignment = (t0 = this.alignment, t0 == null ? null : t0.resolve(this.textDirection));
      if (this[_origin] == null && resolvedAlignment == null) return this[_transform];
      let result = vector_math_64.Matrix4.identity();
      if (this[_origin] != null) result.translate(this[_origin].dx, this[_origin].dy);
      let translation = null;
      if (resolvedAlignment != null) {
        translation = resolvedAlignment.alongSize(this.size);
        result.translate(translation.dx, translation.dy);
      }
      result.multiply(this[_transform]);
      if (resolvedAlignment != null) result.translate(-dart.notNull(translation.dx), -dart.notNull(translation.dy));
      if (this[_origin] != null) result.translate(-dart.notNull(this[_origin].dx), -dart.notNull(this[_origin].dy));
      return result;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return this.hitTestChildren(result, {position: position});
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (!(!dart.test(this.transformHitTests) || this[_effectiveTransform] != null)) dart.assertFailed(null, L1, 2276, 12, "!transformHitTests || _effectiveTransform != null");
      return result.addWithPaintTransform({transform: dart.test(this.transformHitTests) ? this[_effectiveTransform] : null, position: position, hitTest: dart.fn((result, position) => super.hitTestChildren(result, {position: position}), BoxHitTestResultLAndOffsetLToboolL())});
    }
    paint(context, offset) {
      if (this.child != null) {
        let transform = this[_effectiveTransform];
        let childOffset = matrix_utils.MatrixUtils.getAsTranslation(transform);
        if (childOffset == null) {
          this.layer = context.pushTransform(this.needsCompositing, offset, transform, dart.bind(this, 'paint', super.paint), {oldLayer: TransformLayerL().as(this.layer)});
        } else {
          super.paint(context, offset['+'](childOffset));
          this.layer = null;
        }
      }
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      transform.multiply(this[_effectiveTransform]);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new matrix_utils.TransformProperty.new("transform matrix", this[_transform]));
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("origin", this.origin));
      properties.add(new (DiagnosticsPropertyOfAlignmentGeometryL()).new("alignment", this.alignment));
      properties.add(new (EnumPropertyOfTextDirectionL()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("transformHitTests", this.transformHitTests));
    }
  };
  (proxy_box.RenderTransform.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let transformHitTests = opts && 'transformHitTests' in opts ? opts.transformHitTests : true;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_origin] = null;
    this[_alignment] = null;
    this[_textDirection] = null;
    this[_transform] = null;
    this[transformHitTests$] = transformHitTests;
    if (!(transform != null)) dart.assertFailed(null, L1, 2124, 15, "transform != null");
    proxy_box.RenderTransform.__proto__.new.call(this, child);
    this.transform = transform;
    this.alignment = alignment;
    this.textDirection = textDirection;
    this.origin = origin;
  }).prototype = proxy_box.RenderTransform.prototype;
  dart.addTypeTests(proxy_box.RenderTransform);
  dart.addTypeCaches(proxy_box.RenderTransform);
  dart.setMethodSignature(proxy_box.RenderTransform, () => ({
    __proto__: dart.getMethods(proxy_box.RenderTransform.__proto__),
    setIdentity: dart.fnType(dart.void, []),
    rotateX: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rotateY: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rotateZ: dart.fnType(dart.void, [dart.legacy(core.double)]),
    translate: dart.fnType(dart.void, [dart.legacy(core.double)], [dart.legacy(core.double), dart.legacy(core.double)]),
    scale: dart.fnType(dart.void, [dart.legacy(core.double)], [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(proxy_box.RenderTransform, () => ({
    __proto__: dart.getGetters(proxy_box.RenderTransform.__proto__),
    origin: dart.legacy(ui.Offset),
    alignment: dart.legacy(alignment.AlignmentGeometry),
    textDirection: dart.legacy(ui.TextDirection),
    [_effectiveTransform]: dart.legacy(vector_math_64.Matrix4)
  }));
  dart.setSetterSignature(proxy_box.RenderTransform, () => ({
    __proto__: dart.getSetters(proxy_box.RenderTransform.__proto__),
    origin: dart.legacy(ui.Offset),
    alignment: dart.legacy(alignment.AlignmentGeometry),
    textDirection: dart.legacy(ui.TextDirection),
    transform: dart.legacy(vector_math_64.Matrix4)
  }));
  dart.setLibraryUri(proxy_box.RenderTransform, L0);
  dart.setFieldSignature(proxy_box.RenderTransform, () => ({
    __proto__: dart.getFields(proxy_box.RenderTransform.__proto__),
    [_origin]: dart.fieldType(dart.legacy(ui.Offset)),
    [_alignment]: dart.fieldType(dart.legacy(alignment.AlignmentGeometry)),
    [_textDirection]: dart.fieldType(dart.legacy(ui.TextDirection)),
    transformHitTests: dart.fieldType(dart.legacy(core.bool)),
    [_transform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  var _name$1 = dart.privateName(box_fit, "_name");
  var C23;
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var C24;
  var _resolvedAlignment = dart.privateName(proxy_box, "_resolvedAlignment");
  var _hasVisualOverflow = dart.privateName(proxy_box, "_hasVisualOverflow");
  var _fit = dart.privateName(proxy_box, "_fit");
  var _resolve = dart.privateName(proxy_box, "_resolve");
  var _markNeedResolution = dart.privateName(proxy_box, "_markNeedResolution");
  var _clearPaintData = dart.privateName(proxy_box, "_clearPaintData");
  var BoxConstraints_maxHeight = dart.privateName(box, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box, "BoxConstraints.minWidth");
  var C25;
  var _updatePaintData = dart.privateName(proxy_box, "_updatePaintData");
  var _paintChildWithTransform = dart.privateName(proxy_box, "_paintChildWithTransform");
  proxy_box.RenderFittedBox = class RenderFittedBox extends proxy_box.RenderProxyBox {
    [_resolve]() {
      if (this[_resolvedAlignment] != null) return;
      this[_resolvedAlignment] = this.alignment.resolve(this.textDirection);
    }
    [_markNeedResolution]() {
      this[_resolvedAlignment] = null;
      this.markNeedsPaint();
    }
    get fit() {
      return this[_fit];
    }
    set fit(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2359, 12, "value != null");
      if (this[_fit] == value) return;
      this[_fit] = value;
      this[_clearPaintData]();
      this.markNeedsPaint();
    }
    get alignment() {
      return this[_alignment];
    }
    set alignment(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2378, 12, "value != null");
      if (dart.equals(this[_alignment], value)) return;
      this[_alignment] = value;
      this[_clearPaintData]();
      this[_markNeedResolution]();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (dart.equals(this[_textDirection], value)) return;
      this[_textDirection] = value;
      this[_clearPaintData]();
      this[_markNeedResolution]();
    }
    performLayout() {
      if (this.child != null) {
        this.child.layout(C25 || CT.C25, {parentUsesSize: true});
        this.size = this.constraints.constrainSizeAndAttemptToPreserveAspectRatio(this.child.size);
        this[_clearPaintData]();
      } else {
        this.size = this.constraints.smallest;
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2422, 12, "value != null");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    [_clearPaintData]() {
      this[_hasVisualOverflow] = null;
      this[_transform] = null;
    }
    [_updatePaintData]() {
      let t0;
      if (this[_transform] != null) return;
      if (this.child == null) {
        this[_hasVisualOverflow] = false;
        this[_transform] = vector_math_64.Matrix4.identity();
      } else {
        this[_resolve]();
        let childSize = this.child.size;
        let sizes = box_fit.applyBoxFit(this[_fit], childSize, this.size);
        let scaleX = dart.notNull(sizes.destination.width) / dart.notNull(sizes.source.width);
        let scaleY = dart.notNull(sizes.destination.height) / dart.notNull(sizes.source.height);
        let sourceRect = this[_resolvedAlignment].inscribe(sizes.source, ui.Offset.zero['&'](childSize));
        let destinationRect = this[_resolvedAlignment].inscribe(sizes.destination, ui.Offset.zero['&'](this.size));
        this[_hasVisualOverflow] = dart.notNull(sourceRect.width) < dart.notNull(childSize.width) || dart.notNull(sourceRect.height) < dart.notNull(childSize.height);
        if (!(scaleX[$isFinite] && scaleY[$isFinite])) dart.assertFailed(null, L1, 2451, 14, "scaleX.isFinite && scaleY.isFinite");
        this[_transform] = (t0 = vector_math_64.Matrix4.translationValues(destinationRect.left, destinationRect.top, 0.0), (() => {
          t0.scale(scaleX, scaleY, 1.0);
          t0.translate(-dart.notNull(sourceRect.left), -dart.notNull(sourceRect.top));
          return t0;
        })());
        if (!dart.test(this[_transform].storage[$every](dart.fn(value => value[$isFinite], doubleLToboolL())))) dart.assertFailed(null, L1, 2455, 14, "_transform.storage.every((double value) => value.isFinite)");
      }
    }
    [_paintChildWithTransform](context, offset) {
      let childOffset = matrix_utils.MatrixUtils.getAsTranslation(this[_transform]);
      if (childOffset == null)
        return context.pushTransform(this.needsCompositing, offset, this[_transform], dart.bind(this, 'paint', super.paint), {oldLayer: TransformLayerL().is(this.layer) ? TransformLayerL().as(this.layer) : null});
      else
        super.paint(context, offset['+'](childOffset));
      return null;
    }
    paint(context, offset) {
      if (dart.test(this.size.isEmpty) || dart.test(this.child.size.isEmpty)) return;
      this[_updatePaintData]();
      if (this.child != null) {
        if (dart.test(this[_hasVisualOverflow]) && !dart.equals(this.clipBehavior, ui.Clip.none))
          this.layer = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintChildWithTransform), {oldLayer: ClipRectLayerL().is(this.layer) ? ClipRectLayerL().as(this.layer) : null, clipBehavior: this.clipBehavior});
        else
          this.layer = this[_paintChildWithTransform](context, offset);
      }
    }
    hitTestChildren(result, opts) {
      let t0, t0$;
      let position = opts && 'position' in opts ? opts.position : null;
      if (dart.test(this.size.isEmpty) || dart.equals((t0$ = (t0 = this.child, t0 == null ? null : t0.size), t0$ == null ? null : t0$.isEmpty), true)) return false;
      this[_updatePaintData]();
      return result.addWithPaintTransform({transform: this[_transform], position: position, hitTest: dart.fn((result, position) => super.hitTestChildren(result, {position: position}), BoxHitTestResultLAndOffsetLToboolL())});
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      if (dart.test(this.size.isEmpty) || dart.test(child.size.isEmpty)) {
        transform.setZero();
      } else {
        this[_updatePaintData]();
        transform.multiply(this[_transform]);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfBoxFitL()).new("fit", this.fit));
      properties.add(new (DiagnosticsPropertyOfAlignmentGeometryL()).new("alignment", this.alignment));
      properties.add(new (EnumPropertyOfTextDirectionL()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (proxy_box.RenderFittedBox.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C23 || CT.C23;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C15 || CT.C15;
    this[_resolvedAlignment] = null;
    this[_hasVisualOverflow] = null;
    this[_transform] = null;
    this[_clipBehavior] = ui.Clip.none;
    if (!(fit != null)) dart.assertFailed(null, L1, 2333, 15, "fit != null");
    if (!(alignment != null)) dart.assertFailed(null, L1, 2334, 15, "alignment != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 2335, 15, "clipBehavior != null");
    this[_fit] = fit;
    this[_alignment] = alignment;
    this[_textDirection] = textDirection;
    this[_clipBehavior] = clipBehavior;
    proxy_box.RenderFittedBox.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderFittedBox.prototype;
  dart.addTypeTests(proxy_box.RenderFittedBox);
  dart.addTypeCaches(proxy_box.RenderFittedBox);
  dart.setMethodSignature(proxy_box.RenderFittedBox, () => ({
    __proto__: dart.getMethods(proxy_box.RenderFittedBox.__proto__),
    [_resolve]: dart.fnType(dart.void, []),
    [_markNeedResolution]: dart.fnType(dart.void, []),
    [_clearPaintData]: dart.fnType(dart.void, []),
    [_updatePaintData]: dart.fnType(dart.void, []),
    [_paintChildWithTransform]: dart.fnType(dart.legacy(layer.TransformLayer), [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)])
  }));
  dart.setGetterSignature(proxy_box.RenderFittedBox, () => ({
    __proto__: dart.getGetters(proxy_box.RenderFittedBox.__proto__),
    fit: dart.legacy(box_fit.BoxFit),
    alignment: dart.legacy(alignment.AlignmentGeometry),
    textDirection: dart.legacy(ui.TextDirection),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setSetterSignature(proxy_box.RenderFittedBox, () => ({
    __proto__: dart.getSetters(proxy_box.RenderFittedBox.__proto__),
    fit: dart.legacy(box_fit.BoxFit),
    alignment: dart.legacy(alignment.AlignmentGeometry),
    textDirection: dart.legacy(ui.TextDirection),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setLibraryUri(proxy_box.RenderFittedBox, L0);
  dart.setFieldSignature(proxy_box.RenderFittedBox, () => ({
    __proto__: dart.getFields(proxy_box.RenderFittedBox.__proto__),
    [_resolvedAlignment]: dart.fieldType(dart.legacy(alignment.Alignment)),
    [_fit]: dart.fieldType(dart.legacy(box_fit.BoxFit)),
    [_alignment]: dart.fieldType(dart.legacy(alignment.AlignmentGeometry)),
    [_textDirection]: dart.fieldType(dart.legacy(ui.TextDirection)),
    [_hasVisualOverflow]: dart.fieldType(dart.legacy(core.bool)),
    [_transform]: dart.fieldType(dart.legacy(vector_math_64.Matrix4)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip))
  }));
  var _translation = dart.privateName(proxy_box, "_translation");
  var transformHitTests$0 = dart.privateName(proxy_box, "RenderFractionalTranslation.transformHitTests");
  proxy_box.RenderFractionalTranslation = class RenderFractionalTranslation extends proxy_box.RenderProxyBox {
    get transformHitTests() {
      return this[transformHitTests$0];
    }
    set transformHitTests(value) {
      this[transformHitTests$0] = value;
    }
    get translation() {
      return this[_translation];
    }
    set translation(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 2544, 12, "value != null");
      if (dart.equals(this[_translation], value)) return;
      this[_translation] = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return this.hitTestChildren(result, {position: position});
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L1, 2571, 12, "!debugNeedsLayout");
      return result.addWithPaintOffset({offset: dart.test(this.transformHitTests) ? new ui.Offset.new(dart.notNull(this.translation.dx) * dart.notNull(this.size.width), dart.notNull(this.translation.dy) * dart.notNull(this.size.height)) : null, position: position, hitTest: dart.fn((result, position) => super.hitTestChildren(result, {position: position}), BoxHitTestResultLAndOffsetLToboolL())});
    }
    paint(context, offset) {
      if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L1, 2585, 12, "!debugNeedsLayout");
      if (this.child != null) {
        super.paint(context, new ui.Offset.new(dart.notNull(offset.dx) + dart.notNull(this.translation.dx) * dart.notNull(this.size.width), dart.notNull(offset.dy) + dart.notNull(this.translation.dy) * dart.notNull(this.size.height)));
      }
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      transform.translate(dart.notNull(this.translation.dx) * dart.notNull(this.size.width), dart.notNull(this.translation.dy) * dart.notNull(this.size.height));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("translation", this.translation));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("transformHitTests", this.transformHitTests));
    }
  };
  (proxy_box.RenderFractionalTranslation.new = function(opts) {
    let translation = opts && 'translation' in opts ? opts.translation : null;
    let transformHitTests = opts && 'transformHitTests' in opts ? opts.transformHitTests : true;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transformHitTests$0] = transformHitTests;
    if (!(translation != null)) dart.assertFailed(null, L1, 2533, 15, "translation != null");
    this[_translation] = translation;
    proxy_box.RenderFractionalTranslation.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderFractionalTranslation.prototype;
  dart.addTypeTests(proxy_box.RenderFractionalTranslation);
  dart.addTypeCaches(proxy_box.RenderFractionalTranslation);
  dart.setGetterSignature(proxy_box.RenderFractionalTranslation, () => ({
    __proto__: dart.getGetters(proxy_box.RenderFractionalTranslation.__proto__),
    translation: dart.legacy(ui.Offset)
  }));
  dart.setSetterSignature(proxy_box.RenderFractionalTranslation, () => ({
    __proto__: dart.getSetters(proxy_box.RenderFractionalTranslation.__proto__),
    translation: dart.legacy(ui.Offset)
  }));
  dart.setLibraryUri(proxy_box.RenderFractionalTranslation, L0);
  dart.setFieldSignature(proxy_box.RenderFractionalTranslation, () => ({
    __proto__: dart.getFields(proxy_box.RenderFractionalTranslation.__proto__),
    [_translation]: dart.fieldType(dart.legacy(ui.Offset)),
    transformHitTests: dart.fieldType(dart.legacy(core.bool))
  }));
  var onPointerDown$ = dart.privateName(proxy_box, "RenderPointerListener.onPointerDown");
  var onPointerMove$ = dart.privateName(proxy_box, "RenderPointerListener.onPointerMove");
  var onPointerUp$ = dart.privateName(proxy_box, "RenderPointerListener.onPointerUp");
  var onPointerCancel$ = dart.privateName(proxy_box, "RenderPointerListener.onPointerCancel");
  var onPointerSignal$ = dart.privateName(proxy_box, "RenderPointerListener.onPointerSignal");
  proxy_box.RenderPointerListener = class RenderPointerListener extends proxy_box.RenderProxyBoxWithHitTestBehavior {
    get onPointerDown() {
      return this[onPointerDown$];
    }
    set onPointerDown(value) {
      this[onPointerDown$] = value;
    }
    get onPointerMove() {
      return this[onPointerMove$];
    }
    set onPointerMove(value) {
      this[onPointerMove$] = value;
    }
    get onPointerUp() {
      return this[onPointerUp$];
    }
    set onPointerUp(value) {
      this[onPointerUp$] = value;
    }
    get onPointerCancel() {
      return this[onPointerCancel$];
    }
    set onPointerCancel(value) {
      this[onPointerCancel$] = value;
    }
    get onPointerSignal() {
      return this[onPointerSignal$];
    }
    set onPointerSignal(value) {
      this[onPointerSignal$] = value;
    }
    performResize() {
      this.size = this.constraints.biggest;
    }
    handleEvent(event, entry) {
      let t0, t0$, t0$0, t0$1, t0$2;
      HitTestEntryL().as(entry);
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, L1, 2687, 12, "debugHandleEvent(event, entry)");
      if (this.onPointerDown != null && PointerDownEventL().is(event)) {
        t0 = event;
        return this.onPointerDown(t0);
      }
      if (this.onPointerMove != null && PointerMoveEventL().is(event)) {
        t0$ = event;
        return this.onPointerMove(t0$);
      }
      if (this.onPointerUp != null && PointerUpEventL().is(event)) {
        t0$0 = event;
        return this.onPointerUp(t0$0);
      }
      if (this.onPointerCancel != null && PointerCancelEventL().is(event)) {
        t0$1 = event;
        return this.onPointerCancel(t0$1);
      }
      if (this.onPointerSignal != null && PointerSignalEventL().is(event)) {
        t0$2 = event;
        return this.onPointerSignal(t0$2);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (FlagsSummaryOfFunctionL()).new("listeners", new (IdentityMapOfStringL$FunctionL()).from(["down", this.onPointerDown, "move", this.onPointerMove, "up", this.onPointerUp, "cancel", this.onPointerCancel, "signal", this.onPointerSignal]), {ifEmpty: "<none>"}));
    }
  };
  (proxy_box.RenderPointerListener.new = function(opts) {
    let onPointerDown = opts && 'onPointerDown' in opts ? opts.onPointerDown : null;
    let onPointerMove = opts && 'onPointerMove' in opts ? opts.onPointerMove : null;
    let onPointerUp = opts && 'onPointerUp' in opts ? opts.onPointerUp : null;
    let onPointerCancel = opts && 'onPointerCancel' in opts ? opts.onPointerCancel : null;
    let onPointerSignal = opts && 'onPointerSignal' in opts ? opts.onPointerSignal : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : C0 || CT.C0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[onPointerDown$] = onPointerDown;
    this[onPointerMove$] = onPointerMove;
    this[onPointerUp$] = onPointerUp;
    this[onPointerCancel$] = onPointerCancel;
    this[onPointerSignal$] = onPointerSignal;
    proxy_box.RenderPointerListener.__proto__.new.call(this, {behavior: behavior, child: child});
    ;
  }).prototype = proxy_box.RenderPointerListener.prototype;
  dart.addTypeTests(proxy_box.RenderPointerListener);
  dart.addTypeCaches(proxy_box.RenderPointerListener);
  dart.setLibraryUri(proxy_box.RenderPointerListener, L0);
  dart.setFieldSignature(proxy_box.RenderPointerListener, () => ({
    __proto__: dart.getFields(proxy_box.RenderPointerListener.__proto__),
    onPointerDown: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerDownEvent)]))),
    onPointerMove: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerMoveEvent)]))),
    onPointerUp: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerUpEvent)]))),
    onPointerCancel: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerCancelEvent)]))),
    onPointerSignal: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerSignalEvent)])))
  }));
  var C26;
  var _annotationIsActive = dart.privateName(proxy_box, "_annotationIsActive");
  var _onEnter = dart.privateName(proxy_box, "_onEnter");
  var _onHover = dart.privateName(proxy_box, "_onHover");
  var _onExit = dart.privateName(proxy_box, "_onExit");
  var _cursor = dart.privateName(proxy_box, "_cursor");
  var _opaque = dart.privateName(proxy_box, "_opaque");
  var _markPropertyUpdated = dart.privateName(proxy_box, "_markPropertyUpdated");
  var _setAnnotationIsActive = dart.privateName(proxy_box, "_setAnnotationIsActive");
  var _handleUpdatedMouseIsConnected = dart.privateName(proxy_box, "_handleUpdatedMouseIsConnected");
  proxy_box.RenderMouseRegion = class RenderMouseRegion extends proxy_box.RenderProxyBox {
    hitTestSelf(position) {
      return true;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return dart.test(super.hitTest(result, {position: position})) && dart.test(this[_opaque]);
    }
    get opaque() {
      return this[_opaque];
    }
    set opaque(value) {
      if (!dart.equals(this[_opaque], value)) {
        this[_opaque] = value;
        this[_markPropertyUpdated]({mustRepaint: true});
      }
    }
    get onEnter() {
      return this[_onEnter];
    }
    set onEnter(value) {
      if (!dart.equals(this[_onEnter], value)) {
        this[_onEnter] = value;
        this[_markPropertyUpdated]({mustRepaint: false});
      }
    }
    get onHover() {
      return this[_onHover];
    }
    set onHover(value) {
      if (!dart.equals(this[_onHover], value)) {
        this[_onHover] = value;
        this[_markPropertyUpdated]({mustRepaint: false});
      }
    }
    get onExit() {
      return this[_onExit];
    }
    set onExit(value) {
      if (!dart.equals(this[_onExit], value)) {
        this[_onExit] = value;
        this[_markPropertyUpdated]({mustRepaint: false});
      }
    }
    get cursor() {
      return this[_cursor];
    }
    set cursor(value) {
      if (!dart.equals(this[_cursor], value)) {
        this[_cursor] = value;
        this[_markPropertyUpdated]({mustRepaint: true});
      }
    }
    [_markPropertyUpdated](opts) {
      let mustRepaint = opts && 'mustRepaint' in opts ? opts.mustRepaint : null;
      if (!(this.owner == null || !dart.test(this.owner.debugDoingPaint))) dart.assertFailed(null, L1, 2844, 12, "owner == null || !owner.debugDoingPaint");
      let newAnnotationIsActive = (this[_onEnter] != null || this[_onHover] != null || this[_onExit] != null || !dart.equals(this[_cursor], mouse_cursor.MouseCursor.defer) || dart.test(this.opaque)) && dart.test(binding.RendererBinding.instance.mouseTracker.mouseIsConnected);
      this[_setAnnotationIsActive](newAnnotationIsActive);
      if (dart.test(mustRepaint)) this.markNeedsPaint();
    }
    [_setAnnotationIsActive](value) {
      let annotationWasActive = this[_annotationIsActive];
      this[_annotationIsActive] = value;
      if (!dart.equals(annotationWasActive, value)) {
        this.markNeedsPaint();
        this.markNeedsCompositingBitsUpdate();
      }
    }
    [_handleUpdatedMouseIsConnected]() {
      this[_markPropertyUpdated]({mustRepaint: false});
    }
    attach(owner) {
      PipelineOwnerL().as(owner);
      super.attach(owner);
      binding.RendererBinding.instance.mouseTracker.addListener(dart.bind(this, _handleUpdatedMouseIsConnected));
      this[_markPropertyUpdated]({mustRepaint: false});
    }
    detach() {
      binding.RendererBinding.instance.mouseTracker.removeListener(dart.bind(this, _handleUpdatedMouseIsConnected));
      super.detach();
    }
    performResize() {
      this.size = this.constraints.biggest;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (FlagsSummaryOfFunctionL()).new("listeners", new (IdentityMapOfStringL$FunctionL()).from(["enter", this.onEnter, "hover", this.onHover, "exit", this.onExit]), {ifEmpty: "<none>"}));
      properties.add(new (DiagnosticsPropertyOfMouseCursorL()).new("cursor", this.cursor, {defaultValue: mouse_cursor.MouseCursor.defer}));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("opaque", this.opaque, {defaultValue: true}));
    }
  };
  (proxy_box.RenderMouseRegion.new = function(opts) {
    let onEnter = opts && 'onEnter' in opts ? opts.onEnter : null;
    let onHover = opts && 'onHover' in opts ? opts.onHover : null;
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let cursor = opts && 'cursor' in opts ? opts.cursor : C26 || CT.C26;
    let opaque = opts && 'opaque' in opts ? opts.opaque : true;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_annotationIsActive] = false;
    if (!(opaque != null)) dart.assertFailed(null, L1, 2748, 15, "opaque != null");
    if (!(cursor != null)) dart.assertFailed(null, L1, 2749, 15, "cursor != null");
    this[_onEnter] = onEnter;
    this[_onHover] = onHover;
    this[_onExit] = onExit;
    this[_cursor] = cursor;
    this[_opaque] = opaque;
    this[_annotationIsActive] = false;
    proxy_box.RenderMouseRegion.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderMouseRegion.prototype;
  dart.addTypeTests(proxy_box.RenderMouseRegion);
  dart.addTypeCaches(proxy_box.RenderMouseRegion);
  proxy_box.RenderMouseRegion[dart.implements] = () => [mouse_tracking.MouseTrackerAnnotation];
  dart.setMethodSignature(proxy_box.RenderMouseRegion, () => ({
    __proto__: dart.getMethods(proxy_box.RenderMouseRegion.__proto__),
    [_markPropertyUpdated]: dart.fnType(dart.void, [], {mustRepaint: dart.legacy(core.bool)}, {}),
    [_setAnnotationIsActive]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_handleUpdatedMouseIsConnected]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(proxy_box.RenderMouseRegion, () => ({
    __proto__: dart.getGetters(proxy_box.RenderMouseRegion.__proto__),
    opaque: dart.legacy(core.bool),
    onEnter: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEnterEvent)])),
    onHover: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerHoverEvent)])),
    onExit: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerExitEvent)])),
    cursor: dart.legacy(mouse_cursor.MouseCursor)
  }));
  dart.setSetterSignature(proxy_box.RenderMouseRegion, () => ({
    __proto__: dart.getSetters(proxy_box.RenderMouseRegion.__proto__),
    opaque: dart.legacy(core.bool),
    onEnter: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEnterEvent)])),
    onHover: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerHoverEvent)])),
    onExit: dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerExitEvent)])),
    cursor: dart.legacy(mouse_cursor.MouseCursor)
  }));
  dart.setLibraryUri(proxy_box.RenderMouseRegion, L0);
  dart.setFieldSignature(proxy_box.RenderMouseRegion, () => ({
    __proto__: dart.getFields(proxy_box.RenderMouseRegion.__proto__),
    [_opaque]: dart.fieldType(dart.legacy(core.bool)),
    [_onEnter]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerEnterEvent)]))),
    [_onHover]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerHoverEvent)]))),
    [_onExit]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(events.PointerExitEvent)]))),
    [_cursor]: dart.fieldType(dart.legacy(mouse_cursor.MouseCursor)),
    [_annotationIsActive]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _debugSymmetricPaintCount = dart.privateName(proxy_box, "_debugSymmetricPaintCount");
  var _debugAsymmetricPaintCount = dart.privateName(proxy_box, "_debugAsymmetricPaintCount");
  proxy_box.RenderRepaintBoundary = class RenderRepaintBoundary extends proxy_box.RenderProxyBox {
    get isRepaintBoundary() {
      return true;
    }
    toImage(opts) {
      let pixelRatio = opts && 'pixelRatio' in opts ? opts.pixelRatio : 1;
      if (!!dart.test(this.debugNeedsPaint)) dart.assertFailed(null, L1, 2999, 12, "!debugNeedsPaint");
      let offsetLayer = OffsetLayerL().as(this.layer);
      return offsetLayer.toImage(ui.Offset.zero['&'](this.size), {pixelRatio: pixelRatio});
    }
    get debugSymmetricPaintCount() {
      return this[_debugSymmetricPaintCount];
    }
    get debugAsymmetricPaintCount() {
      return this[_debugAsymmetricPaintCount];
    }
    debugResetMetrics() {
      if (!dart.test(dart.fn(() => {
        this[_debugSymmetricPaintCount] = 0;
        this[_debugAsymmetricPaintCount] = 0;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 3040, 12, "() {\r\n      _debugSymmetricPaintCount = 0;\r\n      _debugAsymmetricPaintCount = 0;\r\n      return true;\r\n    }()");
    }
    debugRegisterRepaintBoundaryPaint(opts) {
      let includedParent = opts && 'includedParent' in opts ? opts.includedParent : true;
      let includedChild = opts && 'includedChild' in opts ? opts.includedChild : false;
      if (!dart.test(dart.fn(() => {
        if (dart.test(includedParent) && dart.test(includedChild))
          this[_debugSymmetricPaintCount] = dart.notNull(this[_debugSymmetricPaintCount]) + 1;
        else
          this[_debugAsymmetricPaintCount] = dart.notNull(this[_debugAsymmetricPaintCount]) + 1;
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 3049, 12, "() {\r\n      if (includedParent && includedChild)\r\n        _debugSymmetricPaintCount += 1;\r\n      else\r\n        _debugAsymmetricPaintCount += 1;\r\n      return true;\r\n    }()");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let inReleaseMode = true;
      if (!dart.test(dart.fn(() => {
        inReleaseMode = false;
        if (dart.notNull(this.debugSymmetricPaintCount) + dart.notNull(this.debugAsymmetricPaintCount) === 0) {
          properties.add(new diagnostics.MessageProperty.new("usefulness ratio", "no metrics collected yet (never painted)"));
        } else {
          let fraction = dart.notNull(this.debugAsymmetricPaintCount) / (dart.notNull(this.debugSymmetricPaintCount) + dart.notNull(this.debugAsymmetricPaintCount));
          let diagnosis = null;
          if (dart.notNull(this.debugSymmetricPaintCount) + dart.notNull(this.debugAsymmetricPaintCount) < 5) {
            diagnosis = "insufficient data to draw conclusion (less than five repaints)";
          } else if (fraction > 0.9) {
            diagnosis = "this is an outstandingly useful repaint boundary and should definitely be kept";
          } else if (fraction > 0.5) {
            diagnosis = "this is a useful repaint boundary and should be kept";
          } else if (fraction > 0.3) {
            diagnosis = "this repaint boundary is probably useful, but maybe it would be more useful in tandem with adding more repaint boundaries elsewhere";
          } else if (fraction > 0.1) {
            diagnosis = "this repaint boundary does sometimes show value, though currently not that often";
          } else if (this.debugAsymmetricPaintCount === 0) {
            diagnosis = "this repaint boundary is astoundingly ineffectual and should be removed";
          } else {
            diagnosis = "this repaint boundary is not very effective and should probably be removed";
          }
          properties.add(new diagnostics.PercentProperty.new("metrics", fraction, {unit: "useful", tooltip: dart.str(this.debugSymmetricPaintCount) + " bad vs " + dart.str(this.debugAsymmetricPaintCount) + " good"}));
          properties.add(new diagnostics.MessageProperty.new("diagnosis", diagnosis));
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 3062, 12, "() {\r\n      inReleaseMode = false;\r\n      if (debugSymmetricPaintCount + debugAsymmetricPaintCount == 0) {\r\n        properties.add(MessageProperty('usefulness ratio', 'no metrics collected yet (never painted)'));\r\n      } else {\r\n        final double fraction = debugAsymmetricPaintCount / (debugSymmetricPaintCount + debugAsymmetricPaintCount);\r\n        String diagnosis;\r\n        if (debugSymmetricPaintCount + debugAsymmetricPaintCount < 5) {\r\n          diagnosis = 'insufficient data to draw conclusion (less than five repaints)';\r\n        } else if (fraction > 0.9) {\r\n          diagnosis = 'this is an outstandingly useful repaint boundary and should definitely be kept';\r\n        } else if (fraction > 0.5) {\r\n          diagnosis = 'this is a useful repaint boundary and should be kept';\r\n        } else if (fraction > 0.30) {\r\n          diagnosis = 'this repaint boundary is probably useful, but maybe it would be more useful in tandem with adding more repaint boundaries elsewhere';\r\n        } else if (fraction > 0.1) {\r\n          diagnosis = 'this repaint boundary does sometimes show value, though currently not that often';\r\n        } else if (debugAsymmetricPaintCount == 0) {\r\n          diagnosis = 'this repaint boundary is astoundingly ineffectual and should be removed';\r\n        } else {\r\n          diagnosis = 'this repaint boundary is not very effective and should probably be removed';\r\n        }\r\n        properties.add(PercentProperty('metrics', fraction, unit: 'useful', tooltip: '$debugSymmetricPaintCount bad vs $debugAsymmetricPaintCount good'));\r\n        properties.add(MessageProperty('diagnosis', diagnosis));\r\n      }\r\n      return true;\r\n    }()");
      if (inReleaseMode) properties.add(diagnostics.DiagnosticsNode.message("(run in checked mode to collect repaint boundary statistics)"));
    }
  };
  (proxy_box.RenderRepaintBoundary.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[_debugSymmetricPaintCount] = 0;
    this[_debugAsymmetricPaintCount] = 0;
    proxy_box.RenderRepaintBoundary.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderRepaintBoundary.prototype;
  dart.addTypeTests(proxy_box.RenderRepaintBoundary);
  dart.addTypeCaches(proxy_box.RenderRepaintBoundary);
  dart.setMethodSignature(proxy_box.RenderRepaintBoundary, () => ({
    __proto__: dart.getMethods(proxy_box.RenderRepaintBoundary.__proto__),
    toImage: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Image))), [], {pixelRatio: dart.legacy(core.double)}, {}),
    debugResetMetrics: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(proxy_box.RenderRepaintBoundary, () => ({
    __proto__: dart.getGetters(proxy_box.RenderRepaintBoundary.__proto__),
    debugSymmetricPaintCount: dart.legacy(core.int),
    debugAsymmetricPaintCount: dart.legacy(core.int)
  }));
  dart.setLibraryUri(proxy_box.RenderRepaintBoundary, L0);
  dart.setFieldSignature(proxy_box.RenderRepaintBoundary, () => ({
    __proto__: dart.getFields(proxy_box.RenderRepaintBoundary.__proto__),
    [_debugSymmetricPaintCount]: dart.fieldType(dart.legacy(core.int)),
    [_debugAsymmetricPaintCount]: dart.fieldType(dart.legacy(core.int))
  }));
  var _ignoring = dart.privateName(proxy_box, "_ignoring");
  var _ignoringSemantics = dart.privateName(proxy_box, "_ignoringSemantics");
  var _effectiveIgnoringSemantics = dart.privateName(proxy_box, "_effectiveIgnoringSemantics");
  proxy_box.RenderIgnorePointer = class RenderIgnorePointer extends proxy_box.RenderProxyBox {
    get ignoring() {
      return this[_ignoring];
    }
    set ignoring(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 3131, 12, "value != null");
      if (dart.equals(value, this[_ignoring])) return;
      this[_ignoring] = value;
      if (this[_ignoringSemantics] == null || !dart.test(this[_ignoringSemantics])) this.markNeedsSemanticsUpdate();
    }
    get ignoringSemantics() {
      return this[_ignoringSemantics];
    }
    set ignoringSemantics(value) {
      if (dart.equals(value, this[_ignoringSemantics])) return;
      let oldEffectiveValue = this[_effectiveIgnoringSemantics];
      this[_ignoringSemantics] = value;
      if (!dart.equals(oldEffectiveValue, this[_effectiveIgnoringSemantics])) this.markNeedsSemanticsUpdate();
    }
    get [_effectiveIgnoringSemantics]() {
      let t0;
      t0 = this.ignoringSemantics;
      return t0 == null ? this.ignoring : t0;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return !dart.test(this.ignoring) && dart.test(super.hitTest(result, {position: position}));
    }
    visitChildrenForSemantics(visitor) {
      if (this.child != null && !dart.test(this[_effectiveIgnoringSemantics])) visitor(this.child);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfboolL()).new("ignoring", this.ignoring));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("ignoringSemantics", this[_effectiveIgnoringSemantics], {description: this.ignoringSemantics == null ? "implicitly " + dart.str(this[_effectiveIgnoringSemantics]) : null}));
    }
  };
  (proxy_box.RenderIgnorePointer.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let ignoring = opts && 'ignoring' in opts ? opts.ignoring : true;
    let ignoringSemantics = opts && 'ignoringSemantics' in opts ? opts.ignoringSemantics : null;
    this[_ignoring] = ignoring;
    this[_ignoringSemantics] = ignoringSemantics;
    proxy_box.RenderIgnorePointer.__proto__.new.call(this, child);
    if (!(this[_ignoring] != null)) dart.assertFailed(null, L1, 3121, 12, "_ignoring != null");
  }).prototype = proxy_box.RenderIgnorePointer.prototype;
  dart.addTypeTests(proxy_box.RenderIgnorePointer);
  dart.addTypeCaches(proxy_box.RenderIgnorePointer);
  dart.setGetterSignature(proxy_box.RenderIgnorePointer, () => ({
    __proto__: dart.getGetters(proxy_box.RenderIgnorePointer.__proto__),
    ignoring: dart.legacy(core.bool),
    ignoringSemantics: dart.legacy(core.bool),
    [_effectiveIgnoringSemantics]: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderIgnorePointer, () => ({
    __proto__: dart.getSetters(proxy_box.RenderIgnorePointer.__proto__),
    ignoring: dart.legacy(core.bool),
    ignoringSemantics: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderIgnorePointer, L0);
  dart.setFieldSignature(proxy_box.RenderIgnorePointer, () => ({
    __proto__: dart.getFields(proxy_box.RenderIgnorePointer.__proto__),
    [_ignoring]: dart.fieldType(dart.legacy(core.bool)),
    [_ignoringSemantics]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _offstage = dart.privateName(proxy_box, "_offstage");
  proxy_box.RenderOffstage = class RenderOffstage extends proxy_box.RenderProxyBox {
    get offstage() {
      return this[_offstage];
    }
    set offstage(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 3207, 12, "value != null");
      if (dart.equals(value, this[_offstage])) return;
      this[_offstage] = value;
      this.markNeedsLayoutForSizedByParentChange();
    }
    computeMinIntrinsicWidth(height) {
      if (dart.test(this.offstage)) return 0.0;
      return super.computeMinIntrinsicWidth(height);
    }
    computeMaxIntrinsicWidth(height) {
      if (dart.test(this.offstage)) return 0.0;
      return super.computeMaxIntrinsicWidth(height);
    }
    computeMinIntrinsicHeight(width) {
      if (dart.test(this.offstage)) return 0.0;
      return super.computeMinIntrinsicHeight(width);
    }
    computeMaxIntrinsicHeight(width) {
      if (dart.test(this.offstage)) return 0.0;
      return super.computeMaxIntrinsicHeight(width);
    }
    computeDistanceToActualBaseline(baseline) {
      if (dart.test(this.offstage)) return null;
      return super.computeDistanceToActualBaseline(baseline);
    }
    get sizedByParent() {
      return this.offstage;
    }
    performResize() {
      if (!dart.test(this.offstage)) dart.assertFailed(null, L1, 3254, 12, "offstage");
      this.size = this.constraints.smallest;
    }
    performLayout() {
      let t0;
      if (dart.test(this.offstage)) {
        t0 = this.child;
        t0 == null ? null : t0.layout(this.constraints);
      } else {
        super.performLayout();
      }
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return !dart.test(this.offstage) && dart.test(super.hitTest(result, {position: position}));
    }
    paint(context, offset) {
      if (dart.test(this.offstage)) return;
      super.paint(context, offset);
    }
    visitChildrenForSemantics(visitor) {
      if (dart.test(this.offstage)) return;
      super.visitChildrenForSemantics(visitor);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfboolL()).new("offstage", this.offstage));
    }
    debugDescribeChildren() {
      if (this.child == null) return JSArrayOfDiagnosticsNodeL().of([]);
      return JSArrayOfDiagnosticsNodeL().of([this.child.toDiagnosticsNode({name: "child", style: dart.test(this.offstage) ? diagnostics.DiagnosticsTreeStyle.offstage : diagnostics.DiagnosticsTreeStyle.sparse})]);
    }
  };
  (proxy_box.RenderOffstage.new = function(opts) {
    let offstage = opts && 'offstage' in opts ? opts.offstage : true;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(offstage != null)) dart.assertFailed(null, L1, 3193, 15, "offstage != null");
    this[_offstage] = offstage;
    proxy_box.RenderOffstage.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderOffstage.prototype;
  dart.addTypeTests(proxy_box.RenderOffstage);
  dart.addTypeCaches(proxy_box.RenderOffstage);
  dart.setGetterSignature(proxy_box.RenderOffstage, () => ({
    __proto__: dart.getGetters(proxy_box.RenderOffstage.__proto__),
    offstage: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderOffstage, () => ({
    __proto__: dart.getSetters(proxy_box.RenderOffstage.__proto__),
    offstage: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderOffstage, L0);
  dart.setFieldSignature(proxy_box.RenderOffstage, () => ({
    __proto__: dart.getFields(proxy_box.RenderOffstage.__proto__),
    [_offstage]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _absorbing = dart.privateName(proxy_box, "_absorbing");
  proxy_box.RenderAbsorbPointer = class RenderAbsorbPointer extends proxy_box.RenderProxyBox {
    get absorbing() {
      return this[_absorbing];
    }
    set absorbing(value) {
      if (dart.equals(this[_absorbing], value)) return;
      this[_absorbing] = value;
      if (this.ignoringSemantics == null) this.markNeedsSemanticsUpdate();
    }
    get ignoringSemantics() {
      return this[_ignoringSemantics];
    }
    set ignoringSemantics(value) {
      if (dart.equals(value, this[_ignoringSemantics])) return;
      let oldEffectiveValue = this[_effectiveIgnoringSemantics];
      this[_ignoringSemantics] = value;
      if (!dart.equals(oldEffectiveValue, this[_effectiveIgnoringSemantics])) this.markNeedsSemanticsUpdate();
    }
    get [_effectiveIgnoringSemantics]() {
      let t0;
      t0 = this.ignoringSemantics;
      return t0 == null ? this.absorbing : t0;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return dart.test(this.absorbing) ? this.size.contains(position) : super.hitTest(result, {position: position});
    }
    visitChildrenForSemantics(visitor) {
      if (this.child != null && !dart.test(this[_effectiveIgnoringSemantics])) visitor(this.child);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfboolL()).new("absorbing", this.absorbing));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("ignoringSemantics", this[_effectiveIgnoringSemantics], {description: this.ignoringSemantics == null ? "implicitly " + dart.str(this[_effectiveIgnoringSemantics]) : null}));
    }
  };
  (proxy_box.RenderAbsorbPointer.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let absorbing = opts && 'absorbing' in opts ? opts.absorbing : true;
    let ignoringSemantics = opts && 'ignoringSemantics' in opts ? opts.ignoringSemantics : null;
    if (!(absorbing != null)) dart.assertFailed(null, L1, 3325, 15, "absorbing != null");
    this[_absorbing] = absorbing;
    this[_ignoringSemantics] = ignoringSemantics;
    proxy_box.RenderAbsorbPointer.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderAbsorbPointer.prototype;
  dart.addTypeTests(proxy_box.RenderAbsorbPointer);
  dart.addTypeCaches(proxy_box.RenderAbsorbPointer);
  dart.setGetterSignature(proxy_box.RenderAbsorbPointer, () => ({
    __proto__: dart.getGetters(proxy_box.RenderAbsorbPointer.__proto__),
    absorbing: dart.legacy(core.bool),
    ignoringSemantics: dart.legacy(core.bool),
    [_effectiveIgnoringSemantics]: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderAbsorbPointer, () => ({
    __proto__: dart.getSetters(proxy_box.RenderAbsorbPointer.__proto__),
    absorbing: dart.legacy(core.bool),
    ignoringSemantics: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderAbsorbPointer, L0);
  dart.setFieldSignature(proxy_box.RenderAbsorbPointer, () => ({
    __proto__: dart.getFields(proxy_box.RenderAbsorbPointer.__proto__),
    [_absorbing]: dart.fieldType(dart.legacy(core.bool)),
    [_ignoringSemantics]: dart.fieldType(dart.legacy(core.bool))
  }));
  var metaData$ = dart.privateName(proxy_box, "RenderMetaData.metaData");
  proxy_box.RenderMetaData = class RenderMetaData extends proxy_box.RenderProxyBoxWithHitTestBehavior {
    get metaData() {
      return this[metaData$];
    }
    set metaData(value) {
      this[metaData$] = value;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DiagnosticsProperty.new("metaData", this.metaData));
    }
  };
  (proxy_box.RenderMetaData.new = function(opts) {
    let metaData = opts && 'metaData' in opts ? opts.metaData : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : C0 || CT.C0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[metaData$] = metaData;
    proxy_box.RenderMetaData.__proto__.new.call(this, {behavior: behavior, child: child});
    ;
  }).prototype = proxy_box.RenderMetaData.prototype;
  dart.addTypeTests(proxy_box.RenderMetaData);
  dart.addTypeCaches(proxy_box.RenderMetaData);
  dart.setLibraryUri(proxy_box.RenderMetaData, L0);
  dart.setFieldSignature(proxy_box.RenderMetaData, () => ({
    __proto__: dart.getFields(proxy_box.RenderMetaData.__proto__),
    metaData: dart.fieldType(dart.dynamic)
  }));
  var _validActions = dart.privateName(proxy_box, "_validActions");
  var _onTap = dart.privateName(proxy_box, "_onTap");
  var _onLongPress = dart.privateName(proxy_box, "_onLongPress");
  var _onHorizontalDragUpdate = dart.privateName(proxy_box, "_onHorizontalDragUpdate");
  var _onVerticalDragUpdate = dart.privateName(proxy_box, "_onVerticalDragUpdate");
  var _isValidAction = dart.privateName(proxy_box, "_isValidAction");
  var _performSemanticScrollRight = dart.privateName(proxy_box, "_performSemanticScrollRight");
  var _performSemanticScrollLeft = dart.privateName(proxy_box, "_performSemanticScrollLeft");
  var _performSemanticScrollUp = dart.privateName(proxy_box, "_performSemanticScrollUp");
  var _performSemanticScrollDown = dart.privateName(proxy_box, "_performSemanticScrollDown");
  var scrollFactor$ = dart.privateName(proxy_box, "RenderSemanticsGestureHandler.scrollFactor");
  proxy_box.RenderSemanticsGestureHandler = class RenderSemanticsGestureHandler extends proxy_box.RenderProxyBox {
    get scrollFactor() {
      return this[scrollFactor$];
    }
    set scrollFactor(value) {
      this[scrollFactor$] = value;
    }
    get validActions() {
      return this[_validActions];
    }
    set validActions(value) {
      if (dart.test(collections.setEquals(SemanticsActionL(), value, this[_validActions]))) return;
      this[_validActions] = value;
      this.markNeedsSemanticsUpdate();
    }
    get onTap() {
      return this[_onTap];
    }
    set onTap(value) {
      if (dart.equals(this[_onTap], value)) return;
      let hadHandler = this[_onTap] != null;
      this[_onTap] = value;
      if (!(value != null)[$_equals](hadHandler)) this.markNeedsSemanticsUpdate();
    }
    get onLongPress() {
      return this[_onLongPress];
    }
    set onLongPress(value) {
      if (dart.equals(this[_onLongPress], value)) return;
      let hadHandler = this[_onLongPress] != null;
      this[_onLongPress] = value;
      if (!(value != null)[$_equals](hadHandler)) this.markNeedsSemanticsUpdate();
    }
    get onHorizontalDragUpdate() {
      return this[_onHorizontalDragUpdate];
    }
    set onHorizontalDragUpdate(value) {
      if (dart.equals(this[_onHorizontalDragUpdate], value)) return;
      let hadHandler = this[_onHorizontalDragUpdate] != null;
      this[_onHorizontalDragUpdate] = value;
      if (!(value != null)[$_equals](hadHandler)) this.markNeedsSemanticsUpdate();
    }
    get onVerticalDragUpdate() {
      return this[_onVerticalDragUpdate];
    }
    set onVerticalDragUpdate(value) {
      if (dart.equals(this[_onVerticalDragUpdate], value)) return;
      let hadHandler = this[_onVerticalDragUpdate] != null;
      this[_onVerticalDragUpdate] = value;
      if (!(value != null)[$_equals](hadHandler)) this.markNeedsSemanticsUpdate();
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      if (this.onTap != null && dart.test(this[_isValidAction](ui.SemanticsAction.tap))) config.onTap = this.onTap;
      if (this.onLongPress != null && dart.test(this[_isValidAction](ui.SemanticsAction.longPress))) config.onLongPress = this.onLongPress;
      if (this.onHorizontalDragUpdate != null) {
        if (dart.test(this[_isValidAction](ui.SemanticsAction.scrollRight))) config.onScrollRight = dart.bind(this, _performSemanticScrollRight);
        if (dart.test(this[_isValidAction](ui.SemanticsAction.scrollLeft))) config.onScrollLeft = dart.bind(this, _performSemanticScrollLeft);
      }
      if (this.onVerticalDragUpdate != null) {
        if (dart.test(this[_isValidAction](ui.SemanticsAction.scrollUp))) config.onScrollUp = dart.bind(this, _performSemanticScrollUp);
        if (dart.test(this[_isValidAction](ui.SemanticsAction.scrollDown))) config.onScrollDown = dart.bind(this, _performSemanticScrollDown);
      }
    }
    [_isValidAction](action) {
      return this.validActions == null || dart.test(this.validActions.contains(action));
    }
    [_performSemanticScrollLeft]() {
      let t0;
      if (this.onHorizontalDragUpdate != null) {
        let primaryDelta = dart.notNull(this.size.width) * -dart.notNull(this.scrollFactor);
        t0 = new drag_details.DragUpdateDetails.new({delta: new ui.Offset.new(primaryDelta, 0.0), primaryDelta: primaryDelta, globalPosition: this.localToGlobal(this.size.center(ui.Offset.zero))});
        this.onHorizontalDragUpdate(t0);
      }
    }
    [_performSemanticScrollRight]() {
      let t0;
      if (this.onHorizontalDragUpdate != null) {
        let primaryDelta = dart.notNull(this.size.width) * dart.notNull(this.scrollFactor);
        t0 = new drag_details.DragUpdateDetails.new({delta: new ui.Offset.new(primaryDelta, 0.0), primaryDelta: primaryDelta, globalPosition: this.localToGlobal(this.size.center(ui.Offset.zero))});
        this.onHorizontalDragUpdate(t0);
      }
    }
    [_performSemanticScrollUp]() {
      let t0;
      if (this.onVerticalDragUpdate != null) {
        let primaryDelta = dart.notNull(this.size.height) * -dart.notNull(this.scrollFactor);
        t0 = new drag_details.DragUpdateDetails.new({delta: new ui.Offset.new(0.0, primaryDelta), primaryDelta: primaryDelta, globalPosition: this.localToGlobal(this.size.center(ui.Offset.zero))});
        this.onVerticalDragUpdate(t0);
      }
    }
    [_performSemanticScrollDown]() {
      let t0;
      if (this.onVerticalDragUpdate != null) {
        let primaryDelta = dart.notNull(this.size.height) * dart.notNull(this.scrollFactor);
        t0 = new drag_details.DragUpdateDetails.new({delta: new ui.Offset.new(0.0, primaryDelta), primaryDelta: primaryDelta, globalPosition: this.localToGlobal(this.size.center(ui.Offset.zero))});
        this.onVerticalDragUpdate(t0);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let gestures = (() => {
        let t0 = JSArrayOfStringL().of([]);
        if (this.onTap != null) t0[$add]("tap");
        if (this.onLongPress != null) t0[$add]("long press");
        if (this.onHorizontalDragUpdate != null) t0[$add]("horizontal scroll");
        if (this.onVerticalDragUpdate != null) t0[$add]("vertical scroll");
        return t0;
      })();
      if (dart.test(gestures[$isEmpty])) gestures[$add]("<none>");
      properties.add(new (IterablePropertyOfStringL()).new("gestures", gestures));
    }
  };
  (proxy_box.RenderSemanticsGestureHandler.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onHorizontalDragUpdate = opts && 'onHorizontalDragUpdate' in opts ? opts.onHorizontalDragUpdate : null;
    let onVerticalDragUpdate = opts && 'onVerticalDragUpdate' in opts ? opts.onVerticalDragUpdate : null;
    let scrollFactor = opts && 'scrollFactor' in opts ? opts.scrollFactor : 0.8;
    this[_validActions] = null;
    this[scrollFactor$] = scrollFactor;
    if (!(scrollFactor != null)) dart.assertFailed(null, L1, 3429, 15, "scrollFactor != null");
    this[_onTap] = onTap;
    this[_onLongPress] = onLongPress;
    this[_onHorizontalDragUpdate] = onHorizontalDragUpdate;
    this[_onVerticalDragUpdate] = onVerticalDragUpdate;
    proxy_box.RenderSemanticsGestureHandler.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderSemanticsGestureHandler.prototype;
  dart.addTypeTests(proxy_box.RenderSemanticsGestureHandler);
  dart.addTypeCaches(proxy_box.RenderSemanticsGestureHandler);
  dart.setMethodSignature(proxy_box.RenderSemanticsGestureHandler, () => ({
    __proto__: dart.getMethods(proxy_box.RenderSemanticsGestureHandler.__proto__),
    [_isValidAction]: dart.fnType(dart.legacy(core.bool), [dart.legacy(ui.SemanticsAction)]),
    [_performSemanticScrollLeft]: dart.fnType(dart.void, []),
    [_performSemanticScrollRight]: dart.fnType(dart.void, []),
    [_performSemanticScrollUp]: dart.fnType(dart.void, []),
    [_performSemanticScrollDown]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(proxy_box.RenderSemanticsGestureHandler, () => ({
    __proto__: dart.getGetters(proxy_box.RenderSemanticsGestureHandler.__proto__),
    validActions: dart.legacy(core.Set$(dart.legacy(ui.SemanticsAction))),
    onTap: dart.legacy(dart.fnType(dart.void, [])),
    onLongPress: dart.legacy(dart.fnType(dart.void, [])),
    onHorizontalDragUpdate: dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)])),
    onVerticalDragUpdate: dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)]))
  }));
  dart.setSetterSignature(proxy_box.RenderSemanticsGestureHandler, () => ({
    __proto__: dart.getSetters(proxy_box.RenderSemanticsGestureHandler.__proto__),
    validActions: dart.legacy(core.Set$(dart.legacy(ui.SemanticsAction))),
    onTap: dart.legacy(dart.fnType(dart.void, [])),
    onLongPress: dart.legacy(dart.fnType(dart.void, [])),
    onHorizontalDragUpdate: dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)])),
    onVerticalDragUpdate: dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)]))
  }));
  dart.setLibraryUri(proxy_box.RenderSemanticsGestureHandler, L0);
  dart.setFieldSignature(proxy_box.RenderSemanticsGestureHandler, () => ({
    __proto__: dart.getFields(proxy_box.RenderSemanticsGestureHandler.__proto__),
    [_validActions]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(ui.SemanticsAction)))),
    [_onTap]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onLongPress]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onHorizontalDragUpdate]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)]))),
    [_onVerticalDragUpdate]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(drag_details.DragUpdateDetails)]))),
    scrollFactor: dart.fieldType(dart.legacy(core.double))
  }));
  var _container = dart.privateName(proxy_box, "_container");
  var _explicitChildNodes = dart.privateName(proxy_box, "_explicitChildNodes");
  var _excludeSemantics = dart.privateName(proxy_box, "_excludeSemantics");
  var _enabled = dart.privateName(proxy_box, "_enabled");
  var _checked = dart.privateName(proxy_box, "_checked");
  var _toggled = dart.privateName(proxy_box, "_toggled");
  var _selected = dart.privateName(proxy_box, "_selected");
  var _button = dart.privateName(proxy_box, "_button");
  var _link = dart.privateName(proxy_box, "_link");
  var _header = dart.privateName(proxy_box, "_header");
  var _textField = dart.privateName(proxy_box, "_textField");
  var _readOnly = dart.privateName(proxy_box, "_readOnly");
  var _focusable = dart.privateName(proxy_box, "_focusable");
  var _focused = dart.privateName(proxy_box, "_focused");
  var _inMutuallyExclusiveGroup = dart.privateName(proxy_box, "_inMutuallyExclusiveGroup");
  var _obscured = dart.privateName(proxy_box, "_obscured");
  var _multiline = dart.privateName(proxy_box, "_multiline");
  var _scopesRoute = dart.privateName(proxy_box, "_scopesRoute");
  var _namesRoute = dart.privateName(proxy_box, "_namesRoute");
  var _liveRegion = dart.privateName(proxy_box, "_liveRegion");
  var _maxValueLength = dart.privateName(proxy_box, "_maxValueLength");
  var _currentValueLength = dart.privateName(proxy_box, "_currentValueLength");
  var _hidden = dart.privateName(proxy_box, "_hidden");
  var _image = dart.privateName(proxy_box, "_image");
  var _onDismiss = dart.privateName(proxy_box, "_onDismiss");
  var _label = dart.privateName(proxy_box, "_label");
  var _value = dart.privateName(proxy_box, "_value");
  var _increasedValue = dart.privateName(proxy_box, "_increasedValue");
  var _decreasedValue = dart.privateName(proxy_box, "_decreasedValue");
  var _hint = dart.privateName(proxy_box, "_hint");
  var _hintOverrides = dart.privateName(proxy_box, "_hintOverrides");
  var _sortKey = dart.privateName(proxy_box, "_sortKey");
  var _onScrollLeft = dart.privateName(proxy_box, "_onScrollLeft");
  var _onScrollRight = dart.privateName(proxy_box, "_onScrollRight");
  var _onScrollUp = dart.privateName(proxy_box, "_onScrollUp");
  var _onScrollDown = dart.privateName(proxy_box, "_onScrollDown");
  var _onIncrease = dart.privateName(proxy_box, "_onIncrease");
  var _onDecrease = dart.privateName(proxy_box, "_onDecrease");
  var _onCopy = dart.privateName(proxy_box, "_onCopy");
  var _onCut = dart.privateName(proxy_box, "_onCut");
  var _onPaste = dart.privateName(proxy_box, "_onPaste");
  var _onMoveCursorForwardByCharacter = dart.privateName(proxy_box, "_onMoveCursorForwardByCharacter");
  var _onMoveCursorBackwardByCharacter = dart.privateName(proxy_box, "_onMoveCursorBackwardByCharacter");
  var _onMoveCursorForwardByWord = dart.privateName(proxy_box, "_onMoveCursorForwardByWord");
  var _onMoveCursorBackwardByWord = dart.privateName(proxy_box, "_onMoveCursorBackwardByWord");
  var _onSetSelection = dart.privateName(proxy_box, "_onSetSelection");
  var _onDidGainAccessibilityFocus = dart.privateName(proxy_box, "_onDidGainAccessibilityFocus");
  var _onDidLoseAccessibilityFocus = dart.privateName(proxy_box, "_onDidLoseAccessibilityFocus");
  var _customSemanticsActions = dart.privateName(proxy_box, "_customSemanticsActions");
  var _performTap = dart.privateName(proxy_box, "_performTap");
  var _performLongPress = dart.privateName(proxy_box, "_performLongPress");
  var _performDismiss = dart.privateName(proxy_box, "_performDismiss");
  var _performScrollLeft = dart.privateName(proxy_box, "_performScrollLeft");
  var _performScrollRight = dart.privateName(proxy_box, "_performScrollRight");
  var _performScrollUp = dart.privateName(proxy_box, "_performScrollUp");
  var _performScrollDown = dart.privateName(proxy_box, "_performScrollDown");
  var _performIncrease = dart.privateName(proxy_box, "_performIncrease");
  var _performDecrease = dart.privateName(proxy_box, "_performDecrease");
  var _performCopy = dart.privateName(proxy_box, "_performCopy");
  var _performCut = dart.privateName(proxy_box, "_performCut");
  var _performPaste = dart.privateName(proxy_box, "_performPaste");
  var _performMoveCursorForwardByCharacter = dart.privateName(proxy_box, "_performMoveCursorForwardByCharacter");
  var _performMoveCursorBackwardByCharacter = dart.privateName(proxy_box, "_performMoveCursorBackwardByCharacter");
  var _performMoveCursorForwardByWord = dart.privateName(proxy_box, "_performMoveCursorForwardByWord");
  var _performMoveCursorBackwardByWord = dart.privateName(proxy_box, "_performMoveCursorBackwardByWord");
  var _performSetSelection = dart.privateName(proxy_box, "_performSetSelection");
  var _performDidGainAccessibilityFocus = dart.privateName(proxy_box, "_performDidGainAccessibilityFocus");
  var _performDidLoseAccessibilityFocus = dart.privateName(proxy_box, "_performDidLoseAccessibilityFocus");
  proxy_box.RenderSemanticsAnnotations = class RenderSemanticsAnnotations extends proxy_box.RenderProxyBox {
    get container() {
      return this[_container];
    }
    set container(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 3720, 12, "value != null");
      if (dart.equals(this.container, value)) return;
      this[_container] = value;
      this.markNeedsSemanticsUpdate();
    }
    get explicitChildNodes() {
      return this[_explicitChildNodes];
    }
    set explicitChildNodes(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 3743, 12, "value != null");
      if (dart.equals(this[_explicitChildNodes], value)) return;
      this[_explicitChildNodes] = value;
      this.markNeedsSemanticsUpdate();
    }
    get excludeSemantics() {
      return this[_excludeSemantics];
    }
    set excludeSemantics(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 3759, 12, "value != null");
      if (dart.equals(this[_excludeSemantics], value)) return;
      this[_excludeSemantics] = value;
      this.markNeedsSemanticsUpdate();
    }
    get checked() {
      return this[_checked];
    }
    set checked(value) {
      if (dart.equals(this.checked, value)) return;
      this[_checked] = value;
      this.markNeedsSemanticsUpdate();
    }
    get enabled() {
      return this[_enabled];
    }
    set enabled(value) {
      if (dart.equals(this.enabled, value)) return;
      this[_enabled] = value;
      this.markNeedsSemanticsUpdate();
    }
    get selected() {
      return this[_selected];
    }
    set selected(value) {
      if (dart.equals(this.selected, value)) return;
      this[_selected] = value;
      this.markNeedsSemanticsUpdate();
    }
    get button() {
      return this[_button];
    }
    set button(value) {
      if (dart.equals(this.button, value)) return;
      this[_button] = value;
      this.markNeedsSemanticsUpdate();
    }
    get link() {
      return this[_link];
    }
    set link(value) {
      if (dart.equals(this.link, value)) return;
      this[_link] = value;
      this.markNeedsSemanticsUpdate();
    }
    get header() {
      return this[_header];
    }
    set header(value) {
      if (dart.equals(this.header, value)) return;
      this[_header] = value;
      this.markNeedsSemanticsUpdate();
    }
    get textField() {
      return this[_textField];
    }
    set textField(value) {
      if (dart.equals(this.textField, value)) return;
      this[_textField] = value;
      this.markNeedsSemanticsUpdate();
    }
    get readOnly() {
      return this[_readOnly];
    }
    set readOnly(value) {
      if (dart.equals(this.readOnly, value)) return;
      this[_readOnly] = value;
      this.markNeedsSemanticsUpdate();
    }
    get focusable() {
      return this[_focusable];
    }
    set focusable(value) {
      if (dart.equals(this.focusable, value)) return;
      this[_focusable] = value;
      this.markNeedsSemanticsUpdate();
    }
    get focused() {
      return this[_focused];
    }
    set focused(value) {
      if (dart.equals(this.focused, value)) return;
      this[_focused] = value;
      this.markNeedsSemanticsUpdate();
    }
    get inMutuallyExclusiveGroup() {
      return this[_inMutuallyExclusiveGroup];
    }
    set inMutuallyExclusiveGroup(value) {
      if (dart.equals(this.inMutuallyExclusiveGroup, value)) return;
      this[_inMutuallyExclusiveGroup] = value;
      this.markNeedsSemanticsUpdate();
    }
    get obscured() {
      return this[_obscured];
    }
    set obscured(value) {
      if (dart.equals(this.obscured, value)) return;
      this[_obscured] = value;
      this.markNeedsSemanticsUpdate();
    }
    get multiline() {
      return this[_multiline];
    }
    set multiline(value) {
      if (dart.equals(this.multiline, value)) return;
      this[_multiline] = value;
      this.markNeedsSemanticsUpdate();
    }
    get scopesRoute() {
      return this[_scopesRoute];
    }
    set scopesRoute(value) {
      if (dart.equals(this.scopesRoute, value)) return;
      this[_scopesRoute] = value;
      this.markNeedsSemanticsUpdate();
    }
    get namesRoute() {
      return this[_namesRoute];
    }
    set namesRoute(value) {
      if (dart.equals(this[_namesRoute], value)) return;
      this[_namesRoute] = value;
      this.markNeedsSemanticsUpdate();
    }
    get hidden() {
      return this[_hidden];
    }
    set hidden(value) {
      if (dart.equals(this.hidden, value)) return;
      this[_hidden] = value;
      this.markNeedsSemanticsUpdate();
    }
    get image() {
      return this[_image];
    }
    set image(value) {
      if (dart.equals(this[_image], value)) return;
      this[_image] = value;
    }
    get liveRegion() {
      return this[_liveRegion];
    }
    set liveRegion(value) {
      if (dart.equals(this[_liveRegion], value)) return;
      this[_liveRegion] = value;
      this.markNeedsSemanticsUpdate();
    }
    get maxValueLength() {
      return this[_maxValueLength];
    }
    set maxValueLength(value) {
      if (this[_maxValueLength] == value) return;
      this[_maxValueLength] = value;
      this.markNeedsSemanticsUpdate();
    }
    get currentValueLength() {
      return this[_currentValueLength];
    }
    set currentValueLength(value) {
      if (this[_currentValueLength] == value) return;
      this[_currentValueLength] = value;
      this.markNeedsSemanticsUpdate();
    }
    get toggled() {
      return this[_toggled];
    }
    set toggled(value) {
      if (dart.equals(this[_toggled], value)) return;
      this[_toggled] = value;
      this.markNeedsSemanticsUpdate();
    }
    get label() {
      return this[_label];
    }
    set label(value) {
      if (this[_label] == value) return;
      this[_label] = value;
      this.markNeedsSemanticsUpdate();
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      if (this[_value] == value) return;
      this[_value] = value;
      this.markNeedsSemanticsUpdate();
    }
    get increasedValue() {
      return this[_increasedValue];
    }
    set increasedValue(value) {
      if (this[_increasedValue] == value) return;
      this[_increasedValue] = value;
      this.markNeedsSemanticsUpdate();
    }
    get decreasedValue() {
      return this[_decreasedValue];
    }
    set decreasedValue(value) {
      if (this[_decreasedValue] == value) return;
      this[_decreasedValue] = value;
      this.markNeedsSemanticsUpdate();
    }
    get hint() {
      return this[_hint];
    }
    set hint(value) {
      if (this[_hint] == value) return;
      this[_hint] = value;
      this.markNeedsSemanticsUpdate();
    }
    get hintOverrides() {
      return this[_hintOverrides];
    }
    set hintOverrides(value) {
      if (dart.equals(this[_hintOverrides], value)) return;
      this[_hintOverrides] = value;
      this.markNeedsSemanticsUpdate();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (dart.equals(this.textDirection, value)) return;
      this[_textDirection] = value;
      this.markNeedsSemanticsUpdate();
    }
    get sortKey() {
      return this[_sortKey];
    }
    set sortKey(value) {
      if (dart.equals(this.sortKey, value)) return;
      this[_sortKey] = value;
      this.markNeedsSemanticsUpdate();
    }
    get onTap() {
      return this[_onTap];
    }
    set onTap(handler) {
      if (dart.equals(this[_onTap], handler)) return;
      let hadValue = this[_onTap] != null;
      this[_onTap] = handler;
      if ((handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onDismiss() {
      return this[_onDismiss];
    }
    set onDismiss(handler) {
      if (dart.equals(this[_onDismiss], handler)) return;
      let hadValue = this[_onDismiss] != null;
      this[_onDismiss] = handler;
      if ((handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onLongPress() {
      return this[_onLongPress];
    }
    set onLongPress(handler) {
      if (dart.equals(this[_onLongPress], handler)) return;
      let hadValue = this[_onLongPress] != null;
      this[_onLongPress] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onScrollLeft() {
      return this[_onScrollLeft];
    }
    set onScrollLeft(handler) {
      if (dart.equals(this[_onScrollLeft], handler)) return;
      let hadValue = this[_onScrollLeft] != null;
      this[_onScrollLeft] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onScrollRight() {
      return this[_onScrollRight];
    }
    set onScrollRight(handler) {
      if (dart.equals(this[_onScrollRight], handler)) return;
      let hadValue = this[_onScrollRight] != null;
      this[_onScrollRight] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onScrollUp() {
      return this[_onScrollUp];
    }
    set onScrollUp(handler) {
      if (dart.equals(this[_onScrollUp], handler)) return;
      let hadValue = this[_onScrollUp] != null;
      this[_onScrollUp] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onScrollDown() {
      return this[_onScrollDown];
    }
    set onScrollDown(handler) {
      if (dart.equals(this[_onScrollDown], handler)) return;
      let hadValue = this[_onScrollDown] != null;
      this[_onScrollDown] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onIncrease() {
      return this[_onIncrease];
    }
    set onIncrease(handler) {
      if (dart.equals(this[_onIncrease], handler)) return;
      let hadValue = this[_onIncrease] != null;
      this[_onIncrease] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onDecrease() {
      return this[_onDecrease];
    }
    set onDecrease(handler) {
      if (dart.equals(this[_onDecrease], handler)) return;
      let hadValue = this[_onDecrease] != null;
      this[_onDecrease] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onCopy() {
      return this[_onCopy];
    }
    set onCopy(handler) {
      if (dart.equals(this[_onCopy], handler)) return;
      let hadValue = this[_onCopy] != null;
      this[_onCopy] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onCut() {
      return this[_onCut];
    }
    set onCut(handler) {
      if (dart.equals(this[_onCut], handler)) return;
      let hadValue = this[_onCut] != null;
      this[_onCut] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onPaste() {
      return this[_onPaste];
    }
    set onPaste(handler) {
      if (dart.equals(this[_onPaste], handler)) return;
      let hadValue = this[_onPaste] != null;
      this[_onPaste] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onMoveCursorForwardByCharacter() {
      return this[_onMoveCursorForwardByCharacter];
    }
    set onMoveCursorForwardByCharacter(handler) {
      if (dart.equals(this[_onMoveCursorForwardByCharacter], handler)) return;
      let hadValue = this[_onMoveCursorForwardByCharacter] != null;
      this[_onMoveCursorForwardByCharacter] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onMoveCursorBackwardByCharacter() {
      return this[_onMoveCursorBackwardByCharacter];
    }
    set onMoveCursorBackwardByCharacter(handler) {
      if (dart.equals(this[_onMoveCursorBackwardByCharacter], handler)) return;
      let hadValue = this[_onMoveCursorBackwardByCharacter] != null;
      this[_onMoveCursorBackwardByCharacter] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onMoveCursorForwardByWord() {
      return this[_onMoveCursorForwardByWord];
    }
    set onMoveCursorForwardByWord(handler) {
      if (dart.equals(this[_onMoveCursorForwardByWord], handler)) return;
      let hadValue = this[_onMoveCursorForwardByWord] != null;
      this[_onMoveCursorForwardByWord] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onMoveCursorBackwardByWord() {
      return this[_onMoveCursorBackwardByWord];
    }
    set onMoveCursorBackwardByWord(handler) {
      if (dart.equals(this[_onMoveCursorBackwardByWord], handler)) return;
      let hadValue = this[_onMoveCursorBackwardByWord] != null;
      this[_onMoveCursorBackwardByWord] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onSetSelection() {
      return this[_onSetSelection];
    }
    set onSetSelection(handler) {
      if (dart.equals(this[_onSetSelection], handler)) return;
      let hadValue = this[_onSetSelection] != null;
      this[_onSetSelection] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onDidGainAccessibilityFocus() {
      return this[_onDidGainAccessibilityFocus];
    }
    set onDidGainAccessibilityFocus(handler) {
      if (dart.equals(this[_onDidGainAccessibilityFocus], handler)) return;
      let hadValue = this[_onDidGainAccessibilityFocus] != null;
      this[_onDidGainAccessibilityFocus] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get onDidLoseAccessibilityFocus() {
      return this[_onDidLoseAccessibilityFocus];
    }
    set onDidLoseAccessibilityFocus(handler) {
      if (dart.equals(this[_onDidLoseAccessibilityFocus], handler)) return;
      let hadValue = this[_onDidLoseAccessibilityFocus] != null;
      this[_onDidLoseAccessibilityFocus] = handler;
      if (!(handler != null)[$_equals](hadValue)) this.markNeedsSemanticsUpdate();
    }
    get customSemanticsActions() {
      return this[_customSemanticsActions];
    }
    set customSemanticsActions(value) {
      if (dart.equals(this[_customSemanticsActions], value)) return;
      this[_customSemanticsActions] = value;
      this.markNeedsSemanticsUpdate();
    }
    visitChildrenForSemantics(visitor) {
      if (dart.test(this.excludeSemantics)) return;
      super.visitChildrenForSemantics(visitor);
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = this.container;
      config.explicitChildNodes = this.explicitChildNodes;
      if (!(dart.equals(this.scopesRoute, true) && dart.equals(this.explicitChildNodes, true) || !dart.equals(this.scopesRoute, true))) dart.assertFailed("explicitChildNodes must be set to true if scopes route is true", L1, 4497, 12, "(scopesRoute == true && explicitChildNodes == true) || scopesRoute != true");
      if (!!(dart.equals(this.toggled, true) && dart.equals(this.checked, true))) dart.assertFailed("A semantics node cannot be toggled and checked at the same time", L1, 4499, 12, "!(toggled == true && checked == true)");
      if (this.enabled != null) config.isEnabled = this.enabled;
      if (this.checked != null) config.isChecked = this.checked;
      if (this.toggled != null) config.isToggled = this.toggled;
      if (this.selected != null) config.isSelected = this.selected;
      if (this.button != null) config.isButton = this.button;
      if (this.link != null) config.isLink = this.link;
      if (this.header != null) config.isHeader = this.header;
      if (this.textField != null) config.isTextField = this.textField;
      if (this.readOnly != null) config.isReadOnly = this.readOnly;
      if (this.focusable != null) config.isFocusable = this.focusable;
      if (this.focused != null) config.isFocused = this.focused;
      if (this.inMutuallyExclusiveGroup != null) config.isInMutuallyExclusiveGroup = this.inMutuallyExclusiveGroup;
      if (this.obscured != null) config.isObscured = this.obscured;
      if (this.multiline != null) config.isMultiline = this.multiline;
      if (this.hidden != null) config.isHidden = this.hidden;
      if (this.image != null) config.isImage = this.image;
      if (this.label != null) config.label = this.label;
      if (this.value != null) config.value = this.value;
      if (this.increasedValue != null) config.increasedValue = this.increasedValue;
      if (this.decreasedValue != null) config.decreasedValue = this.decreasedValue;
      if (this.hint != null) config.hint = this.hint;
      if (this.hintOverrides != null && dart.test(this.hintOverrides.isNotEmpty)) config.hintOverrides = this.hintOverrides;
      if (this.scopesRoute != null) config.scopesRoute = this.scopesRoute;
      if (this.namesRoute != null) config.namesRoute = this.namesRoute;
      if (this.liveRegion != null) config.liveRegion = this.liveRegion;
      if (this.maxValueLength != null) {
        config.maxValueLength = this.maxValueLength;
      }
      if (this.currentValueLength != null) {
        config.currentValueLength = this.currentValueLength;
      }
      if (this.textDirection != null) config.textDirection = this.textDirection;
      if (this.sortKey != null) config.sortKey = this.sortKey;
      if (this.onTap != null) config.onTap = dart.bind(this, _performTap);
      if (this.onLongPress != null) config.onLongPress = dart.bind(this, _performLongPress);
      if (this.onDismiss != null) config.onDismiss = dart.bind(this, _performDismiss);
      if (this.onScrollLeft != null) config.onScrollLeft = dart.bind(this, _performScrollLeft);
      if (this.onScrollRight != null) config.onScrollRight = dart.bind(this, _performScrollRight);
      if (this.onScrollUp != null) config.onScrollUp = dart.bind(this, _performScrollUp);
      if (this.onScrollDown != null) config.onScrollDown = dart.bind(this, _performScrollDown);
      if (this.onIncrease != null) config.onIncrease = dart.bind(this, _performIncrease);
      if (this.onDecrease != null) config.onDecrease = dart.bind(this, _performDecrease);
      if (this.onCopy != null) config.onCopy = dart.bind(this, _performCopy);
      if (this.onCut != null) config.onCut = dart.bind(this, _performCut);
      if (this.onPaste != null) config.onPaste = dart.bind(this, _performPaste);
      if (this.onMoveCursorForwardByCharacter != null) config.onMoveCursorForwardByCharacter = dart.bind(this, _performMoveCursorForwardByCharacter);
      if (this.onMoveCursorBackwardByCharacter != null) config.onMoveCursorBackwardByCharacter = dart.bind(this, _performMoveCursorBackwardByCharacter);
      if (this.onMoveCursorForwardByWord != null) config.onMoveCursorForwardByWord = dart.bind(this, _performMoveCursorForwardByWord);
      if (this.onMoveCursorBackwardByWord != null) config.onMoveCursorBackwardByWord = dart.bind(this, _performMoveCursorBackwardByWord);
      if (this.onSetSelection != null) config.onSetSelection = dart.bind(this, _performSetSelection);
      if (this.onDidGainAccessibilityFocus != null) config.onDidGainAccessibilityFocus = dart.bind(this, _performDidGainAccessibilityFocus);
      if (this.onDidLoseAccessibilityFocus != null) config.onDidLoseAccessibilityFocus = dart.bind(this, _performDidLoseAccessibilityFocus);
      if (this.customSemanticsActions != null) config.customSemanticsActions = this[_customSemanticsActions];
    }
    [_performTap]() {
      if (this.onTap != null) this.onTap();
    }
    [_performLongPress]() {
      if (this.onLongPress != null) this.onLongPress();
    }
    [_performDismiss]() {
      if (this.onDismiss != null) this.onDismiss();
    }
    [_performScrollLeft]() {
      if (this.onScrollLeft != null) this.onScrollLeft();
    }
    [_performScrollRight]() {
      if (this.onScrollRight != null) this.onScrollRight();
    }
    [_performScrollUp]() {
      if (this.onScrollUp != null) this.onScrollUp();
    }
    [_performScrollDown]() {
      if (this.onScrollDown != null) this.onScrollDown();
    }
    [_performIncrease]() {
      if (this.onIncrease != null) this.onIncrease();
    }
    [_performDecrease]() {
      if (this.onDecrease != null) this.onDecrease();
    }
    [_performCopy]() {
      if (this.onCopy != null) this.onCopy();
    }
    [_performCut]() {
      if (this.onCut != null) this.onCut();
    }
    [_performPaste]() {
      if (this.onPaste != null) this.onPaste();
    }
    [_performMoveCursorForwardByCharacter](extendSelection) {
      let t1;
      if (this.onMoveCursorForwardByCharacter != null) {
        t1 = extendSelection;
        this.onMoveCursorForwardByCharacter(t1);
      }
    }
    [_performMoveCursorBackwardByCharacter](extendSelection) {
      let t1;
      if (this.onMoveCursorBackwardByCharacter != null) {
        t1 = extendSelection;
        this.onMoveCursorBackwardByCharacter(t1);
      }
    }
    [_performMoveCursorForwardByWord](extendSelection) {
      let t1;
      if (this.onMoveCursorForwardByWord != null) {
        t1 = extendSelection;
        this.onMoveCursorForwardByWord(t1);
      }
    }
    [_performMoveCursorBackwardByWord](extendSelection) {
      let t1;
      if (this.onMoveCursorBackwardByWord != null) {
        t1 = extendSelection;
        this.onMoveCursorBackwardByWord(t1);
      }
    }
    [_performSetSelection](selection) {
      let t1;
      if (this.onSetSelection != null) {
        t1 = selection;
        this.onSetSelection(t1);
      }
    }
    [_performDidGainAccessibilityFocus]() {
      if (this.onDidGainAccessibilityFocus != null) this.onDidGainAccessibilityFocus();
    }
    [_performDidLoseAccessibilityFocus]() {
      if (this.onDidLoseAccessibilityFocus != null) this.onDidLoseAccessibilityFocus();
    }
  };
  (proxy_box.RenderSemanticsAnnotations.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let container = opts && 'container' in opts ? opts.container : false;
    let explicitChildNodes = opts && 'explicitChildNodes' in opts ? opts.explicitChildNodes : null;
    let excludeSemantics = opts && 'excludeSemantics' in opts ? opts.excludeSemantics : false;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let checked = opts && 'checked' in opts ? opts.checked : null;
    let toggled = opts && 'toggled' in opts ? opts.toggled : null;
    let selected = opts && 'selected' in opts ? opts.selected : null;
    let button = opts && 'button' in opts ? opts.button : null;
    let link = opts && 'link' in opts ? opts.link : null;
    let header = opts && 'header' in opts ? opts.header : null;
    let textField = opts && 'textField' in opts ? opts.textField : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
    let focusable = opts && 'focusable' in opts ? opts.focusable : null;
    let focused = opts && 'focused' in opts ? opts.focused : null;
    let inMutuallyExclusiveGroup = opts && 'inMutuallyExclusiveGroup' in opts ? opts.inMutuallyExclusiveGroup : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : null;
    let multiline = opts && 'multiline' in opts ? opts.multiline : null;
    let scopesRoute = opts && 'scopesRoute' in opts ? opts.scopesRoute : null;
    let namesRoute = opts && 'namesRoute' in opts ? opts.namesRoute : null;
    let hidden = opts && 'hidden' in opts ? opts.hidden : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let liveRegion = opts && 'liveRegion' in opts ? opts.liveRegion : null;
    let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
    let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let hintOverrides = opts && 'hintOverrides' in opts ? opts.hintOverrides : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onScrollLeft = opts && 'onScrollLeft' in opts ? opts.onScrollLeft : null;
    let onScrollRight = opts && 'onScrollRight' in opts ? opts.onScrollRight : null;
    let onScrollUp = opts && 'onScrollUp' in opts ? opts.onScrollUp : null;
    let onScrollDown = opts && 'onScrollDown' in opts ? opts.onScrollDown : null;
    let onIncrease = opts && 'onIncrease' in opts ? opts.onIncrease : null;
    let onDecrease = opts && 'onDecrease' in opts ? opts.onDecrease : null;
    let onCopy = opts && 'onCopy' in opts ? opts.onCopy : null;
    let onCut = opts && 'onCut' in opts ? opts.onCut : null;
    let onPaste = opts && 'onPaste' in opts ? opts.onPaste : null;
    let onMoveCursorForwardByCharacter = opts && 'onMoveCursorForwardByCharacter' in opts ? opts.onMoveCursorForwardByCharacter : null;
    let onMoveCursorBackwardByCharacter = opts && 'onMoveCursorBackwardByCharacter' in opts ? opts.onMoveCursorBackwardByCharacter : null;
    let onMoveCursorForwardByWord = opts && 'onMoveCursorForwardByWord' in opts ? opts.onMoveCursorForwardByWord : null;
    let onMoveCursorBackwardByWord = opts && 'onMoveCursorBackwardByWord' in opts ? opts.onMoveCursorBackwardByWord : null;
    let onSetSelection = opts && 'onSetSelection' in opts ? opts.onSetSelection : null;
    let onDidGainAccessibilityFocus = opts && 'onDidGainAccessibilityFocus' in opts ? opts.onDidGainAccessibilityFocus : null;
    let onDidLoseAccessibilityFocus = opts && 'onDidLoseAccessibilityFocus' in opts ? opts.onDidLoseAccessibilityFocus : null;
    let customSemanticsActions = opts && 'customSemanticsActions' in opts ? opts.customSemanticsActions : null;
    if (!(container != null)) dart.assertFailed(null, L1, 3655, 15, "container != null");
    this[_container] = container;
    this[_explicitChildNodes] = explicitChildNodes;
    this[_excludeSemantics] = excludeSemantics;
    this[_enabled] = enabled;
    this[_checked] = checked;
    this[_toggled] = toggled;
    this[_selected] = selected;
    this[_button] = button;
    this[_link] = link;
    this[_header] = header;
    this[_textField] = textField;
    this[_readOnly] = readOnly;
    this[_focusable] = focusable;
    this[_focused] = focused;
    this[_inMutuallyExclusiveGroup] = inMutuallyExclusiveGroup;
    this[_obscured] = obscured;
    this[_multiline] = multiline;
    this[_scopesRoute] = scopesRoute;
    this[_namesRoute] = namesRoute;
    this[_liveRegion] = liveRegion;
    this[_maxValueLength] = maxValueLength;
    this[_currentValueLength] = currentValueLength;
    this[_hidden] = hidden;
    this[_image] = image;
    this[_onDismiss] = onDismiss;
    this[_label] = label;
    this[_value] = value;
    this[_increasedValue] = increasedValue;
    this[_decreasedValue] = decreasedValue;
    this[_hint] = hint;
    this[_hintOverrides] = hintOverrides;
    this[_textDirection] = textDirection;
    this[_sortKey] = sortKey;
    this[_onTap] = onTap;
    this[_onLongPress] = onLongPress;
    this[_onScrollLeft] = onScrollLeft;
    this[_onScrollRight] = onScrollRight;
    this[_onScrollUp] = onScrollUp;
    this[_onScrollDown] = onScrollDown;
    this[_onIncrease] = onIncrease;
    this[_onDecrease] = onDecrease;
    this[_onCopy] = onCopy;
    this[_onCut] = onCut;
    this[_onPaste] = onPaste;
    this[_onMoveCursorForwardByCharacter] = onMoveCursorForwardByCharacter;
    this[_onMoveCursorBackwardByCharacter] = onMoveCursorBackwardByCharacter;
    this[_onMoveCursorForwardByWord] = onMoveCursorForwardByWord;
    this[_onMoveCursorBackwardByWord] = onMoveCursorBackwardByWord;
    this[_onSetSelection] = onSetSelection;
    this[_onDidGainAccessibilityFocus] = onDidGainAccessibilityFocus;
    this[_onDidLoseAccessibilityFocus] = onDidLoseAccessibilityFocus;
    this[_customSemanticsActions] = customSemanticsActions;
    proxy_box.RenderSemanticsAnnotations.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderSemanticsAnnotations.prototype;
  dart.addTypeTests(proxy_box.RenderSemanticsAnnotations);
  dart.addTypeCaches(proxy_box.RenderSemanticsAnnotations);
  dart.setMethodSignature(proxy_box.RenderSemanticsAnnotations, () => ({
    __proto__: dart.getMethods(proxy_box.RenderSemanticsAnnotations.__proto__),
    [_performTap]: dart.fnType(dart.void, []),
    [_performLongPress]: dart.fnType(dart.void, []),
    [_performDismiss]: dart.fnType(dart.void, []),
    [_performScrollLeft]: dart.fnType(dart.void, []),
    [_performScrollRight]: dart.fnType(dart.void, []),
    [_performScrollUp]: dart.fnType(dart.void, []),
    [_performScrollDown]: dart.fnType(dart.void, []),
    [_performIncrease]: dart.fnType(dart.void, []),
    [_performDecrease]: dart.fnType(dart.void, []),
    [_performCopy]: dart.fnType(dart.void, []),
    [_performCut]: dart.fnType(dart.void, []),
    [_performPaste]: dart.fnType(dart.void, []),
    [_performMoveCursorForwardByCharacter]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_performMoveCursorBackwardByCharacter]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_performMoveCursorForwardByWord]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_performMoveCursorBackwardByWord]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_performSetSelection]: dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection)]),
    [_performDidGainAccessibilityFocus]: dart.fnType(dart.void, []),
    [_performDidLoseAccessibilityFocus]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(proxy_box.RenderSemanticsAnnotations, () => ({
    __proto__: dart.getGetters(proxy_box.RenderSemanticsAnnotations.__proto__),
    container: dart.legacy(core.bool),
    explicitChildNodes: dart.legacy(core.bool),
    excludeSemantics: dart.legacy(core.bool),
    checked: dart.legacy(core.bool),
    enabled: dart.legacy(core.bool),
    selected: dart.legacy(core.bool),
    button: dart.legacy(core.bool),
    link: dart.legacy(core.bool),
    header: dart.legacy(core.bool),
    textField: dart.legacy(core.bool),
    readOnly: dart.legacy(core.bool),
    focusable: dart.legacy(core.bool),
    focused: dart.legacy(core.bool),
    inMutuallyExclusiveGroup: dart.legacy(core.bool),
    obscured: dart.legacy(core.bool),
    multiline: dart.legacy(core.bool),
    scopesRoute: dart.legacy(core.bool),
    namesRoute: dart.legacy(core.bool),
    hidden: dart.legacy(core.bool),
    image: dart.legacy(core.bool),
    liveRegion: dart.legacy(core.bool),
    maxValueLength: dart.legacy(core.int),
    currentValueLength: dart.legacy(core.int),
    toggled: dart.legacy(core.bool),
    label: dart.legacy(core.String),
    value: dart.legacy(core.String),
    increasedValue: dart.legacy(core.String),
    decreasedValue: dart.legacy(core.String),
    hint: dart.legacy(core.String),
    hintOverrides: dart.legacy(semantics.SemanticsHintOverrides),
    textDirection: dart.legacy(ui.TextDirection),
    sortKey: dart.legacy(semantics.SemanticsSortKey),
    onTap: dart.legacy(dart.fnType(dart.void, [])),
    onDismiss: dart.legacy(dart.fnType(dart.void, [])),
    onLongPress: dart.legacy(dart.fnType(dart.void, [])),
    onScrollLeft: dart.legacy(dart.fnType(dart.void, [])),
    onScrollRight: dart.legacy(dart.fnType(dart.void, [])),
    onScrollUp: dart.legacy(dart.fnType(dart.void, [])),
    onScrollDown: dart.legacy(dart.fnType(dart.void, [])),
    onIncrease: dart.legacy(dart.fnType(dart.void, [])),
    onDecrease: dart.legacy(dart.fnType(dart.void, [])),
    onCopy: dart.legacy(dart.fnType(dart.void, [])),
    onCut: dart.legacy(dart.fnType(dart.void, [])),
    onPaste: dart.legacy(dart.fnType(dart.void, [])),
    onMoveCursorForwardByCharacter: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorBackwardByCharacter: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorForwardByWord: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorBackwardByWord: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onSetSelection: dart.legacy(dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection)])),
    onDidGainAccessibilityFocus: dart.legacy(dart.fnType(dart.void, [])),
    onDidLoseAccessibilityFocus: dart.legacy(dart.fnType(dart.void, [])),
    customSemanticsActions: dart.legacy(core.Map$(dart.legacy(semantics.CustomSemanticsAction), dart.legacy(dart.fnType(dart.void, []))))
  }));
  dart.setSetterSignature(proxy_box.RenderSemanticsAnnotations, () => ({
    __proto__: dart.getSetters(proxy_box.RenderSemanticsAnnotations.__proto__),
    container: dart.legacy(core.bool),
    explicitChildNodes: dart.legacy(core.bool),
    excludeSemantics: dart.legacy(core.bool),
    checked: dart.legacy(core.bool),
    enabled: dart.legacy(core.bool),
    selected: dart.legacy(core.bool),
    button: dart.legacy(core.bool),
    link: dart.legacy(core.bool),
    header: dart.legacy(core.bool),
    textField: dart.legacy(core.bool),
    readOnly: dart.legacy(core.bool),
    focusable: dart.legacy(core.bool),
    focused: dart.legacy(core.bool),
    inMutuallyExclusiveGroup: dart.legacy(core.bool),
    obscured: dart.legacy(core.bool),
    multiline: dart.legacy(core.bool),
    scopesRoute: dart.legacy(core.bool),
    namesRoute: dart.legacy(core.bool),
    hidden: dart.legacy(core.bool),
    image: dart.legacy(core.bool),
    liveRegion: dart.legacy(core.bool),
    maxValueLength: dart.legacy(core.int),
    currentValueLength: dart.legacy(core.int),
    toggled: dart.legacy(core.bool),
    label: dart.legacy(core.String),
    value: dart.legacy(core.String),
    increasedValue: dart.legacy(core.String),
    decreasedValue: dart.legacy(core.String),
    hint: dart.legacy(core.String),
    hintOverrides: dart.legacy(semantics.SemanticsHintOverrides),
    textDirection: dart.legacy(ui.TextDirection),
    sortKey: dart.legacy(semantics.SemanticsSortKey),
    onTap: dart.legacy(dart.fnType(dart.void, [])),
    onDismiss: dart.legacy(dart.fnType(dart.void, [])),
    onLongPress: dart.legacy(dart.fnType(dart.void, [])),
    onScrollLeft: dart.legacy(dart.fnType(dart.void, [])),
    onScrollRight: dart.legacy(dart.fnType(dart.void, [])),
    onScrollUp: dart.legacy(dart.fnType(dart.void, [])),
    onScrollDown: dart.legacy(dart.fnType(dart.void, [])),
    onIncrease: dart.legacy(dart.fnType(dart.void, [])),
    onDecrease: dart.legacy(dart.fnType(dart.void, [])),
    onCopy: dart.legacy(dart.fnType(dart.void, [])),
    onCut: dart.legacy(dart.fnType(dart.void, [])),
    onPaste: dart.legacy(dart.fnType(dart.void, [])),
    onMoveCursorForwardByCharacter: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorBackwardByCharacter: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorForwardByWord: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onMoveCursorBackwardByWord: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])),
    onSetSelection: dart.legacy(dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection)])),
    onDidGainAccessibilityFocus: dart.legacy(dart.fnType(dart.void, [])),
    onDidLoseAccessibilityFocus: dart.legacy(dart.fnType(dart.void, [])),
    customSemanticsActions: dart.legacy(core.Map$(dart.legacy(semantics.CustomSemanticsAction), dart.legacy(dart.fnType(dart.void, []))))
  }));
  dart.setLibraryUri(proxy_box.RenderSemanticsAnnotations, L0);
  dart.setFieldSignature(proxy_box.RenderSemanticsAnnotations, () => ({
    __proto__: dart.getFields(proxy_box.RenderSemanticsAnnotations.__proto__),
    [_container]: dart.fieldType(dart.legacy(core.bool)),
    [_explicitChildNodes]: dart.fieldType(dart.legacy(core.bool)),
    [_excludeSemantics]: dart.fieldType(dart.legacy(core.bool)),
    [_checked]: dart.fieldType(dart.legacy(core.bool)),
    [_enabled]: dart.fieldType(dart.legacy(core.bool)),
    [_selected]: dart.fieldType(dart.legacy(core.bool)),
    [_button]: dart.fieldType(dart.legacy(core.bool)),
    [_link]: dart.fieldType(dart.legacy(core.bool)),
    [_header]: dart.fieldType(dart.legacy(core.bool)),
    [_textField]: dart.fieldType(dart.legacy(core.bool)),
    [_readOnly]: dart.fieldType(dart.legacy(core.bool)),
    [_focusable]: dart.fieldType(dart.legacy(core.bool)),
    [_focused]: dart.fieldType(dart.legacy(core.bool)),
    [_inMutuallyExclusiveGroup]: dart.fieldType(dart.legacy(core.bool)),
    [_obscured]: dart.fieldType(dart.legacy(core.bool)),
    [_multiline]: dart.fieldType(dart.legacy(core.bool)),
    [_scopesRoute]: dart.fieldType(dart.legacy(core.bool)),
    [_namesRoute]: dart.fieldType(dart.legacy(core.bool)),
    [_hidden]: dart.fieldType(dart.legacy(core.bool)),
    [_image]: dart.fieldType(dart.legacy(core.bool)),
    [_liveRegion]: dart.fieldType(dart.legacy(core.bool)),
    [_maxValueLength]: dart.fieldType(dart.legacy(core.int)),
    [_currentValueLength]: dart.fieldType(dart.legacy(core.int)),
    [_toggled]: dart.fieldType(dart.legacy(core.bool)),
    [_label]: dart.fieldType(dart.legacy(core.String)),
    [_value]: dart.fieldType(dart.legacy(core.String)),
    [_increasedValue]: dart.fieldType(dart.legacy(core.String)),
    [_decreasedValue]: dart.fieldType(dart.legacy(core.String)),
    [_hint]: dart.fieldType(dart.legacy(core.String)),
    [_hintOverrides]: dart.fieldType(dart.legacy(semantics.SemanticsHintOverrides)),
    [_textDirection]: dart.fieldType(dart.legacy(ui.TextDirection)),
    [_sortKey]: dart.fieldType(dart.legacy(semantics.SemanticsSortKey)),
    [_onTap]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onDismiss]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onLongPress]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onScrollLeft]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onScrollRight]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onScrollUp]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onScrollDown]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onIncrease]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onDecrease]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onCopy]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onCut]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onPaste]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onMoveCursorForwardByCharacter]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)]))),
    [_onMoveCursorBackwardByCharacter]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)]))),
    [_onMoveCursorForwardByWord]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)]))),
    [_onMoveCursorBackwardByWord]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)]))),
    [_onSetSelection]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection)]))),
    [_onDidGainAccessibilityFocus]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onDidLoseAccessibilityFocus]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_customSemanticsActions]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(semantics.CustomSemanticsAction), dart.legacy(dart.fnType(dart.void, [])))))
  }));
  var _blocking = dart.privateName(proxy_box, "_blocking");
  proxy_box.RenderBlockSemantics = class RenderBlockSemantics extends proxy_box.RenderProxyBox {
    get blocking() {
      return this[_blocking];
    }
    set blocking(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4722, 12, "value != null");
      if (dart.equals(value, this[_blocking])) return;
      this[_blocking] = value;
      this.markNeedsSemanticsUpdate();
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      config.isBlockingSemanticsOfPreviouslyPaintedNodes = this.blocking;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfboolL()).new("blocking", this.blocking));
    }
  };
  (proxy_box.RenderBlockSemantics.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let blocking = opts && 'blocking' in opts ? opts.blocking : true;
    this[_blocking] = blocking;
    proxy_box.RenderBlockSemantics.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderBlockSemantics.prototype;
  dart.addTypeTests(proxy_box.RenderBlockSemantics);
  dart.addTypeCaches(proxy_box.RenderBlockSemantics);
  dart.setGetterSignature(proxy_box.RenderBlockSemantics, () => ({
    __proto__: dart.getGetters(proxy_box.RenderBlockSemantics.__proto__),
    blocking: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderBlockSemantics, () => ({
    __proto__: dart.getSetters(proxy_box.RenderBlockSemantics.__proto__),
    blocking: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderBlockSemantics, L0);
  dart.setFieldSignature(proxy_box.RenderBlockSemantics, () => ({
    __proto__: dart.getFields(proxy_box.RenderBlockSemantics.__proto__),
    [_blocking]: dart.fieldType(dart.legacy(core.bool))
  }));
  proxy_box.RenderMergeSemantics = class RenderMergeSemantics extends proxy_box.RenderProxyBox {
    describeSemanticsConfiguration(config) {
      let t1;
      super.describeSemanticsConfiguration(config);
      t1 = config;
      (() => {
        t1.isSemanticBoundary = true;
        t1.isMergingSemanticsOfDescendants = true;
        return t1;
      })();
    }
  };
  (proxy_box.RenderMergeSemantics.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    proxy_box.RenderMergeSemantics.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderMergeSemantics.prototype;
  dart.addTypeTests(proxy_box.RenderMergeSemantics);
  dart.addTypeCaches(proxy_box.RenderMergeSemantics);
  dart.setLibraryUri(proxy_box.RenderMergeSemantics, L0);
  var _excluding = dart.privateName(proxy_box, "_excluding");
  proxy_box.RenderExcludeSemantics = class RenderExcludeSemantics extends proxy_box.RenderProxyBox {
    get excluding() {
      return this[_excluding];
    }
    set excluding(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4783, 12, "value != null");
      if (dart.equals(value, this[_excluding])) return;
      this[_excluding] = value;
      this.markNeedsSemanticsUpdate();
    }
    visitChildrenForSemantics(visitor) {
      if (dart.test(this.excluding)) return;
      super.visitChildrenForSemantics(visitor);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfboolL()).new("excluding", this.excluding));
    }
  };
  (proxy_box.RenderExcludeSemantics.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let excluding = opts && 'excluding' in opts ? opts.excluding : true;
    this[_excluding] = excluding;
    proxy_box.RenderExcludeSemantics.__proto__.new.call(this, child);
    if (!(this[_excluding] != null)) dart.assertFailed(null, L1, 4776, 12, "_excluding != null");
  }).prototype = proxy_box.RenderExcludeSemantics.prototype;
  dart.addTypeTests(proxy_box.RenderExcludeSemantics);
  dart.addTypeCaches(proxy_box.RenderExcludeSemantics);
  dart.setGetterSignature(proxy_box.RenderExcludeSemantics, () => ({
    __proto__: dart.getGetters(proxy_box.RenderExcludeSemantics.__proto__),
    excluding: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(proxy_box.RenderExcludeSemantics, () => ({
    __proto__: dart.getSetters(proxy_box.RenderExcludeSemantics.__proto__),
    excluding: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(proxy_box.RenderExcludeSemantics, L0);
  dart.setFieldSignature(proxy_box.RenderExcludeSemantics, () => ({
    __proto__: dart.getFields(proxy_box.RenderExcludeSemantics.__proto__),
    [_excluding]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _index = dart.privateName(proxy_box, "_index");
  proxy_box.RenderIndexedSemantics = class RenderIndexedSemantics extends proxy_box.RenderProxyBox {
    get index() {
      return this[_index];
    }
    set index(value) {
      if (value == this.index) return;
      this[_index] = value;
      this.markNeedsSemanticsUpdate();
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
      config.indexInParent = this.index;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfintL()).new("index", this.index));
    }
  };
  (proxy_box.RenderIndexedSemantics.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let index = opts && 'index' in opts ? opts.index : null;
    if (!(index != null)) dart.assertFailed(null, L1, 4819, 15, "index != null");
    this[_index] = index;
    proxy_box.RenderIndexedSemantics.__proto__.new.call(this, child);
    ;
  }).prototype = proxy_box.RenderIndexedSemantics.prototype;
  dart.addTypeTests(proxy_box.RenderIndexedSemantics);
  dart.addTypeCaches(proxy_box.RenderIndexedSemantics);
  dart.setGetterSignature(proxy_box.RenderIndexedSemantics, () => ({
    __proto__: dart.getGetters(proxy_box.RenderIndexedSemantics.__proto__),
    index: dart.legacy(core.int)
  }));
  dart.setSetterSignature(proxy_box.RenderIndexedSemantics, () => ({
    __proto__: dart.getSetters(proxy_box.RenderIndexedSemantics.__proto__),
    index: dart.legacy(core.int)
  }));
  dart.setLibraryUri(proxy_box.RenderIndexedSemantics, L0);
  dart.setFieldSignature(proxy_box.RenderIndexedSemantics, () => ({
    __proto__: dart.getFields(proxy_box.RenderIndexedSemantics.__proto__),
    [_index]: dart.fieldType(dart.legacy(core.int))
  }));
  proxy_box.RenderLeaderLayer = class RenderLeaderLayer extends proxy_box.RenderProxyBox {
    get link() {
      return this[_link];
    }
    set link(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4873, 12, "value != null");
      if (dart.equals(this[_link], value)) return;
      this[_link] = value;
      this.markNeedsPaint();
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    paint(context, offset) {
      let t1;
      if (this.layer == null) {
        this.layer = new layer.LeaderLayer.new({link: this.link, offset: offset});
      } else {
        let leaderLayer = LeaderLayerL().as(this.layer);
        t1 = leaderLayer;
        (() => {
          t1.link = this.link;
          t1.offset = offset;
          return t1;
        })();
      }
      context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      if (!(this.layer != null)) dart.assertFailed(null, L1, 4894, 12, "layer != null");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfLayerLinkL()).new("link", this.link));
    }
  };
  (proxy_box.RenderLeaderLayer.new = function(opts) {
    let link = opts && 'link' in opts ? opts.link : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_link] = null;
    if (!(link != null)) dart.assertFailed(null, L1, 4860, 15, "link != null");
    proxy_box.RenderLeaderLayer.__proto__.new.call(this, child);
    this.link = link;
  }).prototype = proxy_box.RenderLeaderLayer.prototype;
  dart.addTypeTests(proxy_box.RenderLeaderLayer);
  dart.addTypeCaches(proxy_box.RenderLeaderLayer);
  dart.setGetterSignature(proxy_box.RenderLeaderLayer, () => ({
    __proto__: dart.getGetters(proxy_box.RenderLeaderLayer.__proto__),
    link: dart.legacy(layer.LayerLink)
  }));
  dart.setSetterSignature(proxy_box.RenderLeaderLayer, () => ({
    __proto__: dart.getSetters(proxy_box.RenderLeaderLayer.__proto__),
    link: dart.legacy(layer.LayerLink)
  }));
  dart.setLibraryUri(proxy_box.RenderLeaderLayer, L0);
  dart.setFieldSignature(proxy_box.RenderLeaderLayer, () => ({
    __proto__: dart.getFields(proxy_box.RenderLeaderLayer.__proto__),
    [_link]: dart.fieldType(dart.legacy(layer.LayerLink))
  }));
  var _showWhenUnlinked = dart.privateName(proxy_box, "_showWhenUnlinked");
  var _offset = dart.privateName(proxy_box, "_offset");
  var Rect_bottom = dart.privateName(ui, "Rect.bottom");
  var Rect_right = dart.privateName(ui, "Rect.right");
  var Rect_top = dart.privateName(ui, "Rect.top");
  var Rect_left = dart.privateName(ui, "Rect.left");
  var C27;
  proxy_box.RenderFollowerLayer = class RenderFollowerLayer extends proxy_box.RenderProxyBox {
    get link() {
      return this[_link];
    }
    set link(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4940, 12, "value != null");
      if (dart.equals(this[_link], value)) return;
      this[_link] = value;
      this.markNeedsPaint();
    }
    get showWhenUnlinked() {
      return this[_showWhenUnlinked];
    }
    set showWhenUnlinked(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4959, 12, "value != null");
      if (dart.equals(this[_showWhenUnlinked], value)) return;
      this[_showWhenUnlinked] = value;
      this.markNeedsPaint();
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 4971, 12, "value != null");
      if (dart.equals(this[_offset], value)) return;
      this[_offset] = value;
      this.markNeedsPaint();
    }
    detach() {
      this.layer = null;
      super.detach();
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    get layer() {
      return FollowerLayerL().as(super.layer);
    }
    set layer(value) {
      super.layer = value;
    }
    getCurrentTransform() {
      let t1, t1$;
      t1$ = (t1 = this.layer, t1 == null ? null : t1.getLastTransform());
      return t1$ == null ? vector_math_64.Matrix4.identity() : t1$;
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.link.leader == null && !dart.test(this.showWhenUnlinked)) return false;
      return this.hitTestChildren(result, {position: position});
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return result.addWithPaintTransform({transform: this.getCurrentTransform(), position: position, hitTest: dart.fn((result, position) => super.hitTestChildren(result, {position: position}), BoxHitTestResultLAndOffsetLToboolL())});
    }
    paint(context, offset) {
      let t1;
      if (!(this.showWhenUnlinked != null)) dart.assertFailed(null, L1, 5026, 12, "showWhenUnlinked != null");
      if (this.layer == null) {
        this.layer = new layer.FollowerLayer.new({link: this.link, showWhenUnlinked: this.showWhenUnlinked, linkedOffset: this.offset, unlinkedOffset: offset});
      } else {
        t1 = this.layer;
        (() => {
          t1.link = this.link;
          t1.showWhenUnlinked = this.showWhenUnlinked;
          t1.linkedOffset = this.offset;
          t1.unlinkedOffset = offset;
          return t1;
        })();
      }
      context.pushLayer(this.layer, dart.bind(this, 'paint', super.paint), ui.Offset.zero, {childPaintBounds: C27 || CT.C27});
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      transform.multiply(this.getCurrentTransform());
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfLayerLinkL()).new("link", this.link));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("showWhenUnlinked", this.showWhenUnlinked));
      properties.add(new (DiagnosticsPropertyOfOffsetL()).new("offset", this.offset));
      properties.add(new matrix_utils.TransformProperty.new("current transform matrix", this.getCurrentTransform()));
    }
  };
  (proxy_box.RenderFollowerLayer.new = function(opts) {
    let link = opts && 'link' in opts ? opts.link : null;
    let showWhenUnlinked = opts && 'showWhenUnlinked' in opts ? opts.showWhenUnlinked : true;
    let offset = opts && 'offset' in opts ? opts.offset : C7 || CT.C7;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_link] = null;
    this[_showWhenUnlinked] = null;
    this[_offset] = null;
    if (!(link != null)) dart.assertFailed(null, L1, 4926, 15, "link != null");
    if (!(showWhenUnlinked != null)) dart.assertFailed(null, L1, 4927, 15, "showWhenUnlinked != null");
    if (!(offset != null)) dart.assertFailed(null, L1, 4928, 15, "offset != null");
    proxy_box.RenderFollowerLayer.__proto__.new.call(this, child);
    this.link = link;
    this.showWhenUnlinked = showWhenUnlinked;
    this.offset = offset;
  }).prototype = proxy_box.RenderFollowerLayer.prototype;
  dart.addTypeTests(proxy_box.RenderFollowerLayer);
  dart.addTypeCaches(proxy_box.RenderFollowerLayer);
  dart.setMethodSignature(proxy_box.RenderFollowerLayer, () => ({
    __proto__: dart.getMethods(proxy_box.RenderFollowerLayer.__proto__),
    getCurrentTransform: dart.fnType(dart.legacy(vector_math_64.Matrix4), [])
  }));
  dart.setGetterSignature(proxy_box.RenderFollowerLayer, () => ({
    __proto__: dart.getGetters(proxy_box.RenderFollowerLayer.__proto__),
    link: dart.legacy(layer.LayerLink),
    showWhenUnlinked: dart.legacy(core.bool),
    offset: dart.legacy(ui.Offset),
    layer: dart.legacy(layer.FollowerLayer)
  }));
  dart.setSetterSignature(proxy_box.RenderFollowerLayer, () => ({
    __proto__: dart.getSetters(proxy_box.RenderFollowerLayer.__proto__),
    link: dart.legacy(layer.LayerLink),
    showWhenUnlinked: dart.legacy(core.bool),
    offset: dart.legacy(ui.Offset)
  }));
  dart.setLibraryUri(proxy_box.RenderFollowerLayer, L0);
  dart.setFieldSignature(proxy_box.RenderFollowerLayer, () => ({
    __proto__: dart.getFields(proxy_box.RenderFollowerLayer.__proto__),
    [_link]: dart.fieldType(dart.legacy(layer.LayerLink)),
    [_showWhenUnlinked]: dart.fieldType(dart.legacy(core.bool)),
    [_offset]: dart.fieldType(dart.legacy(ui.Offset))
  }));
  var _sized = dart.privateName(proxy_box, "_sized");
  const _is_RenderAnnotatedRegion_default = Symbol('_is_RenderAnnotatedRegion_default');
  var alwaysNeedsCompositing = dart.privateName(proxy_box, "RenderAnnotatedRegion.alwaysNeedsCompositing");
  proxy_box.RenderAnnotatedRegion$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AnnotatedRegionLayerOfTL = () => (AnnotatedRegionLayerOfTL = dart.constFn(layer.AnnotatedRegionLayer$(TL())))();
    class RenderAnnotatedRegion extends proxy_box.RenderProxyBox {
      get alwaysNeedsCompositing() {
        return this[alwaysNeedsCompositing];
      }
      set alwaysNeedsCompositing(value) {
        super.alwaysNeedsCompositing = value;
      }
      get value() {
        return this[_value];
      }
      set value(newValue) {
        TL().as(newValue);
        if (dart.equals(this[_value], newValue)) return;
        this[_value] = newValue;
        this.markNeedsPaint();
      }
      get sized() {
        return this[_sized];
      }
      set sized(value) {
        if (dart.equals(this[_sized], value)) return;
        this[_sized] = value;
        this.markNeedsPaint();
      }
      paint(context, offset) {
        let layer = new (AnnotatedRegionLayerOfTL()).new(this.value, {size: dart.test(this.sized) ? this.size : null, offset: dart.test(this.sized) ? offset : null});
        context.pushLayer(layer, dart.bind(this, 'paint', super.paint), offset);
      }
    }
    (RenderAnnotatedRegion.new = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let sized = opts && 'sized' in opts ? opts.sized : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[alwaysNeedsCompositing] = true;
      if (!(value != null)) dart.assertFailed(null, L1, 5089, 15, "value != null");
      if (!(sized != null)) dart.assertFailed(null, L1, 5090, 15, "sized != null");
      this[_value] = value;
      this[_sized] = sized;
      RenderAnnotatedRegion.__proto__.new.call(this, child);
      ;
    }).prototype = RenderAnnotatedRegion.prototype;
    dart.addTypeTests(RenderAnnotatedRegion);
    RenderAnnotatedRegion.prototype[_is_RenderAnnotatedRegion_default] = true;
    dart.addTypeCaches(RenderAnnotatedRegion);
    dart.setGetterSignature(RenderAnnotatedRegion, () => ({
      __proto__: dart.getGetters(RenderAnnotatedRegion.__proto__),
      value: dart.legacy(T),
      sized: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(RenderAnnotatedRegion, () => ({
      __proto__: dart.getSetters(RenderAnnotatedRegion.__proto__),
      value: dart.legacy(core.Object),
      sized: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(RenderAnnotatedRegion, L0);
    dart.setFieldSignature(RenderAnnotatedRegion, () => ({
      __proto__: dart.getFields(RenderAnnotatedRegion.__proto__),
      [_value]: dart.fieldType(dart.legacy(T)),
      [_sized]: dart.fieldType(dart.legacy(core.bool)),
      alwaysNeedsCompositing: dart.finalFieldType(dart.legacy(core.bool))
    }));
    return RenderAnnotatedRegion;
  });
  proxy_box.RenderAnnotatedRegion = proxy_box.RenderAnnotatedRegion$();
  dart.addTypeTests(proxy_box.RenderAnnotatedRegion, _is_RenderAnnotatedRegion_default);
  dart.trackLibraries("packages/flutter/src/rendering/proxy_box.dart", {
    "package:flutter/src/rendering/proxy_box.dart": proxy_box
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["proxy_box.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/rendering/proxy_box.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__proxy_box: proxy_box
  };
}));

//# sourceMappingURL=proxy_box.dart.lib.js.map
