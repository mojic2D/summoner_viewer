define(['dart_sdk', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/characters/src/extensions.dart', 'packages/flutter/src/services/raw_keyboard_windows.dart', 'packages/flutter/src/services/keyboard_key.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/services/clipboard.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/painting/strut_style.dart'], (function load__packages__flutter__src__rendering__editable_dart(dart_sdk, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__characters__src__extensions$46dart, packages__flutter__src__services__raw_keyboard_windows$46dart, packages__flutter__src__services__keyboard_key$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__services__clipboard$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__painting__strut_style$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const extensions = packages__characters__src__extensions$46dart.src__extensions;
  const raw_keyboard = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard;
  const raw_keyboard_macos = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard_macos;
  const keyboard_key = packages__flutter__src__services__keyboard_key$46dart.src__services__keyboard_key;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const clipboard = packages__flutter__src__services__clipboard$46dart.src__services__clipboard;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  var editable = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  var $codeUnitAt = dartx.codeUnitAt;
  var $first = dartx.first;
  var $substring = dartx.substring;
  var $times = dartx['*'];
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $round = dartx.round;
  var $_get = dartx._get;
  var $clamp = dartx.clamp;
  var SelectionChangedCauseL = () => (SelectionChangedCauseL = dart.constFn(dart.legacy(editable.SelectionChangedCause)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var ValueNotifierOfboolL = () => (ValueNotifierOfboolL = dart.constFn(change_notifier.ValueNotifier$(boolL())))();
  var RawKeyDownEventL = () => (RawKeyDownEventL = dart.constFn(dart.legacy(raw_keyboard.RawKeyDownEvent)))();
  var RawKeyEventDataMacOsL = () => (RawKeyEventDataMacOsL = dart.constFn(dart.legacy(raw_keyboard_macos.RawKeyEventDataMacOs)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var StringLToboolL = () => (StringLToboolL = dart.constFn(dart.fnType(boolL(), [StringL()])))();
  var TextSpanL = () => (TextSpanL = dart.constFn(dart.legacy(text_span.TextSpan)))();
  var PipelineOwnerL = () => (PipelineOwnerL = dart.constFn(dart.legacy(object.PipelineOwner)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var TextBoxL = () => (TextBoxL = dart.constFn(dart.legacy(ui.TextBox)))();
  var JSArrayOfTextBoxL = () => (JSArrayOfTextBoxL = dart.constFn(_interceptors.JSArray$(TextBoxL())))();
  var TextSelectionPointL = () => (TextSelectionPointL = dart.constFn(dart.legacy(editable.TextSelectionPoint)))();
  var JSArrayOfTextSelectionPointL = () => (JSArrayOfTextSelectionPointL = dart.constFn(_interceptors.JSArray$(TextSelectionPointL())))();
  var BoxHitTestEntryL = () => (BoxHitTestEntryL = dart.constFn(dart.legacy(box.BoxHitTestEntry)))();
  var PointerDownEventL = () => (PointerDownEventL = dart.constFn(dart.legacy(events.PointerDownEvent)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var RenderObjectL = () => (RenderObjectL = dart.constFn(dart.legacy(object.RenderObject)))();
  var ValueNotifierLOfboolL = () => (ValueNotifierLOfboolL = dart.constFn(dart.legacy(ValueNotifierOfboolL())))();
  var DiagnosticsPropertyOfValueNotifierLOfboolL = () => (DiagnosticsPropertyOfValueNotifierLOfboolL = dart.constFn(diagnostics.DiagnosticsProperty$(ValueNotifierLOfboolL())))();
  var DiagnosticsPropertyOfboolL = () => (DiagnosticsPropertyOfboolL = dart.constFn(diagnostics.DiagnosticsProperty$(boolL())))();
  var LocaleL = () => (LocaleL = dart.constFn(dart.legacy(ui.Locale)))();
  var DiagnosticsPropertyOfLocaleL = () => (DiagnosticsPropertyOfLocaleL = dart.constFn(diagnostics.DiagnosticsProperty$(LocaleL())))();
  var TextSelectionL = () => (TextSelectionL = dart.constFn(dart.legacy(text_editing.TextSelection)))();
  var DiagnosticsPropertyOfTextSelectionL = () => (DiagnosticsPropertyOfTextSelectionL = dart.constFn(diagnostics.DiagnosticsProperty$(TextSelectionL())))();
  var ViewportOffsetL = () => (ViewportOffsetL = dart.constFn(dart.legacy(viewport_offset.ViewportOffset)))();
  var DiagnosticsPropertyOfViewportOffsetL = () => (DiagnosticsPropertyOfViewportOffsetL = dart.constFn(diagnostics.DiagnosticsProperty$(ViewportOffsetL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var JSArrayOfDiagnosticsNodeL = () => (JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(DiagnosticsNodeL())))();
  var LogicalKeyboardKeyL = () => (LogicalKeyboardKeyL = dart.constFn(dart.legacy(keyboard_key.LogicalKeyboardKey)))();
  var LinkedHashSetOfLogicalKeyboardKeyL = () => (LinkedHashSetOfLogicalKeyboardKeyL = dart.constFn(collection.LinkedHashSet$(LogicalKeyboardKeyL())))();
  var _HashSetOfLogicalKeyboardKeyL = () => (_HashSetOfLogicalKeyboardKeyL = dart.constFn(collection._HashSet$(LogicalKeyboardKeyL())))();
  const CT = Object.create(null);
  var L1 = "file:///C:/flutter/packages/flutter/lib/src/rendering/editable.dart";
  var L0 = "package:flutter/src/rendering/editable.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.tap",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.doubleTap",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.longPress",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.forcePress",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.keyboard",
        index: 4
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: editable.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.drag",
        index: 5
      });
    },
    get C6() {
      return C6 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5], SelectionChangedCauseL());
    },
    get C7() {
      return C7 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.start",
        index: 4
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$0]: "TextWidthBasis.parent",
        index: 0
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$1]: "Axis.horizontal",
        index: 0
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$1]: "Axis.vertical",
        index: 1
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.android",
        index: 0
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$2]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 1,
        [Radius_x]: 1
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0.5
      });
    }
  }, false);
  var _name$ = dart.privateName(editable, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  editable.SelectionChangedCause = class SelectionChangedCause extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (editable.SelectionChangedCause.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = editable.SelectionChangedCause.prototype;
  dart.addTypeTests(editable.SelectionChangedCause);
  dart.addTypeCaches(editable.SelectionChangedCause);
  dart.setMethodSignature(editable.SelectionChangedCause, () => ({
    __proto__: dart.getMethods(editable.SelectionChangedCause.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(editable.SelectionChangedCause, L0);
  dart.setFieldSignature(editable.SelectionChangedCause, () => ({
    __proto__: dart.getFields(editable.SelectionChangedCause.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(editable.SelectionChangedCause, ['toString']);
  editable.SelectionChangedCause.tap = C0 || CT.C0;
  editable.SelectionChangedCause.doubleTap = C1 || CT.C1;
  editable.SelectionChangedCause.longPress = C2 || CT.C2;
  editable.SelectionChangedCause.forcePress = C3 || CT.C3;
  editable.SelectionChangedCause.keyboard = C4 || CT.C4;
  editable.SelectionChangedCause.drag = C5 || CT.C5;
  editable.SelectionChangedCause.values = C6 || CT.C6;
  var _name = dart.privateName(ui, "_name");
  var C7;
  var C8;
  var point$ = dart.privateName(editable, "TextSelectionPoint.point");
  var direction$ = dart.privateName(editable, "TextSelectionPoint.direction");
  editable.TextSelectionPoint = class TextSelectionPoint extends core.Object {
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    toString() {
      switch (this.direction) {
        case C7 || CT.C7:
        {
          return dart.str(this.point) + "-ltr";
        }
        case C8 || CT.C8:
        {
          return dart.str(this.point) + "-rtl";
        }
      }
      return dart.str(this.point);
    }
  };
  (editable.TextSelectionPoint.new = function(point, direction) {
    this[point$] = point;
    this[direction$] = direction;
    if (!(point != null)) dart.assertFailed(null, L1, 82, 14, "point != null");
    ;
  }).prototype = editable.TextSelectionPoint.prototype;
  dart.addTypeTests(editable.TextSelectionPoint);
  dart.addTypeCaches(editable.TextSelectionPoint);
  dart.setMethodSignature(editable.TextSelectionPoint, () => ({
    __proto__: dart.getMethods(editable.TextSelectionPoint.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(editable.TextSelectionPoint, L0);
  dart.setFieldSignature(editable.TextSelectionPoint, () => ({
    __proto__: dart.getFields(editable.TextSelectionPoint.__proto__),
    point: dart.finalFieldType(dart.legacy(ui.Offset)),
    direction: dart.finalFieldType(dart.legacy(ui.TextDirection))
  }));
  dart.defineExtensionMethods(editable.TextSelectionPoint, ['toString']);
  var C9;
  var _name$0 = dart.privateName(text_painter, "_name");
  var C10;
  var C11;
  var C12;
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var C13;
  var C14;
  var _textLayoutLastMaxWidth = dart.privateName(editable, "_textLayoutLastMaxWidth");
  var _textLayoutLastMinWidth = dart.privateName(editable, "_textLayoutLastMinWidth");
  var _lastCaretRect = dart.privateName(editable, "_lastCaretRect");
  var _selectionStartInViewport = dart.privateName(editable, "_selectionStartInViewport");
  var _selectionEndInViewport = dart.privateName(editable, "_selectionEndInViewport");
  var _cursorResetLocation = dart.privateName(editable, "_cursorResetLocation");
  var _wasSelectingVerticallyWithKeyboard = dart.privateName(editable, "_wasSelectingVerticallyWithKeyboard");
  var _cachedPlainText = dart.privateName(editable, "_cachedPlainText");
  var _hasFocus = dart.privateName(editable, "_hasFocus");
  var _listenerAttached = dart.privateName(editable, "_listenerAttached");
  var _forceLine = dart.privateName(editable, "_forceLine");
  var _readOnly = dart.privateName(editable, "_readOnly");
  var _selectionRects = dart.privateName(editable, "_selectionRects");
  var _cursorWidth = dart.privateName(editable, "_cursorWidth");
  var _floatingCursorOn = dart.privateName(editable, "_floatingCursorOn");
  var _floatingCursorOffset = dart.privateName(editable, "_floatingCursorOffset");
  var _floatingCursorTextPosition = dart.privateName(editable, "_floatingCursorTextPosition");
  var _maxScrollExtent = dart.privateName(editable, "_maxScrollExtent");
  var _clipBehavior = dart.privateName(editable, "_clipBehavior");
  var _tap = dart.privateName(editable, "_tap");
  var _longPress = dart.privateName(editable, "_longPress");
  var _lastTapDownPosition = dart.privateName(editable, "_lastTapDownPosition");
  var _caretPrototype = dart.privateName(editable, "_caretPrototype");
  var _relativeOrigin = dart.privateName(editable, "_relativeOrigin");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C15;
  var _previousOffset = dart.privateName(editable, "_previousOffset");
  var _resetOriginOnLeft = dart.privateName(editable, "_resetOriginOnLeft");
  var _resetOriginOnRight = dart.privateName(editable, "_resetOriginOnRight");
  var _resetOriginOnTop = dart.privateName(editable, "_resetOriginOnTop");
  var _resetOriginOnBottom = dart.privateName(editable, "_resetOriginOnBottom");
  var _resetFloatingCursorAnimationValue = dart.privateName(editable, "_resetFloatingCursorAnimationValue");
  var _promptRectPaint = dart.privateName(editable, "_promptRectPaint");
  var _textPainter = dart.privateName(editable, "_textPainter");
  var _cursorColor = dart.privateName(editable, "_cursorColor");
  var _backgroundCursorColor = dart.privateName(editable, "_backgroundCursorColor");
  var _showCursor = dart.privateName(editable, "_showCursor");
  var _maxLines = dart.privateName(editable, "_maxLines");
  var _minLines = dart.privateName(editable, "_minLines");
  var _expands = dart.privateName(editable, "_expands");
  var _selectionColor = dart.privateName(editable, "_selectionColor");
  var _selection = dart.privateName(editable, "_selection");
  var _offset = dart.privateName(editable, "_offset");
  var _cursorRadius = dart.privateName(editable, "_cursorRadius");
  var _paintCursorOnTop = dart.privateName(editable, "_paintCursorOnTop");
  var _cursorOffset = dart.privateName(editable, "_cursorOffset");
  var _floatingCursorAddedMargin = dart.privateName(editable, "_floatingCursorAddedMargin");
  var _enableInteractiveSelection = dart.privateName(editable, "_enableInteractiveSelection");
  var _devicePixelRatio = dart.privateName(editable, "_devicePixelRatio");
  var _selectionHeightStyle = dart.privateName(editable, "_selectionHeightStyle");
  var _selectionWidthStyle = dart.privateName(editable, "_selectionWidthStyle");
  var _startHandleLayerLink = dart.privateName(editable, "_startHandleLayerLink");
  var _endHandleLayerLink = dart.privateName(editable, "_endHandleLayerLink");
  var _obscuringCharacter = dart.privateName(editable, "_obscuringCharacter");
  var _obscureText = dart.privateName(editable, "_obscureText");
  var _promptRectRange = dart.privateName(editable, "_promptRectRange");
  var _updateSelectionExtentsVisibility = dart.privateName(editable, "_updateSelectionExtentsVisibility");
  var _handleSelectionChange = dart.privateName(editable, "_handleSelectionChange");
  var _handleMovement = dart.privateName(editable, "_handleMovement");
  var _handleShortcuts = dart.privateName(editable, "_handleShortcuts");
  var _handleDelete = dart.privateName(editable, "_handleDelete");
  var _handleKeyEvent = dart.privateName(editable, "_handleKeyEvent");
  var _plainText = dart.privateName(editable, "_plainText");
  var _selectWordAtOffset = dart.privateName(editable, "_selectWordAtOffset");
  var _selectLineAtOffset = dart.privateName(editable, "_selectLineAtOffset");
  var _caretMargin = dart.privateName(editable, "_caretMargin");
  var _isMultiline = dart.privateName(editable, "_isMultiline");
  var _handleSetSelection = dart.privateName(editable, "_handleSetSelection");
  var _handleMoveCursorBackwardByWord = dart.privateName(editable, "_handleMoveCursorBackwardByWord");
  var _handleMoveCursorBackwardByCharacter = dart.privateName(editable, "_handleMoveCursorBackwardByCharacter");
  var _handleMoveCursorForwardByWord = dart.privateName(editable, "_handleMoveCursorForwardByWord");
  var _handleMoveCursorForwardByCharacter = dart.privateName(editable, "_handleMoveCursorForwardByCharacter");
  var _getNextWord = dart.privateName(editable, "_getNextWord");
  var _getPreviousWord = dart.privateName(editable, "_getPreviousWord");
  var _onlyWhitespace = dart.privateName(editable, "_onlyWhitespace");
  var _handleTapDown = dart.privateName(editable, "_handleTapDown");
  var _handleTap = dart.privateName(editable, "_handleTap");
  var _handleLongPress = dart.privateName(editable, "_handleLongPress");
  var _viewportAxis = dart.privateName(editable, "_viewportAxis");
  var _name$1 = dart.privateName(basic_types, "_name");
  var C16;
  var C17;
  var _paintOffset = dart.privateName(editable, "_paintOffset");
  var _viewportExtent = dart.privateName(editable, "_viewportExtent");
  var _getMaxScrollExtent = dart.privateName(editable, "_getMaxScrollExtent");
  var _hasVisualOverflow = dart.privateName(editable, "_hasVisualOverflow");
  var _layoutText = dart.privateName(editable, "_layoutText");
  var _getPixelPerfectCursorOffset = dart.privateName(editable, "_getPixelPerfectCursorOffset");
  var _preferredHeight = dart.privateName(editable, "_preferredHeight");
  var _name$2 = dart.privateName(platform, "_name");
  var C18;
  var C19;
  var C20;
  var C21;
  var C22;
  var C23;
  var _getCaretPrototype = dart.privateName(editable, "_getCaretPrototype");
  var _paintCaret = dart.privateName(editable, "_paintCaret");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var C24;
  var _paintFloatingCaret = dart.privateName(editable, "_paintFloatingCaret");
  var _paintSelection = dart.privateName(editable, "_paintSelection");
  var _paintPromptRectIfNeeded = dart.privateName(editable, "_paintPromptRectIfNeeded");
  var _paintContents = dart.privateName(editable, "_paintContents");
  var _paintHandleLayers = dart.privateName(editable, "_paintHandleLayers");
  var onSelectionChanged$ = dart.privateName(editable, "RenderEditable.onSelectionChanged");
  var onCaretChanged$ = dart.privateName(editable, "RenderEditable.onCaretChanged");
  var ignorePointer$ = dart.privateName(editable, "RenderEditable.ignorePointer");
  var textSelectionDelegate$ = dart.privateName(editable, "RenderEditable.textSelectionDelegate");
  const RenderBox_RelayoutWhenSystemFontsChangeMixin$36 = class RenderBox_RelayoutWhenSystemFontsChangeMixin extends box.RenderBox {};
  (RenderBox_RelayoutWhenSystemFontsChangeMixin$36.new = function() {
    RenderBox_RelayoutWhenSystemFontsChangeMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RelayoutWhenSystemFontsChangeMixin$36.prototype;
  dart.applyMixin(RenderBox_RelayoutWhenSystemFontsChangeMixin$36, object.RelayoutWhenSystemFontsChangeMixin);
  editable.RenderEditable = class RenderEditable extends RenderBox_RelayoutWhenSystemFontsChangeMixin$36 {
    get onSelectionChanged() {
      return this[onSelectionChanged$];
    }
    set onSelectionChanged(value) {
      this[onSelectionChanged$] = value;
    }
    get onCaretChanged() {
      return this[onCaretChanged$];
    }
    set onCaretChanged(value) {
      this[onCaretChanged$] = value;
    }
    get ignorePointer() {
      return this[ignorePointer$];
    }
    set ignorePointer(value) {
      this[ignorePointer$] = value;
    }
    get textSelectionDelegate() {
      return this[textSelectionDelegate$];
    }
    set textSelectionDelegate(value) {
      this[textSelectionDelegate$] = value;
    }
    get textHeightBehavior() {
      return this[_textPainter].textHeightBehavior;
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textPainter].textHeightBehavior, value)) return;
      this[_textPainter].textHeightBehavior = value;
      this.markNeedsTextLayout();
    }
    get textWidthBasis() {
      return this[_textPainter].textWidthBasis;
    }
    set textWidthBasis(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 333, 12, "value != null");
      if (this[_textPainter].textWidthBasis == value) return;
      this[_textPainter].textWidthBasis = value;
      this.markNeedsTextLayout();
    }
    get devicePixelRatio() {
      return this[_devicePixelRatio];
    }
    set devicePixelRatio(value) {
      if (this.devicePixelRatio == value) return;
      this[_devicePixelRatio] = value;
      this.markNeedsTextLayout();
    }
    get obscuringCharacter() {
      return this[_obscuringCharacter];
    }
    set obscuringCharacter(value) {
      if (this[_obscuringCharacter] == value) {
        return;
      }
      if (!(value != null && extensions['StringCharacters|get#characters'](value)[$length] === 1)) dart.assertFailed(null, L1, 361, 12, "value != null && value.characters.length == 1");
      this[_obscuringCharacter] = value;
      this.markNeedsLayout();
    }
    get obscureText() {
      return this[_obscureText];
    }
    set obscureText(value) {
      if (dart.equals(this[_obscureText], value)) return;
      this[_obscureText] = value;
      this.markNeedsSemanticsUpdate();
    }
    get selectionStartInViewport() {
      return this[_selectionStartInViewport];
    }
    get selectionEndInViewport() {
      return this[_selectionEndInViewport];
    }
    [_updateSelectionExtentsVisibility](effectiveOffset) {
      let visibleRegion = ui.Offset.zero['&'](this.size);
      let startOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: this[_selection].start, affinity: this[_selection].affinity}), this[_caretPrototype]);
      this[_selectionStartInViewport].value = visibleRegion.inflate(0.5).contains(startOffset['+'](effectiveOffset));
      let endOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: this[_selection].end, affinity: this[_selection].affinity}), this[_caretPrototype]);
      this[_selectionEndInViewport].value = visibleRegion.inflate(0.5).contains(endOffset['+'](effectiveOffset));
    }
    [_handleSelectionChange](nextSelection, cause) {
      let t1, t0;
      let focusingEmpty = nextSelection.baseOffset === 0 && nextSelection.extentOffset === 0 && !dart.test(this.hasFocus);
      if (dart.equals(nextSelection, this.selection) && cause != editable.SelectionChangedCause.keyboard && !focusingEmpty) {
        return;
      }
      if (this.onSelectionChanged != null) {
        t0 = nextSelection;
        t1 = cause;
        this.onSelectionChanged(t0, this, t1);
      }
    }
    [_handleKeyEvent](keyEvent) {
      if (true) {
        return;
      }
      if (!RawKeyDownEventL().is(keyEvent) || this.onSelectionChanged == null) return;
      let keysPressed = keyboard_key.LogicalKeyboardKey.collapseSynonyms(raw_keyboard.RawKeyboard.instance.keysPressed);
      let key = keyEvent.logicalKey;
      let isMacOS = RawKeyEventDataMacOsL().is(keyEvent.data);
      if (!dart.test(editable.RenderEditable._nonModifierKeys.contains(key)) || dart.notNull(keysPressed.difference(isMacOS ? editable.RenderEditable._macOsModifierKeys : editable.RenderEditable._modifierKeys)[$length]) > 1 || dart.test(keysPressed.difference(editable.RenderEditable._interestingKeys)[$isNotEmpty])) {
        return;
      }
      let isWordModifierPressed = isMacOS ? keyEvent.isAltPressed : keyEvent.isControlPressed;
      let isLineModifierPressed = isMacOS ? keyEvent.isMetaPressed : keyEvent.isAltPressed;
      let isShortcutModifierPressed = isMacOS ? keyEvent.isMetaPressed : keyEvent.isControlPressed;
      if (dart.test(editable.RenderEditable._movementKeys.contains(key))) {
        this[_handleMovement](key, {wordModifier: isWordModifierPressed, lineModifier: isLineModifierPressed, shift: keyEvent.isShiftPressed});
      } else if (dart.test(isShortcutModifierPressed) && dart.test(editable.RenderEditable._shortcutKeys.contains(key))) {
        this[_handleShortcuts](key);
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.delete)) {
        this[_handleDelete]();
      }
    }
    static nextCharacter(index, string, includeWhitespace = true) {
      if (!(dart.notNull(index) >= 0 && dart.notNull(index) <= string.length)) dart.assertFailed(null, L1, 561, 12, "index >= 0 && index <= string.length");
      if (index === string.length) {
        return string.length;
      }
      let count = 0;
      let remaining = extensions['StringCharacters|get#characters'](string).skipWhile(dart.fn(currentString => {
        if (count <= dart.notNull(index)) {
          count = count + currentString.length;
          return true;
        }
        if (dart.test(includeWhitespace)) {
          return false;
        }
        return editable._isWhitespace(currentString[$codeUnitAt](0));
      }, StringLToboolL()));
      return string.length - dart.toString(remaining).length;
    }
    static previousCharacter(index, string, includeWhitespace = true) {
      let t0;
      if (!(dart.notNull(index) >= 0 && dart.notNull(index) <= string.length)) dart.assertFailed(null, L1, 593, 12, "index >= 0 && index <= string.length");
      if (index === 0) {
        return 0;
      }
      let count = 0;
      let lastNonWhitespace = null;
      for (let currentString of extensions['StringCharacters|get#characters'](string)) {
        if (!dart.test(includeWhitespace) && !dart.test(editable._isWhitespace(dart.toString(extensions['StringCharacters|get#characters'](currentString)[$first])[$codeUnitAt](0)))) {
          lastNonWhitespace = count;
        }
        if (count + currentString.length >= dart.notNull(index)) {
          return dart.test(includeWhitespace) ? count : (t0 = lastNonWhitespace, t0 == null ? 0 : t0);
        }
        count = count + currentString.length;
      }
      return 0;
    }
    [_handleMovement](key, opts) {
      let wordModifier = opts && 'wordModifier' in opts ? opts.wordModifier : null;
      let lineModifier = opts && 'lineModifier' in opts ? opts.lineModifier : null;
      let shift = opts && 'shift' in opts ? opts.shift : null;
      if (dart.test(wordModifier) && dart.test(lineModifier)) {
        return;
      }
      let newSelection = this.selection;
      let rightArrow = dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowRight);
      let leftArrow = dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowLeft);
      let upArrow = dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowUp);
      let downArrow = dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowDown);
      if ((rightArrow || leftArrow) && !(rightArrow && leftArrow)) {
        if (dart.test(wordModifier)) {
          if (leftArrow) {
            let startPoint = editable.RenderEditable.previousCharacter(newSelection.extentOffset, this[_plainText], false);
            let textSelection = this[_selectWordAtOffset](new ui.TextPosition.new({offset: startPoint}));
            newSelection = newSelection.copyWith({extentOffset: textSelection.baseOffset});
          } else {
            let startPoint = editable.RenderEditable.nextCharacter(newSelection.extentOffset, this[_plainText], false);
            let textSelection = this[_selectWordAtOffset](new ui.TextPosition.new({offset: startPoint}));
            newSelection = newSelection.copyWith({extentOffset: textSelection.extentOffset});
          }
        } else if (dart.test(lineModifier)) {
          if (leftArrow) {
            let startPoint = editable.RenderEditable.previousCharacter(newSelection.extentOffset, this[_plainText], false);
            let textSelection = this[_selectLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
            newSelection = newSelection.copyWith({extentOffset: textSelection.baseOffset});
          } else {
            let startPoint = editable.RenderEditable.nextCharacter(newSelection.extentOffset, this[_plainText], false);
            let textSelection = this[_selectLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
            newSelection = newSelection.copyWith({extentOffset: textSelection.extentOffset});
          }
        } else {
          if (rightArrow && dart.notNull(newSelection.extentOffset) < this[_plainText].length) {
            let nextExtent = editable.RenderEditable.nextCharacter(newSelection.extentOffset, this[_plainText]);
            let distance = dart.notNull(nextExtent) - dart.notNull(newSelection.extentOffset);
            newSelection = newSelection.copyWith({extentOffset: nextExtent});
            if (dart.test(shift)) {
              this[_cursorResetLocation] = dart.notNull(this[_cursorResetLocation]) + distance;
            }
          } else if (leftArrow && dart.notNull(newSelection.extentOffset) > 0) {
            let previousExtent = editable.RenderEditable.previousCharacter(newSelection.extentOffset, this[_plainText]);
            let distance = dart.notNull(newSelection.extentOffset) - dart.notNull(previousExtent);
            newSelection = newSelection.copyWith({extentOffset: previousExtent});
            if (dart.test(shift)) {
              this[_cursorResetLocation] = dart.notNull(this[_cursorResetLocation]) - distance;
            }
          }
        }
      }
      if (downArrow || upArrow) {
        let preferredLineHeight = this[_textPainter].preferredLineHeight;
        let verticalOffset = upArrow ? -0.5 * dart.notNull(preferredLineHeight) : 1.5 * dart.notNull(preferredLineHeight);
        let caretOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: newSelection.extentOffset}), this[_caretPrototype]);
        let caretOffsetTranslated = caretOffset.translate(0.0, verticalOffset);
        let position = this[_textPainter].getPositionForOffset(caretOffsetTranslated);
        if (position.offset == newSelection.extentOffset) {
          if (downArrow) {
            newSelection = newSelection.copyWith({extentOffset: this[_plainText].length});
          } else if (upArrow) {
            newSelection = newSelection.copyWith({extentOffset: 0});
          }
          this[_wasSelectingVerticallyWithKeyboard] = shift;
        } else if (dart.test(this[_wasSelectingVerticallyWithKeyboard]) && dart.test(shift)) {
          newSelection = newSelection.copyWith({extentOffset: this[_cursorResetLocation]});
          this[_wasSelectingVerticallyWithKeyboard] = false;
        } else {
          newSelection = newSelection.copyWith({extentOffset: position.offset});
          this[_cursorResetLocation] = newSelection.extentOffset;
        }
      }
      if (!dart.test(shift)) {
        let newOffset = newSelection.extentOffset;
        if (!dart.test(this.selection.isCollapsed)) {
          if (leftArrow) {
            newOffset = dart.notNull(newSelection.baseOffset) < dart.notNull(newSelection.extentOffset) ? newSelection.baseOffset : newSelection.extentOffset;
          } else if (rightArrow) {
            newOffset = dart.notNull(newSelection.baseOffset) > dart.notNull(newSelection.extentOffset) ? newSelection.baseOffset : newSelection.extentOffset;
          }
        }
        newSelection = new text_editing.TextSelection.fromPosition(new ui.TextPosition.new({offset: newOffset}));
      }
      this.textSelectionDelegate.textEditingValue = this.textSelectionDelegate.textEditingValue.copyWith({selection: newSelection});
      this[_handleSelectionChange](newSelection, editable.SelectionChangedCause.keyboard);
    }
    [_handleShortcuts](key) {
      return async.async(dart.void, (function* _handleShortcuts() {
        if (!dart.test(editable.RenderEditable._shortcutKeys.contains(key))) dart.assertFailed("shortcut key " + dart.str(key) + " not recognized.", L1, 753, 12, "_shortcutKeys.contains(key)");
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyC)) {
          if (!dart.test(this.selection.isCollapsed)) {
            clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: this.selection.textInside(this[_plainText])}));
          }
          return;
        }
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyX)) {
          if (!dart.test(this.selection.isCollapsed)) {
            clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: this.selection.textInside(this[_plainText])}));
            this.textSelectionDelegate.textEditingValue = new text_input.TextEditingValue.new({text: dart.notNull(this.selection.textBefore(this[_plainText])) + dart.notNull(this.selection.textAfter(this[_plainText])), selection: new text_editing.TextSelection.collapsed({offset: this.selection.start})});
          }
          return;
        }
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyV)) {
          let value = this.textSelectionDelegate.textEditingValue;
          let data = (yield clipboard.Clipboard.getData("text/plain"));
          if (data != null) {
            this.textSelectionDelegate.textEditingValue = new text_input.TextEditingValue.new({text: dart.notNull(value.selection.textBefore(value.text)) + dart.notNull(data.text) + dart.notNull(value.selection.textAfter(value.text)), selection: new text_editing.TextSelection.collapsed({offset: dart.notNull(value.selection.start) + data.text.length})});
          }
          return;
        }
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyA)) {
          this[_handleSelectionChange](this.selection.copyWith({baseOffset: 0, extentOffset: this.textSelectionDelegate.textEditingValue.text.length}), editable.SelectionChangedCause.keyboard);
          return;
        }
      }).bind(this));
    }
    [_handleDelete]() {
      let textAfter = this.selection.textAfter(this[_plainText]);
      if (textAfter[$isNotEmpty]) {
        let deleteCount = editable.RenderEditable.nextCharacter(0, textAfter);
        this.textSelectionDelegate.textEditingValue = new text_input.TextEditingValue.new({text: dart.notNull(this.selection.textBefore(this[_plainText])) + this.selection.textAfter(this[_plainText])[$substring](deleteCount), selection: new text_editing.TextSelection.collapsed({offset: this.selection.start})});
      } else {
        this.textSelectionDelegate.textEditingValue = new text_input.TextEditingValue.new({text: this.selection.textBefore(this[_plainText]), selection: new text_editing.TextSelection.collapsed({offset: this.selection.start})});
      }
    }
    markNeedsTextLayout() {
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
      this.markNeedsLayout();
    }
    systemFontsDidChange() {
      super.systemFontsDidChange();
      this[_textPainter].markNeedsLayout();
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
    }
    get [_plainText]() {
      this[_cachedPlainText] == null ? this[_cachedPlainText] = this[_textPainter].text.toPlainText() : null;
      return this[_cachedPlainText];
    }
    get text() {
      return TextSpanL().as(this[_textPainter].text);
    }
    set text(value) {
      if (dart.equals(this[_textPainter].text, value)) return;
      this[_textPainter].text = value;
      this[_cachedPlainText] = null;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get textAlign() {
      return this[_textPainter].textAlign;
    }
    set textAlign(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 861, 12, "value != null");
      if (dart.equals(this[_textPainter].textAlign, value)) return;
      this[_textPainter].textAlign = value;
      this.markNeedsTextLayout();
    }
    get textDirection() {
      return this[_textPainter].textDirection;
    }
    set textDirection(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 883, 12, "value != null");
      if (dart.equals(this[_textPainter].textDirection, value)) return;
      this[_textPainter].textDirection = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get locale() {
      return this[_textPainter].locale;
    }
    set locale(value) {
      if (dart.equals(this[_textPainter].locale, value)) return;
      this[_textPainter].locale = value;
      this.markNeedsTextLayout();
    }
    get strutStyle() {
      return this[_textPainter].strutStyle;
    }
    set strutStyle(value) {
      if (dart.equals(this[_textPainter].strutStyle, value)) return;
      this[_textPainter].strutStyle = value;
      this.markNeedsTextLayout();
    }
    get cursorColor() {
      return this[_cursorColor];
    }
    set cursorColor(value) {
      if (dart.equals(this[_cursorColor], value)) return;
      this[_cursorColor] = value;
      this.markNeedsPaint();
    }
    get backgroundCursorColor() {
      return this[_backgroundCursorColor];
    }
    set backgroundCursorColor(value) {
      if (dart.equals(this.backgroundCursorColor, value)) return;
      this[_backgroundCursorColor] = value;
      this.markNeedsPaint();
    }
    get showCursor() {
      return this[_showCursor];
    }
    set showCursor(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 946, 12, "value != null");
      if (dart.equals(this[_showCursor], value)) return;
      if (dart.test(this.attached)) this[_showCursor].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_showCursor] = value;
      if (dart.test(this.attached)) this[_showCursor].addListener(dart.bind(this, 'markNeedsPaint'));
      this.markNeedsPaint();
    }
    get hasFocus() {
      return this[_hasFocus];
    }
    set hasFocus(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 962, 12, "value != null");
      if (dart.equals(this[_hasFocus], value)) return;
      this[_hasFocus] = value;
      if (dart.test(this[_hasFocus])) {
        if (!!dart.test(this[_listenerAttached])) dart.assertFailed(null, L1, 967, 14, "!_listenerAttached");
        raw_keyboard.RawKeyboard.instance.addListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = true;
      } else {
        if (!dart.test(this[_listenerAttached])) dart.assertFailed(null, L1, 971, 14, "_listenerAttached");
        raw_keyboard.RawKeyboard.instance.removeListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = false;
      }
      this.markNeedsSemanticsUpdate();
    }
    get forceLine() {
      return this[_forceLine];
    }
    set forceLine(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 982, 12, "value != null");
      if (dart.equals(this[_forceLine], value)) return;
      this[_forceLine] = value;
      this.markNeedsLayout();
    }
    get readOnly() {
      return this[_readOnly];
    }
    set readOnly(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 993, 12, "value != null");
      if (dart.equals(this[_readOnly], value)) return;
      this[_readOnly] = value;
      this.markNeedsSemanticsUpdate();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, L1, 1014, 12, "value == null || value > 0");
      if (this.maxLines == value) return;
      this[_maxLines] = value;
      this.markNeedsTextLayout();
    }
    get minLines() {
      return this[_minLines];
    }
    set minLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, L1, 1026, 12, "value == null || value > 0");
      if (this.minLines == value) return;
      this[_minLines] = value;
      this.markNeedsTextLayout();
    }
    get expands() {
      return this[_expands];
    }
    set expands(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1037, 12, "value != null");
      if (dart.equals(this.expands, value)) return;
      this[_expands] = value;
      this.markNeedsTextLayout();
    }
    get selectionColor() {
      return this[_selectionColor];
    }
    set selectionColor(value) {
      if (dart.equals(this[_selectionColor], value)) return;
      this[_selectionColor] = value;
      this.markNeedsPaint();
    }
    get textScaleFactor() {
      return this[_textPainter].textScaleFactor;
    }
    set textScaleFactor(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1060, 12, "value != null");
      if (this[_textPainter].textScaleFactor == value) return;
      this[_textPainter].textScaleFactor = value;
      this.markNeedsTextLayout();
    }
    get selection() {
      return this[_selection];
    }
    set selection(value) {
      if (dart.equals(this[_selection], value)) return;
      this[_selection] = value;
      this[_selectionRects] = null;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1089, 12, "value != null");
      if (dart.equals(this[_offset], value)) return;
      if (dart.test(this.attached)) this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_offset] = value;
      if (dart.test(this.attached)) this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      this.markNeedsLayout();
    }
    get cursorWidth() {
      return this[_cursorWidth];
    }
    set cursorWidth(value) {
      if (this[_cursorWidth] == value) return;
      this[_cursorWidth] = value;
      this.markNeedsLayout();
    }
    get paintCursorAboveText() {
      return this[_paintCursorOnTop];
    }
    set paintCursorAboveText(value) {
      if (dart.equals(this[_paintCursorOnTop], value)) return;
      this[_paintCursorOnTop] = value;
      this.markNeedsLayout();
    }
    get cursorOffset() {
      return this[_cursorOffset];
    }
    set cursorOffset(value) {
      if (dart.equals(this[_cursorOffset], value)) return;
      this[_cursorOffset] = value;
      this.markNeedsLayout();
    }
    get cursorRadius() {
      return this[_cursorRadius];
    }
    set cursorRadius(value) {
      if (dart.equals(this[_cursorRadius], value)) return;
      this[_cursorRadius] = value;
      this.markNeedsPaint();
    }
    get startHandleLayerLink() {
      return this[_startHandleLayerLink];
    }
    set startHandleLayerLink(value) {
      if (dart.equals(this[_startHandleLayerLink], value)) return;
      this[_startHandleLayerLink] = value;
      this.markNeedsPaint();
    }
    get endHandleLayerLink() {
      return this[_endHandleLayerLink];
    }
    set endHandleLayerLink(value) {
      if (dart.equals(this[_endHandleLayerLink], value)) return;
      this[_endHandleLayerLink] = value;
      this.markNeedsPaint();
    }
    get floatingCursorAddedMargin() {
      return this[_floatingCursorAddedMargin];
    }
    set floatingCursorAddedMargin(value) {
      if (dart.equals(this[_floatingCursorAddedMargin], value)) return;
      this[_floatingCursorAddedMargin] = value;
      this.markNeedsPaint();
    }
    get selectionHeightStyle() {
      return this[_selectionHeightStyle];
    }
    set selectionHeightStyle(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1201, 12, "value != null");
      if (dart.equals(this[_selectionHeightStyle], value)) return;
      this[_selectionHeightStyle] = value;
      this.markNeedsPaint();
    }
    get selectionWidthStyle() {
      return this[_selectionWidthStyle];
    }
    set selectionWidthStyle(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1214, 12, "value != null");
      if (dart.equals(this[_selectionWidthStyle], value)) return;
      this[_selectionWidthStyle] = value;
      this.markNeedsPaint();
    }
    get enableInteractiveSelection() {
      return this[_enableInteractiveSelection];
    }
    set enableInteractiveSelection(value) {
      if (dart.equals(this[_enableInteractiveSelection], value)) return;
      this[_enableInteractiveSelection] = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get selectionEnabled() {
      let t0;
      t0 = this.enableInteractiveSelection;
      return t0 == null ? !dart.test(this.obscureText) : t0;
    }
    get promptRectColor() {
      return this[_promptRectPaint].color;
    }
    set promptRectColor(newValue) {
      if (newValue == null) {
        this.setPromptRectRange(null);
        return;
      }
      if (dart.equals(this.promptRectColor, newValue)) return;
      this[_promptRectPaint].color = newValue;
      if (this[_promptRectRange] != null) this.markNeedsPaint();
    }
    setPromptRectRange(newRange) {
      if (dart.equals(this[_promptRectRange], newRange)) return;
      this[_promptRectRange] = newRange;
      this.markNeedsPaint();
    }
    get maxScrollExtent() {
      return this[_maxScrollExtent];
    }
    get [_caretMargin]() {
      return 1 + dart.notNull(this.cursorWidth);
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value != null)) dart.assertFailed(null, L1, 1301, 12, "value != null");
      if (!dart.equals(value, this[_clipBehavior])) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    describeSemanticsConfiguration(config) {
      let t0, t0$, t0$0, t0$1;
      super.describeSemanticsConfiguration(config);
      t0 = config;
      (() => {
        t0.value = dart.test(this.obscureText) ? this.obscuringCharacter[$times](this[_plainText].length) : this[_plainText];
        t0.isObscured = this.obscureText;
        t0.isMultiline = this[_isMultiline];
        t0.textDirection = this.textDirection;
        t0.isFocused = this.hasFocus;
        t0.isTextField = true;
        t0.isReadOnly = this.readOnly;
        return t0;
      })();
      if (dart.test(this.hasFocus) && dart.test(this.selectionEnabled)) config.onSetSelection = dart.bind(this, _handleSetSelection);
      if (dart.test(this.selectionEnabled) && dart.equals((t0$ = this[_selection], t0$ == null ? null : t0$.isValid), true)) {
        config.textSelection = this[_selection];
        if (this[_textPainter].getOffsetBefore(this[_selection].extentOffset) != null) {
          t0$0 = config;
          (() => {
            t0$0.onMoveCursorBackwardByWord = dart.bind(this, _handleMoveCursorBackwardByWord);
            t0$0.onMoveCursorBackwardByCharacter = dart.bind(this, _handleMoveCursorBackwardByCharacter);
            return t0$0;
          })();
        }
        if (this[_textPainter].getOffsetAfter(this[_selection].extentOffset) != null) {
          t0$1 = config;
          (() => {
            t0$1.onMoveCursorForwardByWord = dart.bind(this, _handleMoveCursorForwardByWord);
            t0$1.onMoveCursorForwardByCharacter = dart.bind(this, _handleMoveCursorForwardByCharacter);
            return t0$1;
          })();
        }
      }
    }
    [_handleSetSelection](selection) {
      this[_handleSelectionChange](selection, editable.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByCharacter](extentSelection) {
      let extentOffset = this[_textPainter].getOffsetAfter(this[_selection].extentOffset);
      if (extentOffset == null) return;
      let baseOffset = !dart.test(extentSelection) ? extentOffset : this[_selection].baseOffset;
      this[_handleSelectionChange](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), editable.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByCharacter](extentSelection) {
      let extentOffset = this[_textPainter].getOffsetBefore(this[_selection].extentOffset);
      if (extentOffset == null) return;
      let baseOffset = !dart.test(extentSelection) ? extentOffset : this[_selection].baseOffset;
      this[_handleSelectionChange](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), editable.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByWord](extentSelection) {
      let currentWord = this[_textPainter].getWordBoundary(this[_selection].extent);
      if (currentWord == null) return;
      let nextWord = this[_getNextWord](currentWord.end);
      if (nextWord == null) return;
      let baseOffset = dart.test(extentSelection) ? this[_selection].baseOffset : nextWord.start;
      this[_handleSelectionChange](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: nextWord.start}), editable.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByWord](extentSelection) {
      let currentWord = this[_textPainter].getWordBoundary(this[_selection].extent);
      if (currentWord == null) return;
      let previousWord = this[_getPreviousWord](dart.notNull(currentWord.start) - 1);
      if (previousWord == null) return;
      let baseOffset = dart.test(extentSelection) ? this[_selection].baseOffset : previousWord.start;
      this[_handleSelectionChange](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: previousWord.start}), editable.SelectionChangedCause.keyboard);
    }
    [_getNextWord](offset) {
      while (true) {
        let range = this[_textPainter].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range == null || !dart.test(range.isValid) || dart.test(range.isCollapsed)) return null;
        if (!dart.test(this[_onlyWhitespace](range))) return range;
        offset = range.end;
      }
    }
    [_getPreviousWord](offset) {
      while (dart.notNull(offset) >= 0) {
        let range = this[_textPainter].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range == null || !dart.test(range.isValid) || dart.test(range.isCollapsed)) return null;
        if (!dart.test(this[_onlyWhitespace](range))) return range;
        offset = dart.notNull(range.start) - 1;
      }
      return null;
    }
    [_onlyWhitespace](range) {
      for (let i = range.start; dart.notNull(i) < dart.notNull(range.end); i = dart.notNull(i) + 1) {
        let codeUnit = this.text.codeUnitAt(i);
        if (!dart.test(editable._isWhitespace(codeUnit))) {
          return false;
        }
      }
      return true;
    }
    attach(owner) {
      let t0, t0$;
      PipelineOwnerL().as(owner);
      super.attach(owner);
      this[_tap] = (t0 = new tap.TapGestureRecognizer.new({debugOwner: this}), (() => {
        t0.onTapDown = dart.bind(this, _handleTapDown);
        t0.onTap = dart.bind(this, _handleTap);
        return t0;
      })());
      this[_longPress] = (t0$ = new long_press.LongPressGestureRecognizer.new({debugOwner: this}), (() => {
        t0$.onLongPress = dart.bind(this, _handleLongPress);
        return t0$;
      })());
      this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_showCursor].addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      this[_tap].dispose();
      this[_longPress].dispose();
      this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_showCursor].removeListener(dart.bind(this, 'markNeedsPaint'));
      if (dart.test(this[_listenerAttached])) raw_keyboard.RawKeyboard.instance.removeListener(dart.bind(this, _handleKeyEvent));
      super.detach();
    }
    get [_isMultiline]() {
      return this.maxLines !== 1;
    }
    get [_viewportAxis]() {
      return dart.test(this[_isMultiline]) ? basic_types.Axis.vertical : basic_types.Axis.horizontal;
    }
    get [_paintOffset]() {
      switch (this[_viewportAxis]) {
        case C16 || CT.C16:
        {
          return new ui.Offset.new(-dart.notNull(this.offset.pixels), 0.0);
        }
        case C17 || CT.C17:
        {
          return new ui.Offset.new(0.0, -dart.notNull(this.offset.pixels));
        }
      }
      return null;
    }
    get [_viewportExtent]() {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L1, 1476, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C16 || CT.C16:
        {
          return this.size.width;
        }
        case C17 || CT.C17:
        {
          return this.size.height;
        }
      }
      return null;
    }
    [_getMaxScrollExtent](contentSize) {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L1, 1487, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C16 || CT.C16:
        {
          return math.max(doubleL(), 0.0, dart.notNull(contentSize.width) - dart.notNull(this.size.width));
        }
        case C17 || CT.C17:
        {
          return math.max(doubleL(), 0.0, dart.notNull(contentSize.height) - dart.notNull(this.size.height));
        }
      }
      return null;
    }
    get [_hasVisualOverflow]() {
      return dart.notNull(this[_maxScrollExtent]) > 0 || !dart.equals(this[_paintOffset], ui.Offset.zero);
    }
    getEndpointsForSelection(selection) {
      if (!(this.constraints != null)) dart.assertFailed(null, L1, 1514, 12, "constraints != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let paintOffset = this[_paintOffset];
      let boxes = dart.test(selection.isCollapsed) ? JSArrayOfTextBoxL().of([]) : this[_textPainter].getBoxesForSelection(selection);
      if (dart.test(boxes[$isEmpty])) {
        let caretOffset = this[_textPainter].getOffsetForCaret(selection.extent, this[_caretPrototype]);
        let start = new ui.Offset.new(0.0, this.preferredLineHeight)['+'](caretOffset)['+'](paintOffset);
        return JSArrayOfTextSelectionPointL().of([new editable.TextSelectionPoint.new(start, null)]);
      } else {
        let start = new ui.Offset.new(boxes[$first].start, boxes[$first].bottom)['+'](paintOffset);
        let end = new ui.Offset.new(boxes[$last].end, boxes[$last].bottom)['+'](paintOffset);
        return JSArrayOfTextSelectionPointL().of([new editable.TextSelectionPoint.new(start, boxes[$first].direction), new editable.TextSelectionPoint.new(end, boxes[$last].direction)]);
      }
    }
    getPositionForPoint(globalPosition) {
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      globalPosition = globalPosition['+'](this[_paintOffset]._negate());
      return this[_textPainter].getPositionForOffset(this.globalToLocal(globalPosition));
    }
    getLocalRectForCaret(caretPosition) {
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let caretOffset = this[_textPainter].getOffsetForCaret(caretPosition, this[_caretPrototype]);
      let rect = new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, this.preferredLineHeight).shift(caretOffset['+'](this[_paintOffset]));
      if (this[_cursorOffset] != null) rect = rect.shift(this[_cursorOffset]);
      return rect.shift(this[_getPixelPerfectCursorOffset](rect));
    }
    computeMinIntrinsicWidth(height) {
      this[_layoutText]({maxWidth: 1 / 0});
      return this[_textPainter].minIntrinsicWidth;
    }
    computeMaxIntrinsicWidth(height) {
      this[_layoutText]({maxWidth: 1 / 0});
      return dart.notNull(this[_textPainter].maxIntrinsicWidth) + dart.notNull(this.cursorWidth);
    }
    get preferredLineHeight() {
      return this[_textPainter].preferredLineHeight;
    }
    [_preferredHeight](width) {
      let lockedMax = this.maxLines != null && this.minLines == null;
      let lockedBoth = this.minLines != null && this.minLines == this.maxLines;
      let singleLine = this.maxLines === 1;
      if (singleLine || lockedMax || lockedBoth) {
        return dart.notNull(this.preferredLineHeight) * dart.notNull(this.maxLines);
      }
      let minLimited = this.minLines != null && dart.notNull(this.minLines) > 1;
      let maxLimited = this.maxLines != null;
      if (minLimited || maxLimited) {
        this[_layoutText]({maxWidth: width});
        if (minLimited && dart.notNull(this[_textPainter].height) < dart.notNull(this.preferredLineHeight) * dart.notNull(this.minLines)) {
          return dart.notNull(this.preferredLineHeight) * dart.notNull(this.minLines);
        }
        if (maxLimited && dart.notNull(this[_textPainter].height) > dart.notNull(this.preferredLineHeight) * dart.notNull(this.maxLines)) {
          return dart.notNull(this.preferredLineHeight) * dart.notNull(this.maxLines);
        }
      }
      if (width === 1 / 0) {
        let text = this[_plainText];
        let lines = 1;
        for (let index = 0; index < text.length; index = index + 1) {
          if (text[$codeUnitAt](index) === 10) lines = lines + 1;
        }
        return dart.notNull(this.preferredLineHeight) * lines;
      }
      this[_layoutText]({maxWidth: width});
      return math.max(doubleL(), this.preferredLineHeight, this[_textPainter].height);
    }
    computeMinIntrinsicHeight(width) {
      return this[_preferredHeight](width);
    }
    computeMaxIntrinsicHeight(width) {
      return this[_preferredHeight](width);
    }
    computeDistanceToActualBaseline(baseline) {
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      return this[_textPainter].computeDistanceToActualBaseline(baseline);
    }
    hitTestSelf(position) {
      return true;
    }
    handleEvent(event, entry) {
      let t0;
      BoxHitTestEntryL().as(entry);
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, L1, 1650, 12, "debugHandleEvent(event, entry)");
      if (PointerDownEventL().is(event)) {
        if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, L1, 1652, 14, "!debugNeedsLayout");
        let offset = entry.localPosition;
        let position = this[_textPainter].getPositionForOffset(offset);
        let span = this[_textPainter].text.getSpanForPosition(position);
        if (span != null && TextSpanL().is(span)) {
          let textSpan = span;
          t0 = textSpan.recognizer;
          t0 == null ? null : t0.addPointer(event);
        }
        if (!dart.test(this.ignorePointer) && this.onSelectionChanged != null) {
          this[_tap].addPointer(event);
          this[_longPress].addPointer(event);
        }
      }
    }
    handleTapDown(details) {
      this[_lastTapDownPosition] = details.globalPosition;
    }
    [_handleTapDown](details) {
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, L1, 1682, 12, "!ignorePointer");
      this.handleTapDown(details);
    }
    handleTap() {
      this.selectPosition({cause: editable.SelectionChangedCause.tap});
    }
    [_handleTap]() {
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, L1, 1696, 12, "!ignorePointer");
      this.handleTap();
    }
    handleDoubleTap() {
      this.selectWord({cause: editable.SelectionChangedCause.doubleTap});
    }
    handleLongPress() {
      this.selectWord({cause: editable.SelectionChangedCause.longPress});
    }
    [_handleLongPress]() {
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, L1, 1720, 12, "!ignorePointer");
      this.handleLongPress();
    }
    selectPosition(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      this.selectPositionAt({from: this[_lastTapDownPosition], cause: cause});
    }
    selectPositionAt(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause != null)) dart.assertFailed(null, L1, 1740, 12, "cause != null");
      if (!(from != null)) dart.assertFailed(null, L1, 1741, 12, "from != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (this.onSelectionChanged == null) {
        return;
      }
      let fromPosition = this[_textPainter].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let toPosition = to == null ? null : this[_textPainter].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset])));
      let baseOffset = fromPosition.offset;
      let extentOffset = fromPosition.offset;
      if (toPosition != null) {
        baseOffset = math.min(intL(), fromPosition.offset, toPosition.offset);
        extentOffset = math.max(intL(), fromPosition.offset, toPosition.offset);
      }
      let newSelection = new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset, affinity: fromPosition.affinity});
      this[_handleSelectionChange](newSelection, cause);
    }
    selectWord(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      this.selectWordsInRange({from: this[_lastTapDownPosition], cause: cause});
    }
    selectWordsInRange(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause != null)) dart.assertFailed(null, L1, 1781, 12, "cause != null");
      if (!(from != null)) dart.assertFailed(null, L1, 1782, 12, "from != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (this.onSelectionChanged == null) {
        return;
      }
      let firstPosition = this[_textPainter].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let firstWord = this[_selectWordAtOffset](firstPosition);
      let lastWord = to == null ? firstWord : this[_selectWordAtOffset](this[_textPainter].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset]))));
      this[_handleSelectionChange](new text_editing.TextSelection.new({baseOffset: firstWord.base.offset, extentOffset: lastWord.extent.offset, affinity: firstWord.affinity}), cause);
    }
    selectWordEdge(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause != null)) dart.assertFailed(null, L1, 1806, 12, "cause != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (!(this[_lastTapDownPosition] != null)) dart.assertFailed(null, L1, 1808, 12, "_lastTapDownPosition != null");
      if (this.onSelectionChanged == null) {
        return;
      }
      let position = this[_textPainter].getPositionForOffset(this.globalToLocal(this[_lastTapDownPosition]['-'](this[_paintOffset])));
      let word = this[_textPainter].getWordBoundary(position);
      if (dart.notNull(position.offset) - dart.notNull(word.start) <= 1) {
        this[_handleSelectionChange](new text_editing.TextSelection.collapsed({offset: word.start, affinity: ui.TextAffinity.downstream}), cause);
      } else {
        this[_handleSelectionChange](new text_editing.TextSelection.collapsed({offset: word.end, affinity: ui.TextAffinity.upstream}), cause);
      }
    }
    [_selectWordAtOffset](position) {
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 1828, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n           _textLayoutLastMinWidth == constraints.minWidth");
      let word = this[_textPainter].getWordBoundary(position);
      if (dart.notNull(position.offset) >= dart.notNull(word.end)) return new text_editing.TextSelection.fromPosition(position);
      if (dart.test(this.obscureText)) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this[_plainText].length});
      }
      return new text_editing.TextSelection.new({baseOffset: word.start, extentOffset: word.end});
    }
    [_selectLineAtOffset](position) {
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 1843, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n        _textLayoutLastMinWidth == constraints.minWidth");
      let line = this[_textPainter].getLineBoundary(position);
      if (dart.notNull(position.offset) >= dart.notNull(line.end)) return new text_editing.TextSelection.fromPosition(position);
      if (dart.test(this.obscureText)) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this[_plainText].length});
      }
      return new text_editing.TextSelection.new({baseOffset: line.start, extentOffset: line.end});
    }
    [_layoutText](opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (!(maxWidth != null && minWidth != null)) dart.assertFailed(null, L1, 1859, 12, "maxWidth != null && minWidth != null");
      if (this[_textLayoutLastMaxWidth] == maxWidth && this[_textLayoutLastMinWidth] == minWidth) return;
      let availableMaxWidth = math.max(doubleL(), 0.0, dart.notNull(maxWidth) - dart.notNull(this[_caretMargin]));
      let availableMinWidth = math.min(doubleL(), minWidth, availableMaxWidth);
      let textMaxWidth = dart.test(this[_isMultiline]) ? availableMaxWidth : 1 / 0;
      let textMinWidth = dart.test(this.forceLine) ? availableMaxWidth : availableMinWidth;
      this[_textPainter].layout({minWidth: textMinWidth, maxWidth: textMaxWidth});
      this[_textLayoutLastMinWidth] = minWidth;
      this[_textLayoutLastMaxWidth] = maxWidth;
    }
    get [_getCaretPrototype]() {
      if (!(platform.defaultTargetPlatform != null)) dart.assertFailed(null, L1, 1886, 12, "defaultTargetPlatform != null");
      switch (platform.defaultTargetPlatform) {
        case C18 || CT.C18:
        case C19 || CT.C19:
        {
          return new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, dart.notNull(this.preferredLineHeight) + 2);
        }
        case C20 || CT.C20:
        case C21 || CT.C21:
        case C22 || CT.C22:
        case C23 || CT.C23:
        {
          return new ui.Rect.fromLTWH(0.0, 2, this.cursorWidth, dart.notNull(this.preferredLineHeight) - 2.0 * 2);
        }
      }
      return null;
    }
    performLayout() {
      let constraints = this.constraints;
      this[_layoutText]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
      this[_caretPrototype] = this[_getCaretPrototype];
      this[_selectionRects] = null;
      let textPainterSize = this[_textPainter].size;
      let width = dart.test(this.forceLine) ? constraints.maxWidth : constraints.constrainWidth(dart.notNull(this[_textPainter].size.width) + dart.notNull(this[_caretMargin]));
      this.size = new ui.Size.new(width, constraints.constrainHeight(this[_preferredHeight](constraints.maxWidth)));
      let contentSize = new ui.Size.new(dart.notNull(textPainterSize.width) + dart.notNull(this[_caretMargin]), textPainterSize.height);
      this[_maxScrollExtent] = this[_getMaxScrollExtent](contentSize);
      this.offset.applyViewportDimension(this[_viewportExtent]);
      this.offset.applyContentDimensions(0.0, this[_maxScrollExtent]);
    }
    [_getPixelPerfectCursorOffset](caretRect) {
      let caretPosition = this.localToGlobal(caretRect.topLeft);
      let pixelMultiple = 1.0 / dart.notNull(this[_devicePixelRatio]);
      let quotientX = (dart.notNull(caretPosition.dx) / pixelMultiple)[$round]();
      let quotientY = (dart.notNull(caretPosition.dy) / pixelMultiple)[$round]();
      let pixelPerfectOffsetX = quotientX * pixelMultiple - dart.notNull(caretPosition.dx);
      let pixelPerfectOffsetY = quotientY * pixelMultiple - dart.notNull(caretPosition.dy);
      return new ui.Offset.new(pixelPerfectOffsetX, pixelPerfectOffsetY);
    }
    [_paintCaret](canvas, effectiveOffset, textPosition) {
      let t0, t0$;
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 1934, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n           _textLayoutLastMinWidth == constraints.minWidth");
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = dart.test(this[_floatingCursorOn]) ? this.backgroundCursorColor : this[_cursorColor];
        return t0;
      })());
      let caretOffset = this[_textPainter].getOffsetForCaret(textPosition, this[_caretPrototype])['+'](effectiveOffset);
      let caretRect = this[_caretPrototype].shift(caretOffset);
      if (this[_cursorOffset] != null) caretRect = caretRect.shift(this[_cursorOffset]);
      let caretHeight = this[_textPainter].getFullHeightForCaret(textPosition, this[_caretPrototype]);
      if (caretHeight != null) {
        switch (platform.defaultTargetPlatform) {
          case C18 || CT.C18:
          case C19 || CT.C19:
          {
            let heightDiff = dart.notNull(caretHeight) - dart.notNull(caretRect.height);
            caretRect = new ui.Rect.fromLTWH(caretRect.left, dart.notNull(caretRect.top) + heightDiff / 2, caretRect.width, caretRect.height);
            break;
          }
          case C20 || CT.C20:
          case C21 || CT.C21:
          case C22 || CT.C22:
          case C23 || CT.C23:
          {
            caretRect = new ui.Rect.fromLTWH(caretRect.left, dart.notNull(caretRect.top) - 2, caretRect.width, caretHeight);
            break;
          }
        }
      }
      caretRect = caretRect.shift(this[_getPixelPerfectCursorOffset](caretRect));
      if (this.cursorRadius == null) {
        canvas.drawRect(caretRect, paint);
      } else {
        let caretRRect = new ui.RRect.fromRectAndRadius(caretRect, this.cursorRadius);
        canvas.drawRRect(caretRRect, paint);
      }
      if (!dart.equals(caretRect, this[_lastCaretRect])) {
        this[_lastCaretRect] = caretRect;
        if (this.onCaretChanged != null) {
          t0$ = caretRect;
          this.onCaretChanged(t0$);
        }
      }
    }
    setFloatingCursor(state, boundedOffset, lastTextPosition, opts) {
      let resetLerpValue = opts && 'resetLerpValue' in opts ? opts.resetLerpValue : null;
      if (!(state != null)) dart.assertFailed(null, L1, 1997, 12, "state != null");
      if (!(boundedOffset != null)) dart.assertFailed(null, L1, 1998, 12, "boundedOffset != null");
      if (!(lastTextPosition != null)) dart.assertFailed(null, L1, 1999, 12, "lastTextPosition != null");
      if (state == text_input.FloatingCursorDragState.Start) {
        this[_relativeOrigin] = C15 || CT.C15;
        this[_previousOffset] = null;
        this[_resetOriginOnBottom] = false;
        this[_resetOriginOnTop] = false;
        this[_resetOriginOnRight] = false;
        this[_resetOriginOnBottom] = false;
      }
      this[_floatingCursorOn] = state != text_input.FloatingCursorDragState.End;
      this[_resetFloatingCursorAnimationValue] = resetLerpValue;
      if (dart.test(this[_floatingCursorOn])) {
        this[_floatingCursorOffset] = boundedOffset;
        this[_floatingCursorTextPosition] = lastTextPosition;
      }
      this.markNeedsPaint();
    }
    [_paintFloatingCaret](canvas, effectiveOffset) {
      let t0;
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 2018, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n           _textLayoutLastMinWidth == constraints.minWidth");
      if (!dart.test(this[_floatingCursorOn])) dart.assertFailed(null, L1, 2021, 12, "_floatingCursorOn");
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = this[_cursorColor].withOpacity(0.75);
        return t0;
      })());
      let sizeAdjustmentX = editable._kFloatingCaretSizeIncrease.dx;
      let sizeAdjustmentY = editable._kFloatingCaretSizeIncrease.dy;
      if (this[_resetFloatingCursorAnimationValue] != null) {
        sizeAdjustmentX = ui.lerpDouble(sizeAdjustmentX, 0, this[_resetFloatingCursorAnimationValue]);
        sizeAdjustmentY = ui.lerpDouble(sizeAdjustmentY, 0, this[_resetFloatingCursorAnimationValue]);
      }
      let floatingCaretPrototype = new ui.Rect.fromLTRB(dart.notNull(this[_caretPrototype].left) - dart.notNull(sizeAdjustmentX), dart.notNull(this[_caretPrototype].top) - dart.notNull(sizeAdjustmentY), dart.notNull(this[_caretPrototype].right) + dart.notNull(sizeAdjustmentX), dart.notNull(this[_caretPrototype].bottom) + dart.notNull(sizeAdjustmentY));
      let caretRect = floatingCaretPrototype.shift(effectiveOffset);
      let floatingCursorRadius = C24 || CT.C24;
      let caretRRect = new ui.RRect.fromRectAndRadius(caretRect, floatingCursorRadius);
      canvas.drawRRect(caretRRect, paint);
    }
    calculateBoundedFloatingCursorOffset(rawCursorOffset) {
      let deltaPosition = C15 || CT.C15;
      let topBound = -dart.notNull(this.floatingCursorAddedMargin.top);
      let bottomBound = dart.notNull(this[_textPainter].height) - dart.notNull(this.preferredLineHeight) + dart.notNull(this.floatingCursorAddedMargin.bottom);
      let leftBound = -dart.notNull(this.floatingCursorAddedMargin.left);
      let rightBound = dart.notNull(this[_textPainter].width) + dart.notNull(this.floatingCursorAddedMargin.right);
      if (this[_previousOffset] != null) deltaPosition = rawCursorOffset['-'](this[_previousOffset]);
      if (dart.test(this[_resetOriginOnLeft]) && dart.notNull(deltaPosition.dx) > 0) {
        this[_relativeOrigin] = new ui.Offset.new(dart.notNull(rawCursorOffset.dx) - leftBound, this[_relativeOrigin].dy);
        this[_resetOriginOnLeft] = false;
      } else if (dart.test(this[_resetOriginOnRight]) && dart.notNull(deltaPosition.dx) < 0) {
        this[_relativeOrigin] = new ui.Offset.new(dart.notNull(rawCursorOffset.dx) - rightBound, this[_relativeOrigin].dy);
        this[_resetOriginOnRight] = false;
      }
      if (dart.test(this[_resetOriginOnTop]) && dart.notNull(deltaPosition.dy) > 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, dart.notNull(rawCursorOffset.dy) - topBound);
        this[_resetOriginOnTop] = false;
      } else if (dart.test(this[_resetOriginOnBottom]) && dart.notNull(deltaPosition.dy) < 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, dart.notNull(rawCursorOffset.dy) - bottomBound);
        this[_resetOriginOnBottom] = false;
      }
      let currentX = dart.notNull(rawCursorOffset.dx) - dart.notNull(this[_relativeOrigin].dx);
      let currentY = dart.notNull(rawCursorOffset.dy) - dart.notNull(this[_relativeOrigin].dy);
      let adjustedX = math.min(doubleL(), math.max(doubleL(), currentX, leftBound), rightBound);
      let adjustedY = math.min(doubleL(), math.max(doubleL(), currentY, topBound), bottomBound);
      let adjustedOffset = new ui.Offset.new(adjustedX, adjustedY);
      if (currentX < leftBound && dart.notNull(deltaPosition.dx) < 0)
        this[_resetOriginOnLeft] = true;
      else if (currentX > rightBound && dart.notNull(deltaPosition.dx) > 0) this[_resetOriginOnRight] = true;
      if (currentY < topBound && dart.notNull(deltaPosition.dy) < 0)
        this[_resetOriginOnTop] = true;
      else if (currentY > bottomBound && dart.notNull(deltaPosition.dy) > 0) this[_resetOriginOnBottom] = true;
      this[_previousOffset] = rawCursorOffset;
      return adjustedOffset;
    }
    [_paintSelection](canvas, effectiveOffset) {
      let t0;
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 2107, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n           _textLayoutLastMinWidth == constraints.minWidth");
      if (!(this[_selectionRects] != null)) dart.assertFailed(null, L1, 2110, 12, "_selectionRects != null");
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = this[_selectionColor];
        return t0;
      })());
      for (let box of this[_selectionRects])
        canvas.drawRect(box.toRect().shift(effectiveOffset), paint);
    }
    [_paintPromptRectIfNeeded](canvas, effectiveOffset) {
      if (this[_promptRectRange] == null || this.promptRectColor == null) {
        return;
      }
      let boxes = this[_textPainter].getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: this[_promptRectRange].start, extentOffset: this[_promptRectRange].end}));
      for (let box of boxes) {
        canvas.drawRect(box.toRect().shift(effectiveOffset), this[_promptRectPaint]);
      }
    }
    [_paintContents](context, offset) {
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", L1, 2135, 12, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n           _textLayoutLastMinWidth == constraints.minWidth");
      let effectiveOffset = offset['+'](this[_paintOffset]);
      let showSelection = false;
      let showCaret = false;
      if (this[_selection] != null && !dart.test(this[_floatingCursorOn])) {
        if (dart.test(this[_selection].isCollapsed) && dart.test(this[_showCursor].value) && this.cursorColor != null)
          showCaret = true;
        else if (!dart.test(this[_selection].isCollapsed) && this[_selectionColor] != null) showSelection = true;
        this[_updateSelectionExtentsVisibility](effectiveOffset);
      }
      if (showSelection) {
        this[_selectionRects] == null ? this[_selectionRects] = this[_textPainter].getBoxesForSelection(this[_selection], {boxHeightStyle: this[_selectionHeightStyle], boxWidthStyle: this[_selectionWidthStyle]}) : null;
        this[_paintSelection](context.canvas, effectiveOffset);
      }
      this[_paintPromptRectIfNeeded](context.canvas, effectiveOffset);
      if (dart.test(this.paintCursorAboveText)) this[_textPainter].paint(context.canvas, effectiveOffset);
      if (showCaret) this[_paintCaret](context.canvas, effectiveOffset, this[_selection].extent);
      if (!dart.test(this.paintCursorAboveText)) this[_textPainter].paint(context.canvas, effectiveOffset);
      if (dart.test(this[_floatingCursorOn])) {
        if (this[_resetFloatingCursorAnimationValue] == null) this[_paintCaret](context.canvas, effectiveOffset, this[_floatingCursorTextPosition]);
        this[_paintFloatingCaret](context.canvas, this[_floatingCursorOffset]);
      }
    }
    [_paintHandleLayers](context, endpoints) {
      let startPoint = endpoints[$_get](0).point;
      startPoint = new ui.Offset.new(startPoint.dx[$clamp](0.0, this.size.width), startPoint.dy[$clamp](0.0, this.size.height));
      context.pushLayer(new layer.LeaderLayer.new({link: this.startHandleLayerLink, offset: startPoint}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      if (endpoints[$length] === 2) {
        let endPoint = endpoints[$_get](1).point;
        endPoint = new ui.Offset.new(endPoint.dx[$clamp](0.0, this.size.width), endPoint.dy[$clamp](0.0, this.size.height));
        context.pushLayer(new layer.LeaderLayer.new({link: this.endHandleLayerLink, offset: endPoint}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      }
    }
    paint(context, offset) {
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (dart.test(this[_hasVisualOverflow]) && !dart.equals(this.clipBehavior, ui.Clip.none))
        context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintContents), {clipBehavior: this.clipBehavior});
      else
        this[_paintContents](context, offset);
      this[_paintHandleLayers](context, this.getEndpointsForSelection(this.selection));
    }
    describeApproximatePaintClip(child) {
      RenderObjectL().as(child);
      return dart.test(this[_hasVisualOverflow]) ? ui.Offset.zero['&'](this.size) : null;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new colors.ColorProperty.new("cursorColor", this.cursorColor));
      properties.add(new (DiagnosticsPropertyOfValueNotifierLOfboolL()).new("showCursor", this.showCursor));
      properties.add(new diagnostics.IntProperty.new("maxLines", this.maxLines));
      properties.add(new diagnostics.IntProperty.new("minLines", this.minLines));
      properties.add(new (DiagnosticsPropertyOfboolL()).new("expands", this.expands, {defaultValue: false}));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor));
      properties.add(new diagnostics.DoubleProperty.new("textScaleFactor", this.textScaleFactor));
      properties.add(new (DiagnosticsPropertyOfLocaleL()).new("locale", this.locale, {defaultValue: null}));
      properties.add(new (DiagnosticsPropertyOfTextSelectionL()).new("selection", this.selection));
      properties.add(new (DiagnosticsPropertyOfViewportOffsetL()).new("offset", this.offset));
    }
    debugDescribeChildren() {
      return JSArrayOfDiagnosticsNodeL().of([this.text.toDiagnosticsNode({name: "text", style: diagnostics.DiagnosticsTreeStyle.transition})]);
    }
  };
  (editable.RenderEditable.new = function(opts) {
    let t0, t0$;
    let text = opts && 'text' in opts ? opts.text : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C9 || CT.C9;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let backgroundCursorColor = opts && 'backgroundCursorColor' in opts ? opts.backgroundCursorColor : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
    let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let onCaretChanged = opts && 'onCaretChanged' in opts ? opts.onCaretChanged : null;
    let ignorePointer = opts && 'ignorePointer' in opts ? opts.ignorePointer : false;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let forceLine = opts && 'forceLine' in opts ? opts.forceLine : true;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C10 || CT.C10;
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 1;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let paintCursorAboveText = opts && 'paintCursorAboveText' in opts ? opts.paintCursorAboveText : false;
    let cursorOffset = opts && 'cursorOffset' in opts ? opts.cursorOffset : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 1;
    let selectionHeightStyle = opts && 'selectionHeightStyle' in opts ? opts.selectionHeightStyle : C11 || CT.C11;
    let selectionWidthStyle = opts && 'selectionWidthStyle' in opts ? opts.selectionWidthStyle : C12 || CT.C12;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
    let floatingCursorAddedMargin = opts && 'floatingCursorAddedMargin' in opts ? opts.floatingCursorAddedMargin : C13 || CT.C13;
    let promptRectRange = opts && 'promptRectRange' in opts ? opts.promptRectRange : null;
    let promptRectColor = opts && 'promptRectColor' in opts ? opts.promptRectColor : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C14 || CT.C14;
    let textSelectionDelegate = opts && 'textSelectionDelegate' in opts ? opts.textSelectionDelegate : null;
    this[_textLayoutLastMaxWidth] = null;
    this[_textLayoutLastMinWidth] = null;
    this[_lastCaretRect] = null;
    this[_selectionStartInViewport] = new (ValueNotifierOfboolL()).new(true);
    this[_selectionEndInViewport] = new (ValueNotifierOfboolL()).new(true);
    this[_cursorResetLocation] = -1;
    this[_wasSelectingVerticallyWithKeyboard] = false;
    this[_cachedPlainText] = null;
    this[_hasFocus] = false;
    this[_listenerAttached] = false;
    this[_forceLine] = false;
    this[_readOnly] = false;
    this[_selectionRects] = null;
    this[_cursorWidth] = 1.0;
    this[_floatingCursorOn] = false;
    this[_floatingCursorOffset] = null;
    this[_floatingCursorTextPosition] = null;
    this[_maxScrollExtent] = 0.0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_tap] = null;
    this[_longPress] = null;
    this[_lastTapDownPosition] = null;
    this[_caretPrototype] = null;
    this[_relativeOrigin] = C15 || CT.C15;
    this[_previousOffset] = null;
    this[_resetOriginOnLeft] = false;
    this[_resetOriginOnRight] = false;
    this[_resetOriginOnTop] = false;
    this[_resetOriginOnBottom] = false;
    this[_resetFloatingCursorAnimationValue] = null;
    this[_promptRectPaint] = ui.Paint.new();
    this[onSelectionChanged$] = onSelectionChanged;
    this[onCaretChanged$] = onCaretChanged;
    this[ignorePointer$] = ignorePointer;
    this[textSelectionDelegate$] = textSelectionDelegate;
    if (!(textAlign != null)) dart.assertFailed(null, L1, 224, 15, "textAlign != null");
    if (!(textDirection != null)) dart.assertFailed("RenderEditable created without a textDirection.", L1, 225, 15, "textDirection != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, L1, 226, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, L1, 227, 15, "minLines == null || minLines > 0");
    if (!(startHandleLayerLink != null)) dart.assertFailed(null, L1, 228, 15, "startHandleLayerLink != null");
    if (!(endHandleLayerLink != null)) dart.assertFailed(null, L1, 229, 15, "endHandleLayerLink != null");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", L1, 231, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands != null)) dart.assertFailed(null, L1, 234, 15, "expands != null");
    if (!(!dart.test(expands) || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", L1, 236, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(textScaleFactor != null)) dart.assertFailed(null, L1, 239, 15, "textScaleFactor != null");
    if (!(offset != null)) dart.assertFailed(null, L1, 240, 15, "offset != null");
    if (!(ignorePointer != null)) dart.assertFailed(null, L1, 241, 15, "ignorePointer != null");
    if (!(textWidthBasis != null)) dart.assertFailed(null, L1, 242, 15, "textWidthBasis != null");
    if (!(paintCursorAboveText != null)) dart.assertFailed(null, L1, 243, 15, "paintCursorAboveText != null");
    if (!(obscuringCharacter != null && extensions['StringCharacters|get#characters'](obscuringCharacter)[$length] === 1)) dart.assertFailed(null, L1, 244, 15, "obscuringCharacter != null && obscuringCharacter.characters.length == 1");
    if (!(obscureText != null)) dart.assertFailed(null, L1, 245, 15, "obscureText != null");
    if (!(textSelectionDelegate != null)) dart.assertFailed(null, L1, 246, 15, "textSelectionDelegate != null");
    if (!(cursorWidth != null && dart.notNull(cursorWidth) >= 0.0)) dart.assertFailed(null, L1, 247, 15, "cursorWidth != null && cursorWidth >= 0.0");
    if (!(readOnly != null)) dart.assertFailed(null, L1, 248, 15, "readOnly != null");
    if (!(forceLine != null)) dart.assertFailed(null, L1, 249, 15, "forceLine != null");
    if (!(devicePixelRatio != null)) dart.assertFailed(null, L1, 250, 15, "devicePixelRatio != null");
    if (!(selectionHeightStyle != null)) dart.assertFailed(null, L1, 251, 15, "selectionHeightStyle != null");
    if (!(selectionWidthStyle != null)) dart.assertFailed(null, L1, 252, 15, "selectionWidthStyle != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, L1, 253, 15, "clipBehavior != null");
    this[_textPainter] = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, locale: locale, strutStyle: strutStyle, textHeightBehavior: textHeightBehavior, textWidthBasis: textWidthBasis});
    this[_cursorColor] = cursorColor;
    this[_backgroundCursorColor] = backgroundCursorColor;
    this[_showCursor] = (t0 = showCursor, t0 == null ? new (ValueNotifierOfboolL()).new(false) : t0);
    this[_maxLines] = maxLines;
    this[_minLines] = minLines;
    this[_expands] = expands;
    this[_selectionColor] = selectionColor;
    this[_selection] = selection;
    this[_offset] = offset;
    this[_cursorWidth] = cursorWidth;
    this[_cursorRadius] = cursorRadius;
    this[_paintCursorOnTop] = paintCursorAboveText;
    this[_cursorOffset] = cursorOffset;
    this[_floatingCursorAddedMargin] = floatingCursorAddedMargin;
    this[_enableInteractiveSelection] = enableInteractiveSelection;
    this[_devicePixelRatio] = devicePixelRatio;
    this[_selectionHeightStyle] = selectionHeightStyle;
    this[_selectionWidthStyle] = selectionWidthStyle;
    this[_startHandleLayerLink] = startHandleLayerLink;
    this[_endHandleLayerLink] = endHandleLayerLink;
    this[_obscuringCharacter] = obscuringCharacter;
    this[_obscureText] = obscureText;
    this[_readOnly] = readOnly;
    this[_forceLine] = forceLine;
    this[_promptRectRange] = promptRectRange;
    this[_clipBehavior] = clipBehavior;
    editable.RenderEditable.__proto__.new.call(this);
    if (!(this[_showCursor] != null)) dart.assertFailed(null, L1, 290, 12, "_showCursor != null");
    if (!(!dart.test(this[_showCursor].value) || cursorColor != null)) dart.assertFailed(null, L1, 291, 12, "!_showCursor.value || cursorColor != null");
    this.hasFocus = (t0$ = hasFocus, t0$ == null ? false : t0$);
    if (promptRectColor != null) this[_promptRectPaint].color = promptRectColor;
  }).prototype = editable.RenderEditable.prototype;
  dart.addTypeTests(editable.RenderEditable);
  dart.addTypeCaches(editable.RenderEditable);
  dart.setMethodSignature(editable.RenderEditable, () => ({
    __proto__: dart.getMethods(editable.RenderEditable.__proto__),
    [_updateSelectionExtentsVisibility]: dart.fnType(dart.void, [dart.legacy(ui.Offset)]),
    [_handleSelectionChange]: dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection), dart.legacy(editable.SelectionChangedCause)]),
    [_handleKeyEvent]: dart.fnType(dart.void, [dart.legacy(raw_keyboard.RawKeyEvent)]),
    [_handleMovement]: dart.fnType(dart.void, [dart.legacy(keyboard_key.LogicalKeyboardKey)], {lineModifier: dart.legacy(core.bool), shift: dart.legacy(core.bool), wordModifier: dart.legacy(core.bool)}, {}),
    [_handleShortcuts]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(keyboard_key.LogicalKeyboardKey)]),
    [_handleDelete]: dart.fnType(dart.void, []),
    markNeedsTextLayout: dart.fnType(dart.void, []),
    setPromptRectRange: dart.fnType(dart.void, [dart.legacy(ui.TextRange)]),
    [_handleSetSelection]: dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection)]),
    [_handleMoveCursorForwardByCharacter]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_handleMoveCursorBackwardByCharacter]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_handleMoveCursorForwardByWord]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_handleMoveCursorBackwardByWord]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_getNextWord]: dart.fnType(dart.legacy(ui.TextRange), [dart.legacy(core.int)]),
    [_getPreviousWord]: dart.fnType(dart.legacy(ui.TextRange), [dart.legacy(core.int)]),
    [_onlyWhitespace]: dart.fnType(dart.legacy(core.bool), [dart.legacy(ui.TextRange)]),
    [_getMaxScrollExtent]: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.Size)]),
    getEndpointsForSelection: dart.fnType(dart.legacy(core.List$(dart.legacy(editable.TextSelectionPoint))), [dart.legacy(text_editing.TextSelection)]),
    getPositionForPoint: dart.fnType(dart.legacy(ui.TextPosition), [dart.legacy(ui.Offset)]),
    getLocalRectForCaret: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(ui.TextPosition)]),
    [_preferredHeight]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    handleTapDown: dart.fnType(dart.void, [dart.legacy(tap.TapDownDetails)]),
    [_handleTapDown]: dart.fnType(dart.void, [dart.legacy(tap.TapDownDetails)]),
    handleTap: dart.fnType(dart.void, []),
    [_handleTap]: dart.fnType(dart.void, []),
    handleDoubleTap: dart.fnType(dart.void, []),
    handleLongPress: dart.fnType(dart.void, []),
    [_handleLongPress]: dart.fnType(dart.void, []),
    selectPosition: dart.fnType(dart.void, [], {cause: dart.legacy(editable.SelectionChangedCause)}, {}),
    selectPositionAt: dart.fnType(dart.void, [], {cause: dart.legacy(editable.SelectionChangedCause), from: dart.legacy(ui.Offset), to: dart.legacy(ui.Offset)}, {}),
    selectWord: dart.fnType(dart.void, [], {cause: dart.legacy(editable.SelectionChangedCause)}, {}),
    selectWordsInRange: dart.fnType(dart.void, [], {cause: dart.legacy(editable.SelectionChangedCause), from: dart.legacy(ui.Offset), to: dart.legacy(ui.Offset)}, {}),
    selectWordEdge: dart.fnType(dart.void, [], {cause: dart.legacy(editable.SelectionChangedCause)}, {}),
    [_selectWordAtOffset]: dart.fnType(dart.legacy(text_editing.TextSelection), [dart.legacy(ui.TextPosition)]),
    [_selectLineAtOffset]: dart.fnType(dart.legacy(text_editing.TextSelection), [dart.legacy(ui.TextPosition)]),
    [_layoutText]: dart.fnType(dart.void, [], {maxWidth: dart.legacy(core.double), minWidth: dart.legacy(core.double)}, {}),
    [_getPixelPerfectCursorOffset]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Rect)]),
    [_paintCaret]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset), dart.legacy(ui.TextPosition)]),
    setFloatingCursor: dart.fnType(dart.void, [dart.legacy(text_input.FloatingCursorDragState), dart.legacy(ui.Offset), dart.legacy(ui.TextPosition)], {resetLerpValue: dart.legacy(core.double)}, {}),
    [_paintFloatingCaret]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset)]),
    calculateBoundedFloatingCursorOffset: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset)]),
    [_paintSelection]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset)]),
    [_paintPromptRectIfNeeded]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset)]),
    [_paintContents]: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)]),
    [_paintHandleLayers]: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(core.List$(dart.legacy(editable.TextSelectionPoint)))])
  }));
  dart.setGetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getGetters(editable.RenderEditable.__proto__),
    textHeightBehavior: dart.legacy(ui.TextHeightBehavior),
    textWidthBasis: dart.legacy(text_painter.TextWidthBasis),
    devicePixelRatio: dart.legacy(core.double),
    obscuringCharacter: dart.legacy(core.String),
    obscureText: dart.legacy(core.bool),
    selectionStartInViewport: dart.legacy(change_notifier.ValueListenable$(dart.legacy(core.bool))),
    selectionEndInViewport: dart.legacy(change_notifier.ValueListenable$(dart.legacy(core.bool))),
    [_plainText]: dart.legacy(core.String),
    text: dart.legacy(text_span.TextSpan),
    textAlign: dart.legacy(ui.TextAlign),
    textDirection: dart.legacy(ui.TextDirection),
    locale: dart.legacy(ui.Locale),
    strutStyle: dart.legacy(strut_style.StrutStyle),
    cursorColor: dart.legacy(ui.Color),
    backgroundCursorColor: dart.legacy(ui.Color),
    showCursor: dart.legacy(change_notifier.ValueNotifier$(dart.legacy(core.bool))),
    hasFocus: dart.legacy(core.bool),
    forceLine: dart.legacy(core.bool),
    readOnly: dart.legacy(core.bool),
    maxLines: dart.legacy(core.int),
    minLines: dart.legacy(core.int),
    expands: dart.legacy(core.bool),
    selectionColor: dart.legacy(ui.Color),
    textScaleFactor: dart.legacy(core.double),
    selection: dart.legacy(text_editing.TextSelection),
    offset: dart.legacy(viewport_offset.ViewportOffset),
    cursorWidth: dart.legacy(core.double),
    paintCursorAboveText: dart.legacy(core.bool),
    cursorOffset: dart.legacy(ui.Offset),
    cursorRadius: dart.legacy(ui.Radius),
    startHandleLayerLink: dart.legacy(layer.LayerLink),
    endHandleLayerLink: dart.legacy(layer.LayerLink),
    floatingCursorAddedMargin: dart.legacy(edge_insets.EdgeInsets),
    selectionHeightStyle: dart.legacy(ui.BoxHeightStyle),
    selectionWidthStyle: dart.legacy(ui.BoxWidthStyle),
    enableInteractiveSelection: dart.legacy(core.bool),
    selectionEnabled: dart.legacy(core.bool),
    promptRectColor: dart.legacy(ui.Color),
    maxScrollExtent: dart.legacy(core.double),
    [_caretMargin]: dart.legacy(core.double),
    clipBehavior: dart.legacy(ui.Clip),
    [_isMultiline]: dart.legacy(core.bool),
    [_viewportAxis]: dart.legacy(basic_types.Axis),
    [_paintOffset]: dart.legacy(ui.Offset),
    [_viewportExtent]: dart.legacy(core.double),
    [_hasVisualOverflow]: dart.legacy(core.bool),
    preferredLineHeight: dart.legacy(core.double),
    [_getCaretPrototype]: dart.legacy(ui.Rect)
  }));
  dart.setSetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getSetters(editable.RenderEditable.__proto__),
    textHeightBehavior: dart.legacy(ui.TextHeightBehavior),
    textWidthBasis: dart.legacy(text_painter.TextWidthBasis),
    devicePixelRatio: dart.legacy(core.double),
    obscuringCharacter: dart.legacy(core.String),
    obscureText: dart.legacy(core.bool),
    text: dart.legacy(text_span.TextSpan),
    textAlign: dart.legacy(ui.TextAlign),
    textDirection: dart.legacy(ui.TextDirection),
    locale: dart.legacy(ui.Locale),
    strutStyle: dart.legacy(strut_style.StrutStyle),
    cursorColor: dart.legacy(ui.Color),
    backgroundCursorColor: dart.legacy(ui.Color),
    showCursor: dart.legacy(change_notifier.ValueNotifier$(dart.legacy(core.bool))),
    hasFocus: dart.legacy(core.bool),
    forceLine: dart.legacy(core.bool),
    readOnly: dart.legacy(core.bool),
    maxLines: dart.legacy(core.int),
    minLines: dart.legacy(core.int),
    expands: dart.legacy(core.bool),
    selectionColor: dart.legacy(ui.Color),
    textScaleFactor: dart.legacy(core.double),
    selection: dart.legacy(text_editing.TextSelection),
    offset: dart.legacy(viewport_offset.ViewportOffset),
    cursorWidth: dart.legacy(core.double),
    paintCursorAboveText: dart.legacy(core.bool),
    cursorOffset: dart.legacy(ui.Offset),
    cursorRadius: dart.legacy(ui.Radius),
    startHandleLayerLink: dart.legacy(layer.LayerLink),
    endHandleLayerLink: dart.legacy(layer.LayerLink),
    floatingCursorAddedMargin: dart.legacy(edge_insets.EdgeInsets),
    selectionHeightStyle: dart.legacy(ui.BoxHeightStyle),
    selectionWidthStyle: dart.legacy(ui.BoxWidthStyle),
    enableInteractiveSelection: dart.legacy(core.bool),
    promptRectColor: dart.legacy(ui.Color),
    clipBehavior: dart.legacy(ui.Clip)
  }));
  dart.setLibraryUri(editable.RenderEditable, L0);
  dart.setFieldSignature(editable.RenderEditable, () => ({
    __proto__: dart.getFields(editable.RenderEditable.__proto__),
    onSelectionChanged: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(text_editing.TextSelection), dart.legacy(editable.RenderEditable), dart.legacy(editable.SelectionChangedCause)]))),
    [_textLayoutLastMaxWidth]: dart.fieldType(dart.legacy(core.double)),
    [_textLayoutLastMinWidth]: dart.fieldType(dart.legacy(core.double)),
    onCaretChanged: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(ui.Rect)]))),
    ignorePointer: dart.fieldType(dart.legacy(core.bool)),
    [_devicePixelRatio]: dart.fieldType(dart.legacy(core.double)),
    [_obscuringCharacter]: dart.fieldType(dart.legacy(core.String)),
    [_obscureText]: dart.fieldType(dart.legacy(core.bool)),
    textSelectionDelegate: dart.fieldType(dart.legacy(text_input.TextSelectionDelegate)),
    [_lastCaretRect]: dart.fieldType(dart.legacy(ui.Rect)),
    [_selectionStartInViewport]: dart.finalFieldType(dart.legacy(change_notifier.ValueNotifier$(dart.legacy(core.bool)))),
    [_selectionEndInViewport]: dart.finalFieldType(dart.legacy(change_notifier.ValueNotifier$(dart.legacy(core.bool)))),
    [_cursorResetLocation]: dart.fieldType(dart.legacy(core.int)),
    [_wasSelectingVerticallyWithKeyboard]: dart.fieldType(dart.legacy(core.bool)),
    [_cachedPlainText]: dart.fieldType(dart.legacy(core.String)),
    [_textPainter]: dart.finalFieldType(dart.legacy(text_painter.TextPainter)),
    [_cursorColor]: dart.fieldType(dart.legacy(ui.Color)),
    [_backgroundCursorColor]: dart.fieldType(dart.legacy(ui.Color)),
    [_showCursor]: dart.fieldType(dart.legacy(change_notifier.ValueNotifier$(dart.legacy(core.bool)))),
    [_hasFocus]: dart.fieldType(dart.legacy(core.bool)),
    [_listenerAttached]: dart.fieldType(dart.legacy(core.bool)),
    [_forceLine]: dart.fieldType(dart.legacy(core.bool)),
    [_readOnly]: dart.fieldType(dart.legacy(core.bool)),
    [_maxLines]: dart.fieldType(dart.legacy(core.int)),
    [_minLines]: dart.fieldType(dart.legacy(core.int)),
    [_expands]: dart.fieldType(dart.legacy(core.bool)),
    [_selectionColor]: dart.fieldType(dart.legacy(ui.Color)),
    [_selectionRects]: dart.fieldType(dart.legacy(core.List$(dart.legacy(ui.TextBox)))),
    [_selection]: dart.fieldType(dart.legacy(text_editing.TextSelection)),
    [_offset]: dart.fieldType(dart.legacy(viewport_offset.ViewportOffset)),
    [_cursorWidth]: dart.fieldType(dart.legacy(core.double)),
    [_paintCursorOnTop]: dart.fieldType(dart.legacy(core.bool)),
    [_cursorOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    [_cursorRadius]: dart.fieldType(dart.legacy(ui.Radius)),
    [_startHandleLayerLink]: dart.fieldType(dart.legacy(layer.LayerLink)),
    [_endHandleLayerLink]: dart.fieldType(dart.legacy(layer.LayerLink)),
    [_floatingCursorAddedMargin]: dart.fieldType(dart.legacy(edge_insets.EdgeInsets)),
    [_floatingCursorOn]: dart.fieldType(dart.legacy(core.bool)),
    [_floatingCursorOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    [_floatingCursorTextPosition]: dart.fieldType(dart.legacy(ui.TextPosition)),
    [_selectionHeightStyle]: dart.fieldType(dart.legacy(ui.BoxHeightStyle)),
    [_selectionWidthStyle]: dart.fieldType(dart.legacy(ui.BoxWidthStyle)),
    [_enableInteractiveSelection]: dart.fieldType(dart.legacy(core.bool)),
    [_promptRectRange]: dart.fieldType(dart.legacy(ui.TextRange)),
    [_maxScrollExtent]: dart.fieldType(dart.legacy(core.double)),
    [_clipBehavior]: dart.fieldType(dart.legacy(ui.Clip)),
    [_tap]: dart.fieldType(dart.legacy(tap.TapGestureRecognizer)),
    [_longPress]: dart.fieldType(dart.legacy(long_press.LongPressGestureRecognizer)),
    [_lastTapDownPosition]: dart.fieldType(dart.legacy(ui.Offset)),
    [_caretPrototype]: dart.fieldType(dart.legacy(ui.Rect)),
    [_relativeOrigin]: dart.fieldType(dart.legacy(ui.Offset)),
    [_previousOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    [_resetOriginOnLeft]: dart.fieldType(dart.legacy(core.bool)),
    [_resetOriginOnRight]: dart.fieldType(dart.legacy(core.bool)),
    [_resetOriginOnTop]: dart.fieldType(dart.legacy(core.bool)),
    [_resetOriginOnBottom]: dart.fieldType(dart.legacy(core.bool)),
    [_resetFloatingCursorAnimationValue]: dart.fieldType(dart.legacy(core.double)),
    [_promptRectPaint]: dart.finalFieldType(dart.legacy(ui.Paint))
  }));
  dart.defineLazy(editable.RenderEditable, {
    /*editable.RenderEditable._movementKeys*/get _movementKeys() {
      return LinkedHashSetOfLogicalKeyboardKeyL().from([keyboard_key.LogicalKeyboardKey.arrowRight, keyboard_key.LogicalKeyboardKey.arrowLeft, keyboard_key.LogicalKeyboardKey.arrowUp, keyboard_key.LogicalKeyboardKey.arrowDown]);
    },
    /*editable.RenderEditable._shortcutKeys*/get _shortcutKeys() {
      return LinkedHashSetOfLogicalKeyboardKeyL().from([keyboard_key.LogicalKeyboardKey.keyA, keyboard_key.LogicalKeyboardKey.keyC, keyboard_key.LogicalKeyboardKey.keyV, keyboard_key.LogicalKeyboardKey.keyX, keyboard_key.LogicalKeyboardKey.delete]);
    },
    /*editable.RenderEditable._nonModifierKeys*/get _nonModifierKeys() {
      return (() => {
        let t0 = new (_HashSetOfLogicalKeyboardKeyL()).new();
        for (let t1 of editable.RenderEditable._shortcutKeys)
          t0.add(t1);
        for (let t2 of editable.RenderEditable._movementKeys)
          t0.add(t2);
        return t0;
      })();
    },
    /*editable.RenderEditable._modifierKeys*/get _modifierKeys() {
      return LinkedHashSetOfLogicalKeyboardKeyL().from([keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.alt]);
    },
    /*editable.RenderEditable._macOsModifierKeys*/get _macOsModifierKeys() {
      return LinkedHashSetOfLogicalKeyboardKeyL().from([keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.alt]);
    },
    /*editable.RenderEditable._interestingKeys*/get _interestingKeys() {
      return (() => {
        let t3 = new (_HashSetOfLogicalKeyboardKeyL()).new();
        for (let t4 of editable.RenderEditable._modifierKeys)
          t3.add(t4);
        for (let t5 of editable.RenderEditable._macOsModifierKeys)
          t3.add(t5);
        for (let t6 of editable.RenderEditable._nonModifierKeys)
          t3.add(t6);
        return t3;
      })();
    }
  }, true);
  editable._isWhitespace = function _isWhitespace(codeUnit) {
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      {
        break;
      }
      default:
      {
        return false;
      }
    }
    return true;
  };
  var C25;
  dart.defineLazy(editable, {
    /*editable._kCaretGap*/get _kCaretGap() {
      return 1;
    },
    /*editable._kCaretHeightOffset*/get _kCaretHeightOffset() {
      return 2;
    },
    /*editable._kFloatingCaretSizeIncrease*/get _kFloatingCaretSizeIncrease() {
      return C25 || CT.C25;
    },
    /*editable._kFloatingCaretRadius*/get _kFloatingCaretRadius() {
      return 1;
    }
  }, true);
  dart.trackLibraries("packages/flutter/src/rendering/editable.dart", {
    "package:flutter/src/rendering/editable.dart": editable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["editable.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiEA;;wDA3BK;;;;EA2BL;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoBe;;;;;;IAGO;;;;;;;AAIlB,cAAQ;;;AAEJ,gBAAmB,UAAV,cAAK;;;;AAEd,gBAAmB,UAAV,cAAK;;;AAElB,YAAe,UAAN;IACX;;8CAnB8B,OAAY;IAAZ;IAAY;UAC/B,AAAM,KAAD,IAAI;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0ND;;;;;;IAMJ;;;;;;IAaf;;;;;;IA8DiB;;;;;;;AA3DuB,YAAA,AAAa;IAAkB;2BAClC;AACxC,UAAoC,YAAhC,AAAa,uCAAsB,KAAK,GAC1C;AACqC,MAAvC,AAAa,wCAAqB,KAAK;AAClB,MAArB;IACF;;AAGqC,YAAA,AAAa;IAAc;uBAC9B;AAChC,YAAO,AAAM,KAAD,IAAI;AAChB,UAAI,AAAa,AAAe,qCAAG,KAAK,EACtC;AACiC,MAAnC,AAAa,oCAAiB,KAAK;AACd,MAArB;IACF;;AAK+B;IAAiB;yBAEpB;AAC1B,UAAI,AAAiB,yBAAG,KAAK,EAC3B;AACuB,MAAzB,0BAAoB,KAAK;AACJ,MAArB;IACF;;AAKiC;IAAmB;2BAEtB;AAC5B,UAAI,AAAoB,6BAAG,KAAK;AAC9B;;AAEF,YAAO,AAAc,KAAT,IAAI,QAAc,AAAW,AAAO,8CAAxB,KAAK,eAAsB;AACxB,MAA3B,4BAAsB,KAAK;AACV,MAAjB;IACF;;AAGwB;IAAY;oBAEf;AACnB,UAAiB,YAAb,oBAAgB,KAAK,GACvB;AACkB,MAApB,qBAAe,KAAK;AACM,MAA1B;IACF;;AAqBsD;IAAyB;;AAa3B;IAAuB;wCAG7B;AACjC,0BAAuB,AAAK,oBAAE;AAE5B,wBAAc,AAAa,qCACtC,iCAAqB,AAAW,kCAAiB,AAAW,6BAC5D;AAYwC,MAF1C,AAA0B,wCAAQ,AAC/B,AACA,aAF4C,uBAEnC,AAAY,WAAD,MAAG,eAAe;AAE5B,sBAAa,AAAa,qCACrC,iCAAqB,AAAW,gCAAe,AAAW,6BAC1D;AAIsC,MAFxC,AAAwB,sCAAQ,AAC7B,AACA,aAF0C,uBAEjC,AAAU,SAAD,MAAG,eAAe;IACzC;6BAkBgB,eACQ;;AAMX,0BAAgB,AAAc,AAAW,AAElD,aAFsC,gBAAe,KAClD,AAAc,AAAa,aAAd,kBAAiB,gBAC7B;AACN,UAAkB,YAAd,aAAa,EAAI,mBACd,KAAK,IAA0B,4CAC9B,aAAa;AACnB;;AAEF,UAAI,2BAAsB;AACsB,aAA3B,aAAa;aAAQ,KAAK;QAA7C,AAAkB,4BAAgB;;IAEtC;sBAwCiC;AAC/B;AAEE;;AAGF,WAAa,sBAAT,QAAQ,KAAwB,AAAmB,2BAAG,MACxD;AAC4B,wBAAiC,iDAA6B,AAAS;AAC5E,gBAAM,AAAS,QAAD;AAE5B,oBAAwB,2BAAd,AAAS,QAAD;AAC7B,qBAAK,AAAiB,kDAAS,GAAG,MAC8C,aAA5E,AAAY,AAAyD,WAA1D,YAAY,OAAO,GAAG,6CAAqB,mDAAwB,eAC9E,AAAY,AAA6B,WAA9B,YAAY;AAIzB;;AAGS,kCAAwB,OAAO,GAAG,AAAS,QAAD,gBAAgB,AAAS,QAAD;AAClE,kCAAwB,OAAO,GAAG,AAAS,QAAD,iBAAiB,AAAS,QAAD;AACnE,sCAA4B,OAAO,GAAG,AAAS,QAAD,iBAAiB,AAAS,QAAD;AAClF,oBAAI,AAAc,+CAAS,GAAG;AACkG,QAA9H,sBAAgB,GAAG,iBAAgB,qBAAqB,gBAAgB,qBAAqB,SAAS,AAAS,QAAD;YACzG,eAAI,yBAAyB,eAAI,AAAc,+CAAS,GAAG;AAG3C,QAArB,uBAAiB,GAAG;YACf,KAAQ,YAAJ,GAAG,EAAuB;AACpB,QAAf;;IAEJ;yBAc6B,OAAc,QAAc;AACvD,YAAa,AAAK,aAAX,KAAK,KAAI,KAAW,aAAN,KAAK,KAAI,AAAO,MAAD;AACpC,UAAI,AAAM,KAAD,KAAI,AAAO,MAAD;AACjB,cAAO,AAAO,OAAD;;AAGX,kBAAQ;AACK,sBAAmB,AAAW,8CAAlB,MAAM,YAAsB,QAAQ;AAC/D,YAAI,AAAM,KAAD,iBAAI,KAAK;AACa,UAA7B,QAAA,AAAM,KAAD,GAAI,AAAc,aAAD;AACtB,gBAAO;;AAET,sBAAI,iBAAiB;AACnB,gBAAO;;AAET,cAAO,wBAAc,AAAc,aAAD,cAAY;;AAEhD,YAAO,AAAO,AAAO,OAAR,UAAoB,AAAW,cAArB,SAAS;IAClC;6BAciC,OAAc,QAAc;;AAC3D,YAAa,AAAK,aAAX,KAAK,KAAI,KAAW,aAAN,KAAK,KAAI,AAAO,MAAD;AACpC,UAAI,AAAM,KAAD,KAAI;AACX,cAAO;;AAGL,kBAAQ;AACR;AACJ,eAAkB,gBAAwB,+CAAP,MAAM;AACvC,uBAAK,iBAAiB,gBACjB,uBAA6C,AAAW,cAA5B,AAAW,8CAAzB,aAAa,wBAAwC;AAC7C,UAAzB,oBAAoB,KAAK;;AAE3B,YAAI,AAAM,AAAuB,KAAxB,GAAG,AAAc,aAAD,wBAAW,KAAK;AACvC,2BAAO,iBAAiB,IAAG,KAAK,IAAqB,KAAlB,iBAAiB,QAAjB,OAAqB;;AAE7B,QAA7B,QAAA,AAAM,KAAD,GAAI,AAAc,aAAD;;AAExB,YAAO;IACT;sBAGuB;UACJ;UACA;UACA;AAEjB,oBAAI,YAAY,eAAI,YAAY;AAE9B;;AAGY,yBAAe;AAElB,uBAAiB,YAAJ,GAAG,EAAuB;AACvC,sBAAgB,YAAJ,GAAG,EAAuB;AACtC,oBAAc,YAAJ,GAAG,EAAuB;AACpC,sBAAgB,YAAJ,GAAG,EAAuB;AAEjD,WAAK,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS;AAExD,sBAAI,YAAY;AAGd,cAAI,SAAS;AAKD,6BAAa,0CAAkB,AAAa,YAAD,eAAe,kBAAY;AAC5D,gCAAgB,0BAAoB,iCAAqB,UAAU;AACX,YAA5E,eAAe,AAAa,YAAD,yBAAwB,AAAc,aAAD;;AAMtD,6BAAa,sCAAc,AAAa,YAAD,eAAe,kBAAY;AACxD,gCAAgB,0BAAoB,iCAAqB,UAAU;AACT,YAA9E,eAAe,AAAa,YAAD,yBAAwB,AAAc,aAAD;;cAE7D,eAAI,YAAY;AAGrB,cAAI,SAAS;AAKD,6BAAa,0CAAkB,AAAa,YAAD,eAAe,kBAAY;AAC5D,gCAAgB,0BAAoB,iCAAqB,UAAU;AACX,YAA5E,eAAe,AAAa,YAAD,yBAAwB,AAAc,aAAD;;AAMtD,6BAAa,sCAAc,AAAa,YAAD,eAAe,kBAAY;AACxD,gCAAgB,0BAAoB,iCAAqB,UAAU;AACT,YAA9E,eAAe,AAAa,YAAD,yBAAwB,AAAc,aAAD;;;AAGlE,cAAI,UAAU,IAA8B,aAA1B,AAAa,YAAD,iBAAgB,AAAW;AAC7C,6BAAa,sCAAc,AAAa,YAAD,eAAe;AACtD,2BAAsB,aAAX,UAAU,iBAAG,AAAa,YAAD;AACgB,YAA9D,eAAe,AAAa,YAAD,yBAAwB,UAAU;AAC7D,0BAAI,KAAK;AACyB,cAAhC,6BAAqB,aAArB,8BAAwB,QAAQ;;gBAE7B,KAAI,SAAS,IAA8B,aAA1B,AAAa,YAAD,iBAAgB;AACxC,iCAAiB,0CAAkB,AAAa,YAAD,eAAe;AAC9D,2BAAqC,aAA1B,AAAa,YAAD,8BAAgB,cAAc;AACG,YAAlE,eAAe,AAAa,YAAD,yBAAwB,cAAc;AACjE,0BAAI,KAAK;AACyB,cAAhC,6BAAqB,aAArB,8BAAwB,QAAQ;;;;;AASxC,UAAI,SAAS,IAAI,OAAO;AAIT,kCAAsB,AAAa;AACnC,6BAAiB,OAAO,GAAG,AAAK,CAAJ,mBAAM,mBAAmB,IAAG,AAAI,mBAAE,mBAAmB;AAEjF,0BAAc,AAAa,qCAAkB,iCAAqB,AAAa,YAAD,iBAAgB;AAC9F,oCAAwB,AAAY,WAAD,WAAW,KAAK,cAAc;AAC3D,uBAAW,AAAa,wCAAqB,qBAAqB;AAMrF,YAAI,AAAS,AAAO,QAAR,WAAW,AAAa,YAAD;AACjC,cAAI,SAAS;AAC0D,YAArE,eAAe,AAAa,YAAD,yBAAwB,AAAW;gBACzD,KAAI,OAAO;AACqC,YAArD,eAAe,AAAa,YAAD,yBAAwB;;AAEV,UAA3C,4CAAsC,KAAK;cACtC,eAAI,wDAAuC,KAAK;AACmB,UAAxE,eAAe,AAAa,YAAD,yBAAwB;AACR,UAA3C,4CAAsC;;AAE6B,UAAnE,eAAe,AAAa,YAAD,yBAAwB,AAAS,QAAD;AACX,UAAhD,6BAAuB,AAAa,YAAD;;;AAMvC,qBAAK,KAAK;AAGJ,wBAAY,AAAa,YAAD;AAC5B,uBAAK,AAAU;AACb,cAAI,SAAS;AAC0G,YAArH,YAAoC,aAAxB,AAAa,YAAD,4BAAc,AAAa,YAAD,iBAAgB,AAAa,YAAD,cAAc,AAAa,YAAD;gBACnG,KAAI,UAAU;AACkG,YAArH,YAAoC,aAAxB,AAAa,YAAD,4BAAc,AAAa,YAAD,iBAAgB,AAAa,YAAD,cAAc,AAAa,YAAD;;;AAGlC,QAA1E,eAA6B,4CAAa,iCAAqB,SAAS;;AAIuC,MAAjH,AAAsB,8CAAmB,AAAsB,AAAiB,iEAAoB,YAAY;AAI/G,MAHD,6BACE,YAAY,EACU;IAE1B;uBAIiD;AAApB;AAC3B,uBAAO,AAAc,+CAAS,GAAG,sBAAG,AAAmC,2BAApB,GAAG;AACtD,YAAQ,YAAJ,GAAG,EAAuB;AAC5B,yBAAK,AAAU;AAE6C,YADhD,4BACN,uCAAoB,AAAU,0BAAW;;AAE/C;;AAEF,YAAQ,YAAJ,GAAG,EAAuB;AAC5B,yBAAK,AAAU;AAC2D,YAA9D,4BAAQ,uCAAoB,AAAU,0BAAW;AAK1D,YAJD,AAAsB,8CAAmB,2CAEnC,aADE,AAAU,0BAAW,kCACrB,AAAU,yBAAU,+BACD,kDAAkB,AAAU;;AAGzD;;AAEF,YAAQ,YAAJ,GAAG,EAAuB;AAGL,sBAAQ,AAAsB;AACjC,sBAAO,MAAgB;AAC3C,cAAI,IAAI,IAAI;AAQT,YAPD,AAAsB,8CAAmB,2CAEnC,AACA,aAFE,AAAM,AAAU,KAAX,sBAAsB,AAAM,KAAD,uBAChC,AAAK,IAAD,sBACJ,AAAM,AAAU,KAAX,qBAAqB,AAAM,KAAD,oBACZ,kDACS,aAAtB,AAAM,AAAU,KAAX,oBAAmB,AAAK,AAAK,IAAN;;AAI5C;;AAEF,YAAQ,YAAJ,GAAG,EAAuB;AAO3B,UAND,6BACE,AAAU,qCACI,iBACE,AAAsB,AAAiB,AAAK,2DAEtC;AAExB;;MAEJ;;;AAGe,sBAAY,AAAU,yBAAU;AAC7C,UAAI,AAAU,SAAD;AACD,0BAAc,sCAAc,GAAG,SAAS;AAKjD,QAJD,AAAsB,8CAAmB,2CAErC,aADI,AAAU,0BAAW,qBACvB,AAAU,AAAsB,yBAAZ,8BAAsB,WAAW,cAChC,kDAAkB,AAAU;;AAMtD,QAHD,AAAsB,8CAAmB,2CACjC,AAAU,0BAAW,8BACF,kDAAkB,AAAU;;IAG3D;;AAQgC,MAA9B,gCAA0B;AACI,MAA9B,gCAA0B;AACT,MAAjB;IACF;;AAI8B,MAAtB;AACwB,MAA9B,AAAa;AACiB,MAA9B,gCAA0B;AACI,MAA9B,gCAA0B;IAC5B;;AAKsD,MAApD,AAAiB,0BAAA,OAAjB,yBAAqB,AAAa,AAAK,wCAAtB;AACjB,YAAO;IACT;;AAGqB,YAAkB,gBAAlB,AAAa;IAAgB;aAEhC;AAChB,UAAsB,YAAlB,AAAa,yBAAQ,KAAK,GAC5B;AACuB,MAAzB,AAAa,0BAAO,KAAK;AACF,MAAvB,yBAAmB;AACE,MAArB;AAC0B,MAA1B;IACF;;AAK2B,YAAA,AAAa;IAAS;kBACzB;AACtB,YAAO,AAAM,KAAD,IAAI;AAChB,UAA2B,YAAvB,AAAa,8BAAa,KAAK,GACjC;AAC4B,MAA9B,AAAa,+BAAY,KAAK;AACT,MAArB;IACF;;AAemC,YAAA,AAAa;IAAa;sBAC7B;AAC9B,YAAO,AAAM,KAAD,IAAI;AAChB,UAA+B,YAA3B,AAAa,kCAAiB,KAAK,GACrC;AACgC,MAAlC,AAAa,mCAAgB,KAAK;AACb,MAArB;AAC0B,MAA1B;IACF;;AAYqB,YAAA,AAAa;IAAM;eACtB;AAChB,UAAwB,YAApB,AAAa,2BAAU,KAAK,GAC9B;AACyB,MAA3B,AAAa,4BAAS,KAAK;AACN,MAArB;IACF;;AAI6B,YAAA,AAAa;IAAU;mBAC1B;AACxB,UAA4B,YAAxB,AAAa,+BAAc,KAAK,GAClC;AAC6B,MAA/B,AAAa,gCAAa,KAAK;AACV,MAArB;IACF;;AAGyB;IAAY;oBAEf;AACpB,UAAiB,YAAb,oBAAgB,KAAK,GACvB;AACkB,MAApB,qBAAe,KAAK;AACJ,MAAhB;IACF;;AAMmC;IAAsB;8BAEzB;AAC9B,UAA0B,YAAtB,4BAAyB,KAAK,GAChC;AAC4B,MAA9B,+BAAyB,KAAK;AACd,MAAhB;IACF;;AAGsC;IAAW;mBAEd;AACjC,YAAO,AAAM,KAAD,IAAI;AAChB,UAAgB,YAAZ,mBAAe,KAAK,GACtB;AACF,oBAAI,gBACF,AAAY,AAA8B,2CAAf;AACV,MAAnB,oBAAc,KAAK;AACnB,oBAAI,gBACF,AAAY,AAA2B,wCAAf;AACV,MAAhB;IACF;;AAGqB;IAAS;iBAGZ;AAChB,YAAO,AAAM,KAAD,IAAI;AAChB,UAAc,YAAV,iBAAa,KAAK,GACpB;AACe,MAAjB,kBAAY,KAAK;AACjB,oBAAI;AACF,aAAO,WAAC;AACyC,QAArC,AAAS,wDAAY;AACT,QAAxB,0BAAoB;;AAEpB,uBAAO;AAC6C,QAAxC,AAAS,2DAAe;AACX,QAAzB,0BAAoB;;AAEI,MAA1B;IACF;;AAGsB;IAAU;kBAEb;AACjB,YAAO,AAAM,KAAD,IAAI;AAChB,UAAe,YAAX,kBAAc,KAAK,GACrB;AACgB,MAAlB,mBAAa,KAAK;AACD,MAAjB;IACF;;AAGqB;IAAS;iBAEZ;AAChB,YAAO,AAAM,KAAD,IAAI;AAChB,UAAc,YAAV,iBAAa,KAAK,GACpB;AACe,MAAjB,kBAAY,KAAK;AACS,MAA1B;IACF;;AAYoB;IAAS;iBAGZ;AACf,YAAO,AAAM,AAAQ,KAAT,IAAI,QAAc,aAAN,KAAK,IAAG;AAChC,UAAI,AAAS,iBAAG,KAAK,EACnB;AACe,MAAjB,kBAAY,KAAK;AACI,MAArB;IACF;;AAGoB;IAAS;iBAGZ;AACf,YAAO,AAAM,AAAQ,KAAT,IAAI,QAAc,aAAN,KAAK,IAAG;AAChC,UAAI,AAAS,iBAAG,KAAK,EACnB;AACe,MAAjB,kBAAY,KAAK;AACI,MAArB;IACF;;AAGoB;IAAQ;gBAEX;AACf,YAAO,AAAM,KAAD,IAAI;AAChB,UAAY,YAAR,cAAW,KAAK,GAClB;AACc,MAAhB,iBAAW,KAAK;AACK,MAArB;IACF;;AAG4B;IAAe;uBAElB;AACvB,UAAoB,YAAhB,uBAAmB,KAAK,GAC1B;AACqB,MAAvB,wBAAkB,KAAK;AACP,MAAhB;IACF;;AAM8B,YAAA,AAAa;IAAe;wBAC/B;AACzB,YAAO,AAAM,KAAD,IAAI;AAChB,UAAI,AAAa,AAAgB,sCAAG,KAAK,EACvC;AACkC,MAApC,AAAa,qCAAkB,KAAK;AACf,MAArB;IACF;;AAK+B;IAAU;kBAEb;AAC1B,UAAe,YAAX,kBAAc,KAAK,GACrB;AACgB,MAAlB,mBAAa,KAAK;AACI,MAAtB,wBAAkB;AACF,MAAhB;AAC0B,MAA1B;IACF;;AAO6B;IAAO;eAEV;AACxB,YAAO,AAAM,KAAD,IAAI;AAChB,UAAY,YAAR,eAAW,KAAK,GAClB;AACF,oBAAI,gBACF,AAAQ,AAA8B,uCAAf;AACV,MAAf,gBAAU,KAAK;AACf,oBAAI,gBACF,AAAQ,AAA2B,oCAAf;AACL,MAAjB;IACF;;AAG0B;IAAY;oBAEf;AACrB,UAAI,AAAa,sBAAG,KAAK,EACvB;AACkB,MAApB,qBAAe,KAAK;AACH,MAAjB;IACF;;AAQiC;IAAiB;6BAEpB;AAC5B,UAAsB,YAAlB,yBAAqB,KAAK,GAC5B;AACuB,MAAzB,0BAAoB,KAAK;AACR,MAAjB;IACF;;AAU2B;IAAa;qBAEhB;AACtB,UAAkB,YAAd,qBAAiB,KAAK,GACxB;AACmB,MAArB,sBAAgB,KAAK;AACJ,MAAjB;IACF;;AAG2B;IAAa;qBAEhB;AACtB,UAAkB,YAAd,qBAAiB,KAAK,GACxB;AACmB,MAArB,sBAAgB,KAAK;AACL,MAAhB;IACF;;AAMsC;IAAqB;6BAExB;AACjC,UAA0B,YAAtB,6BAAyB,KAAK,GAChC;AAC2B,MAA7B,8BAAwB,KAAK;AACb,MAAhB;IACF;;AAMoC;IAAmB;2BAEtB;AAC/B,UAAwB,YAApB,2BAAuB,KAAK,GAC9B;AACyB,MAA3B,4BAAsB,KAAK;AACX,MAAhB;IACF;;AAM4C;IAA0B;kCAE7B;AACvC,UAA+B,YAA3B,kCAA8B,KAAK,GACrC;AACgC,MAAlC,mCAA6B,KAAK;AAClB,MAAhB;IACF;;AAS8C;IAAqB;6BAExB;AACzC,YAAO,AAAM,KAAD,IAAI;AAChB,UAA0B,YAAtB,6BAAyB,KAAK,GAChC;AAC2B,MAA7B,8BAAwB,KAAK;AACb,MAAhB;IACF;;AAK4C;IAAoB;4BAEvB;AACvC,YAAO,AAAM,KAAD,IAAI;AAChB,UAAyB,YAArB,4BAAwB,KAAK,GAC/B;AAC0B,MAA5B,6BAAuB,KAAK;AACZ,MAAhB;IACF;;AAMuC;IAA2B;mCAE9B;AAClC,UAAgC,YAA5B,mCAA+B,KAAK,GACtC;AACiC,MAAnC,oCAA8B,KAAK;AACd,MAArB;AAC0B,MAA1B;IACF;;;AAeE,WAAO;0BAA8B,WAAC;IACxC;;AAK6B,YAAA,AAAiB;IAAK;wBACzB;AAExB,UAAI,AAAS,QAAD,IAAI;AACU,QAAxB,wBAAmB;AACnB;;AAGF,UAAoB,YAAhB,sBAAmB,QAAQ,GAC7B;AAE+B,MAAjC,AAAiB,+BAAQ,QAAQ;AACjC,UAAI,0BAAoB,MACtB,AAAgB;IACpB;uBASkC;AAChC,UAAqB,YAAjB,wBAAoB,QAAQ,GAC9B;AAEyB,MAA3B,yBAAmB,QAAQ;AACX,MAAhB;IACF;;AAO8B;IAAgB;;AAGnB,YAAW,kBAAE;IAAW;;AAK1B;IAAa;qBAEhB;AACpB,YAAO,AAAM,KAAD,IAAI;AAChB,uBAAI,KAAK,EAAI;AACU,QAArB,sBAAgB,KAAK;AACL,QAAhB;AAC0B,QAA1B;;IAEJ;mCAG2D;;AACb,MAAtC,qCAA+B,MAAM;AAWlB,WATzB,MAAM;MAAN;AACI,6BAAQ,oBACJ,AAAmB,gCAAE,AAAW,2BAChC;AACJ,wBAAa;AACb,yBAAc;AACd,2BAAgB;AAChB,uBAAY;AACZ,yBAAc;AACd,wBAAa;;;AAEjB,oBAAI,4BAAY,wBACd,AAAO,AAAoC,MAArC,4BAAkB;AAE1B,oBAAI,0BAAwC,mDAApB,OAAY,cAAW;AACZ,QAAjC,AAAO,MAAD,iBAAiB;AACvB,YAAI,AAAa,mCAAgB,AAAW,kCAAiB;AAGe,iBAF1E,MAAM;UAAN;AACI,wDAA6B;AAC7B,6DAAkC;;;;AAExC,YAAI,AAAa,kCAAe,AAAW,kCAAiB;AAGc,iBAFxE,MAAM;UAAN;AACI,uDAA4B;AAC5B,4DAAiC;;;;;IAG3C;0BAEuC;AAC4B,MAAjE,6BAAuB,SAAS,EAAwB;IAC1D;0CAE8C;AAClC,yBAAe,AAAa,kCAAe,AAAW;AAChE,UAAI,AAAa,YAAD,IAAI,MAClB;AACQ,uBAAa,WAAC,eAAe,IAAG,YAAY,GAAG,AAAW;AAGnE,MAFD,6BACE,gDAA0B,UAAU,gBAAgB,YAAY,IAAyB;IAE7F;2CAE+C;AACnC,yBAAe,AAAa,mCAAgB,AAAW;AACjE,UAAI,AAAa,YAAD,IAAI,MAClB;AACQ,uBAAa,WAAC,eAAe,IAAG,YAAY,GAAG,AAAW;AAGnE,MAFD,6BACE,gDAA0B,UAAU,gBAAgB,YAAY,IAAyB;IAE7F;qCAEyC;AACvB,wBAAc,AAAa,mCAAgB,AAAW;AACtE,UAAI,AAAY,WAAD,IAAI,MACjB;AACc,qBAAW,mBAAa,AAAY,WAAD;AACnD,UAAI,AAAS,QAAD,IAAI,MACd;AACQ,iCAAa,eAAe,IAAG,AAAW,8BAAa,AAAS,QAAD;AAOxE,MAND,6BACE,gDACc,UAAU,gBACR,AAAS,QAAD,UAEF;IAE1B;sCAE0C;AACxB,wBAAc,AAAa,mCAAgB,AAAW;AACtE,UAAI,AAAY,WAAD,IAAI,MACjB;AACc,yBAAe,uBAAmC,aAAlB,AAAY,WAAD,UAAS;AACpE,UAAI,AAAa,YAAD,IAAI,MAClB;AACQ,iCAAa,eAAe,IAAI,AAAW,8BAAa,AAAa,YAAD;AAO7E,MAND,6BACE,gDACc,UAAU,gBACR,AAAa,YAAD,UAEN;IAE1B;mBAE2B;AACzB,aAAO;AACW,oBAAQ,AAAa,mCAAgB,iCAAqB,MAAM;AAChF,YAAI,AAAM,KAAD,IAAI,mBAAS,AAAM,KAAD,uBAAY,AAAM,KAAD,eAC1C,MAAO;AACT,uBAAK,sBAAgB,KAAK,IACxB,MAAO,MAAK;AACI,QAAlB,SAAS,AAAM,KAAD;;IAElB;uBAE+B;AAC7B,aAAc,aAAP,MAAM,KAAI;AACC,oBAAQ,AAAa,mCAAgB,iCAAqB,MAAM;AAChF,YAAI,AAAM,KAAD,IAAI,mBAAS,AAAM,KAAD,uBAAY,AAAM,KAAD,eAC1C,MAAO;AACT,uBAAK,sBAAgB,KAAK,IACxB,MAAO,MAAK;AACU,QAAxB,SAAqB,aAAZ,AAAM,KAAD,UAAS;;AAEzB,YAAO;IACT;sBAQ+B;AAC7B,eAAS,IAAI,AAAM,KAAD,QAAU,aAAF,CAAC,iBAAG,AAAM,KAAD,OAAM,IAAC,aAAD,CAAC;AAC9B,uBAAW,AAAK,qBAAW,CAAC;AACtC,uBAAK,uBAAc,QAAQ;AACzB,gBAAO;;;AAGX,YAAO;IACT;WAG0B;;;AACL,MAAb,aAAO,KAAK;AAGI,MAFtB,mBAAO,8CAAiC,QAAjC;AACH,iCAAY;AACZ,6BAAQ;;;AAC6E,MAAzF,0BAAa,2DAAuC,QAAvC;AAA8C,oCAAc;;;AACtC,MAAnC,AAAQ,oCAAY;AACmB,MAAvC,AAAY,wCAAY;IAC1B;;AAIgB,MAAd,AAAK;AACe,MAApB,AAAW;AAC2B,MAAtC,AAAQ,uCAAe;AACmB,MAA1C,AAAY,2CAAe;AAC3B,oBAAI,0BACU,AAAS,AAA+B,2DAAhB;AACxB,MAAR;IACR;;AAEyB,YAAA,AAAS,mBAAG;IAAC;;AAEZ,6CAAoB,4BAAgB;IAAU;;AAGtE,cAAQ;;;AAEJ,gBAAO,mBAAO,cAAC,AAAO,qBAAQ;;;;AAE9B,gBAAO,mBAAO,KAAK,cAAC,AAAO;;;AAE/B,YAAO;IACT;;AAGE,qBAAO;AACP,cAAQ;;;AAEJ,gBAAO,AAAK;;;;AAEZ,gBAAO,AAAK;;;AAEhB,YAAO;IACT;0BAEgC;AAC9B,qBAAO;AACP,cAAQ;;;AAEJ,gBAAO,qBAAS,KAAuB,aAAlB,AAAY,WAAD,uBAAS,AAAK;;;;AAE9C,gBAAO,qBAAS,KAAwB,aAAnB,AAAY,WAAD,wBAAU,AAAK;;;AAEnD,YAAO;IACT;;AAI+B,YAAiB,AAAI,cAArB,0BAAmB,kBAAK,oBAAuB;IAAI;6BAclB;AAC9D,YAAO,AAAY,oBAAG;AACqD,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAErD,wBAAc;AAGJ,4BAAQ,AAAU,SAAD,gBACxB,6BAAK,AAAa,wCAAqB,SAAS;AAChE,oBAAI,AAAM,KAAD;AAEM,0BAAc,AAAa,qCAAkB,AAAU,SAAD,SAAS;AAC/D,oBAAQ,AAAiC,AAAc,kBAAxC,KAAK,+BAAuB,WAAW,OAAG,WAAW;AACjF,cAA2B,oCAAC,oCAAmB,KAAK,EAAE;;AAEzC,oBAAQ,AAA8C,kBAAvC,AAAM,AAAM,KAAP,gBAAc,AAAM,AAAM,KAAP,sBAAiB,WAAW;AACnE,kBAAM,AAA0C,kBAAnC,AAAM,AAAK,KAAN,aAAW,AAAM,AAAK,KAAN,qBAAgB,WAAW;AAC1E,cAA2B,oCACzB,oCAAmB,KAAK,EAAE,AAAM,AAAM,KAAP,qBAC/B,oCAAmB,GAAG,EAAE,AAAM,AAAK,KAAN;;IAGnC;wBAUwC;AACqC,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AACnC,MAA/B,iBAAA,AAAe,cAAD,MAAI,AAAC;AACnB,YAAO,AAAa,yCAAqB,mBAAc,cAAc;IACvE;yBAauC;AACsC,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AACrD,wBAAc,AAAa,qCAAkB,aAAa,EAAE;AAEpE,iBAAY,AAAqD,qBAA5C,KAAK,KAAK,kBAAa,gCAA2B,AAAY,WAAD,MAAG;AAE1F,UAAI,uBAAiB,MACnB,AAAgC,OAAzB,AAAK,IAAD,OAAO;AAEpB,YAAO,AAAK,KAAD,OAAO,mCAA6B,IAAI;IACrD;6BAGuC;AACC,MAAtC;AACA,YAAO,AAAa;IACtB;6BAGuC;AACC,MAAtC;AACA,YAAsC,cAA/B,AAAa,qDAAoB;IAC1C;;AAIkC,YAAA,AAAa;IAAmB;uBAEnC;AAElB,sBAAY,AAAiB,iBAAL,QAAQ,AAAS,iBAAG;AAC5C,uBAAa,AAAiB,iBAAL,QAAQ,AAAS,iBAAG;AAC7C,uBAAa,AAAS,kBAAG;AACpC,UAAI,UAAU,IAAI,SAAS,IAAI,UAAU;AACvC,cAA2B,cAApB,yCAAsB;;AAIpB,uBAAa,AAAiB,iBAAL,QAAiB,aAAT,iBAAW;AAC5C,uBAAa,AAAS,iBAAG;AACpC,UAAI,UAAU,IAAI,UAAU;AACE,QAA5B,6BAAsB,KAAK;AAC3B,YAAI,UAAU,IAAwB,aAApB,AAAa,6BAA6B,aAApB,yCAAsB;AAC5D,gBAA2B,cAApB,yCAAsB;;AAE/B,YAAI,UAAU,IAAwB,aAApB,AAAa,6BAA6B,aAApB,yCAAsB;AAC5D,gBAA2B,cAApB,yCAAsB;;;AAKjC,UAAI,AAAM,KAAD;AACM,mBAAO;AAChB,oBAAQ;AACZ,iBAAS,QAAQ,GAAG,AAAM,KAAD,GAAG,AAAK,IAAD,SAAS,QAAA,AAAM,KAAD,GAAI;AAChD,cAAI,AAAK,AAAkB,IAAnB,cAAY,KAAK,MAAK,IAC5B,AAAU,QAAV,AAAM,KAAD,GAAI;;AAEb,cAA2B,cAApB,4BAAsB,KAAK;;AAER,MAA5B,6BAAsB,KAAK;AAC3B,YAAO,qBAAS,0BAAqB,AAAa;IACpD;8BAGwC;AACtC,YAAO,wBAAiB,KAAK;IAC/B;8BAGwC;AACtC,YAAO,wBAAiB,KAAK;IAC/B;oCAGoD;AACyB,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAClE,YAAO,AAAa,oDAAgC,QAAQ;IAC9D;gBAGwB;AAAa;IAAI;gBAMX,OAAuB;;;AACnD,qBAAO,sBAAiB,KAAK,EAAE,KAAK;AACpC,UAAU,uBAAN,KAAK;AACP,aAAO,WAAC;AAEK,qBAAS,AAAM,KAAD;AACR,uBAAW,AAAa,wCAAqB,MAAM;AACrD,mBAAO,AAAa,AAAK,2CAAmB,QAAQ;AACrE,YAAI,IAAI,IAAI,QAAa,eAAL,IAAI;AACP,yBAAW,IAAI;AACQ,eAAtC,AAAS,QAAD;uBAAC,OAAY,cAAW,KAAK;;AAGvC,uBAAK,uBAAiB,2BAAsB;AAEpB,UAAtB,AAAK,sBAAW,KAAK;AACO,UAA5B,AAAW,4BAAW,KAAK;;;IAGjC;kBAUkC;AACa,MAA7C,6BAAuB,AAAQ,OAAD;IAChC;qBACmC;AACjC,WAAO,WAAC;AACc,MAAtB,mBAAc,OAAO;IACvB;;AASkD,MAAhD,4BAA4C;IAC9C;;AAEE,WAAO,WAAC;AACG,MAAX;IACF;;AASoD,MAAlD,wBAAwC;IAC1C;;AASoD,MAAlD,wBAAwC;IAC1C;;AAEE,WAAO,WAAC;AACS,MAAjB;IACF;;UAYsD;AACM,MAA1D,6BAAuB,mCAA6B,KAAK;IAC3D;;UAGyC;UAAa;UAAoC;AACxF,YAAO,AAAM,KAAD,IAAI;AAChB,YAAO,AAAK,IAAD,IAAI;AAC4D,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAClE,UAAI,AAAmB,2BAAG;AACxB;;AAEiB,yBAAe,AAAa,wCAAqB,mBAAc,AAAK,IAAD,MAAG;AACtE,uBAAa,AAAG,EAAD,IAAI,OAClC,OACA,AAAa,wCAAqB,mBAAc,AAAG,EAAD,MAAG;AAErD,uBAAa,AAAa,YAAD;AACzB,yBAAe,AAAa,YAAD;AAC/B,UAAI,UAAU,IAAI;AAC6C,QAA7D,aAAa,iBAAS,AAAa,YAAD,SAAS,AAAW,UAAD;AACU,QAA/D,eAAe,iBAAS,AAAa,YAAD,SAAS,AAAW,UAAD;;AAGrC,yBAAe,gDACrB,UAAU,gBACR,YAAY,YAChB,AAAa,YAAD;AAGmB,MAA3C,6BAAuB,YAAY,EAAE,KAAK;IAC5C;;UAKkD;AACY,MAA5D,+BAAyB,mCAA6B,KAAK;IAC7D;;UAQ2C;UAAa;UAAoC;AAC1F,YAAO,AAAM,KAAD,IAAI;AAChB,YAAO,AAAK,IAAD,IAAI;AAC4D,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAClE,UAAI,AAAmB,2BAAG;AACxB;;AAEiB,0BAAgB,AAAa,wCAAqB,mBAAc,AAAK,IAAD,MAAG;AACtE,sBAAY,0BAAoB,aAAa;AAC7C,qBAAW,AAAG,EAAD,IAAI,OACnC,SAAS,GAAG,0BAAoB,AAAa,wCAAqB,mBAAc,AAAG,EAAD,MAAG;AAStF,MAPD,6BACE,gDACc,AAAU,AAAK,SAAN,4BACP,AAAS,AAAO,QAAR,0BACZ,AAAU,SAAD,aAErB,KAAK;IAET;;UAKsD;AACpD,YAAO,AAAM,KAAD,IAAI;AAC2D,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAClE,YAAO,AAAqB,8BAAG;AAC/B,UAAI,AAAmB,2BAAG;AACxB;;AAEiB,qBAAW,AAAa,wCAAqB,mBAAc,AAAqB,gCAAE;AACrF,iBAAO,AAAa,mCAAgB,QAAQ;AAC5D,UAAoB,AAAa,aAA7B,AAAS,QAAD,wBAAU,AAAK,IAAD,WAAU;AAIjC,QAHD,6BACgB,kDAAkB,AAAK,IAAD,kBAA+B,8BACnE,KAAK;;AAMN,QAHD,6BACgB,kDAAkB,AAAK,IAAD,gBAA6B,4BACjE,KAAK;;IAGX;0BAE+C;AAC7C,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BACvC,AAAwB,iCAAG,AAAY,8CAC5C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AACzI,iBAAO,AAAa,mCAAgB,QAAQ;AAE5D,UAAoB,aAAhB,AAAS,QAAD,yBAAW,AAAK,IAAD,OACzB,MAAqB,6CAAa,QAAQ;AAE5C,oBAAI;AACF,cAAO,iDAA0B,iBAAiB,AAAW;;AAE/D,YAAO,iDAA0B,AAAK,IAAD,sBAAsB,AAAK,IAAD;IACjE;0BAE+C;AAC7C,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BAC1C,AAAwB,iCAAG,AAAY,8CAC3C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AACvI,iBAAO,AAAa,mCAAgB,QAAQ;AAC5D,UAAoB,aAAhB,AAAS,QAAD,yBAAW,AAAK,IAAD,OACzB,MAAqB,6CAAa,QAAQ;AAE5C,oBAAI;AACF,cAAO,iDAA0B,iBAAiB,AAAW;;AAE/D,YAAO,iDAA0B,AAAK,IAAD,sBAAsB,AAAK,IAAD;IACjE;;UAI0B;UAAuB;AAC/C,YAAO,AAAiB,QAAT,IAAI,QAAQ,QAAQ,IAAI;AACvC,UAAI,AAAwB,iCAAG,QAAQ,IAAI,AAAwB,iCAAG,QAAQ,EAC5E;AACW,8BAAoB,oBAAS,KAAc,aAAT,QAAQ,iBAAG;AAC7C,8BAAoB,oBAAS,QAAQ,EAAE,iBAAiB;AACxD,mCAAe,sBAAe,iBAAiB;AAC/C,mCAAe,kBAAY,iBAAiB,GAAG,iBAAiB;AAI5E,MAHD,AAAa,qCACC,YAAY,YACZ,YAAY;AAEQ,MAAlC,gCAA0B,QAAQ;AACA,MAAlC,gCAA0B,QAAQ;IACpC;;AAcE,YAAO,AAAsB,kCAAG;AAChC,cAAQ;;;;AAGJ,gBAAY,sBAAS,KAAK,KAAK,kBAAiC,aAApB,4BAAsB;;;;;;;AAKlE,gBAAY,sBAAS,QAA0B,kBAAiC,aAApB,4BAAsB,AAAI;;;AAE1F,YAAO;IACT;;AAGuB,wBAAmB;AACmC,MAA3E,6BAAsB,AAAY,WAAD,qBAAqB,AAAY,WAAD;AAC7B,MAApC,wBAAkB;AACI,MAAtB,wBAAkB;AASP,4BAAkB,AAAa;AAC7B,4BAAQ,kBAAY,AAAY,WAAD,YAAY,AACnD,WAD8D,gBACvB,aAAxB,AAAa,AAAK,8CAAQ;AACyC,MAAvF,YAAO,gBAAK,KAAK,EAAE,AAAY,WAAD,iBAAiB,uBAAiB,AAAY,WAAD;AAChE,wBAAc,gBAA2B,aAAtB,AAAgB,eAAD,uBAAS,qBAAc,AAAgB,eAAD;AAChC,MAAnD,yBAAmB,0BAAoB,WAAW;AACJ,MAA9C,AAAO,mCAAuB;AACsB,MAApD,AAAO,mCAAuB,KAAK;IACrC;mCAEyC;AAC1B,0BAAgB,mBAAc,AAAU,SAAD;AACvC,0BAAgB,AAAI,mBAAE;AACzB,sBAA+C,CAAjB,aAAjB,AAAc,aAAD,OAAM,aAAa;AAC7C,sBAA+C,CAAjB,aAAjB,AAAc,aAAD,OAAM,aAAa;AAC1C,gCAAsB,AAAU,AAAgB,SAAjB,GAAG,aAAa,gBAAG,AAAc,aAAD;AAC/D,gCAAsB,AAAU,AAAgB,SAAjB,GAAG,aAAa,gBAAG,AAAc,aAAD;AAC5E,YAAO,mBAAO,mBAAmB,EAAE,mBAAmB;IACxD;kBAEwB,QAAe,iBAA8B;;AACnE,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BACvC,AAAwB,iCAAG,AAAY,8CAC5C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AAI7I,wCAAQ;AAChB,6BAAQ,2BAAoB,6BAAwB;;;AAC3C,wBAAc,AAAa,AAAiD,qCAA/B,YAAY,EAAE,4BAAmB,eAAe;AACrG,sBAAY,AAAgB,4BAAM,WAAW;AAClD,UAAI,uBAAiB,MACnB,AAA0C,YAA9B,AAAU,SAAD,OAAO;AAEjB,wBAAc,AAAa,yCAAsB,YAAY,EAAE;AAC5E,UAAI,WAAW,IAAI;AACjB,gBAAQ;;;;AAGS,6BAAyB,aAAZ,WAAW,iBAAG,AAAU,SAAD;AAOhD,YALD,YAAiB,qBACf,AAAU,SAAD,OACK,aAAd,AAAU,SAAD,QAAO,AAAW,UAAD,GAAG,GAC7B,AAAU,SAAD,QACT,AAAU,SAAD;AAEX;;;;;;;AAaC,YALD,YAAiB,qBACf,AAAU,SAAD,OACK,aAAd,AAAU,SAAD,WACT,AAAU,SAAD,QACT,WAAW;AAEb;;;;AAI8D,MAApE,YAAY,AAAU,SAAD,OAAO,mCAA6B,SAAS;AAElE,UAAI,AAAa,qBAAG;AACe,QAAjC,AAAO,MAAD,UAAU,SAAS,EAAE,KAAK;;AAEpB,yBAAmB,+BAAkB,SAAS,EAAE;AACzB,QAAnC,AAAO,MAAD,WAAW,UAAU,EAAE,KAAK;;AAGpC,uBAAI,SAAS,EAAI;AACW,QAA1B,uBAAiB,SAAS;AAC1B,YAAI,uBAAkB,MACK;gBAAV,SAAS;UAAxB,AAAc;;;IAEpB;sBAI+C,OAAc,eAA4B;UAA2B;AAClH,YAAO,AAAM,KAAD,IAAI;AAChB,YAAO,AAAc,aAAD,IAAI;AACxB,YAAO,AAAiB,gBAAD,IAAI;AAC3B,UAAI,AAAM,KAAD,IAA4B;AACC,QAApC;AACsB,QAAtB,wBAAkB;AACU,QAA5B,6BAAuB;AACE,QAAzB,0BAAoB;AACO,QAA3B,4BAAsB;AACM,QAA5B,6BAAuB;;AAE+B,MAAxD,0BAAoB,AAAM,KAAD,IAA4B;AACF,MAAnD,2CAAqC,cAAc;AACnD,oBAAI;AACmC,QAArC,8BAAwB,aAAa;AACS,QAA9C,oCAA8B,gBAAgB;;AAEhC,MAAhB;IACF;0BAEgC,QAAe;;AAC7C,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BACvC,AAAwB,iCAAG,AAAY,8CAC5C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AACzJ,qBAAO;AAGK,wCAAQ;AAAS,mBAAQ,AAAa,+BAAY;;;AAEvD,4BAAkB,AAA4B;AAC9C,4BAAkB,AAA4B;AAErD,UAAI,4CAAsC;AAC+C,QAAvF,kBAAkB,cAAc,eAAe,EAAE,GAAG;AACmC,QAAvF,kBAAkB,cAAc,eAAe,EAAE,GAAG;;AAG3C,mCAA8B,qBAClB,aAArB,AAAgB,2CAAO,eAAe,GAClB,aAApB,AAAgB,0CAAM,eAAe,GACf,aAAtB,AAAgB,4CAAQ,eAAe,GAChB,aAAvB,AAAgB,6CAAS,eAAe;AAG/B,sBAAY,AAAuB,sBAAD,OAAO,eAAe;AACtD;AACD,uBAAmB,+BAAkB,SAAS,EAAE,oBAAoB;AAC7C,MAAnC,AAAO,MAAD,WAAW,UAAU,EAAE,KAAK;IACpC;yCAcmD;AAC1C;AACM,qBAAW,cAAC,AAA0B;AACtC,wBAAkC,AAAsB,aAA1C,AAAa,0CAAS,yCAAsB,AAA0B;AACpF,sBAAY,cAAC,AAA0B;AACvC,uBAAgC,aAAnB,AAAa,yCAAQ,AAA0B;AAEzE,UAAI,yBAAmB,MACrB,AAAiD,gBAAjC,AAAgB,eAAD,MAAG;AAIpC,oBAAI,6BAAuC,aAAjB,AAAc,aAAD,OAAM;AACiC,QAA5E,wBAAkB,kBAA0B,aAAnB,AAAgB,eAAD,OAAM,SAAS,EAAE,AAAgB;AAC/C,QAA1B,2BAAqB;YAChB,eAAI,8BAAwC,aAAjB,AAAc,aAAD,OAAM;AAC0B,QAA7E,wBAAkB,kBAA0B,aAAnB,AAAgB,eAAD,OAAM,UAAU,EAAE,AAAgB;AAC/C,QAA3B,4BAAsB;;AAExB,oBAAI,4BAAsC,aAAjB,AAAc,aAAD,OAAM;AACiC,QAA3E,wBAAkB,kBAAO,AAAgB,0BAAuB,aAAnB,AAAgB,eAAD,OAAM,QAAQ;AACjD,QAAzB,0BAAoB;YACf,eAAI,+BAAyC,aAAjB,AAAc,aAAD,OAAM;AAC0B,QAA9E,wBAAkB,kBAAO,AAAgB,0BAAuB,aAAnB,AAAgB,eAAD,OAAM,WAAW;AACjD,QAA5B,6BAAuB;;AAGZ,qBAA8B,aAAnB,AAAgB,eAAD,oBAAM,AAAgB;AAChD,qBAA8B,aAAnB,AAAgB,eAAD,oBAAM,AAAgB;AAChD,sBAAY,oBAAS,oBAAS,QAAQ,EAAE,SAAS,GAAG,UAAU;AAC9D,sBAAY,oBAAS,oBAAS,QAAQ,EAAE,QAAQ,GAAG,WAAW;AAC9D,2BAAiB,kBAAO,SAAS,EAAE,SAAS;AAEzD,UAAI,AAAS,QAAD,GAAG,SAAS,IAAqB,aAAjB,AAAc,aAAD,OAAM;AACpB,QAAzB,2BAAqB;UAClB,KAAI,AAAS,QAAD,GAAG,UAAU,IAAqB,aAAjB,AAAc,aAAD,OAAM,GACnD,AAA0B,4BAAJ;AACxB,UAAI,AAAS,QAAD,GAAG,QAAQ,IAAqB,aAAjB,AAAc,aAAD,OAAM;AACpB,QAAxB,0BAAoB;UACjB,KAAI,AAAS,QAAD,GAAG,WAAW,IAAqB,aAAjB,AAAc,aAAD,OAAM,GACpD,AAA2B,6BAAJ;AAEQ,MAAjC,wBAAkB,eAAe;AAEjC,YAAO,eAAc;IACvB;sBAE4B,QAAe;;AACzC,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BACvC,AAAwB,iCAAG,AAAY,8CAC5C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AACzJ,YAAO,AAAgB,yBAAG;AACd,wCAAQ;AAAS,mBAAQ;;;AACrC,eAAsB,MAAO;AACgC,QAA3D,AAAO,MAAD,UAAU,AAAI,AAAS,GAAV,gBAAgB,eAAe,GAAG,KAAK;IAC9D;+BAGqC,QAAe;AAClD,UAAI,AAAiB,0BAAG,QAAQ,AAAgB,wBAAG;AACjD;;AAGkB,kBAAQ,AAAa,wCACvC,gDACc,AAAiB,4CACf,AAAiB;AAInC,eAAmB,MAAO,MAAK;AACyC,QAAtE,AAAO,MAAD,UAAU,AAAI,AAAS,GAAV,gBAAgB,eAAe,GAAG;;IAEzD;qBAEoC,SAAgB;AAClD,YAAO,AAAwB,AAAwB,iCAArB,AAAY,6BACvC,AAAwB,iCAAG,AAAY,8CAC5C,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;AAC5I,4BAAkB,AAAO,MAAD,MAAG;AAEnC,0BAAgB;AAChB,sBAAY;AAEjB,UAAI,oBAAc,mBAAS;AACzB,sBAAI,AAAW,2CAAe,AAAY,4BAAS,oBAAe;AAChD,UAAhB,YAAY;YACT,gBAAK,AAAW,iCAAe,yBAAmB,MACrD,AAAoB,gBAAJ;AACgC,QAAlD,wCAAkC,eAAe;;AAGnD,UAAI,aAAa;AAC8H,QAA7I,AAAgB,yBAAA,OAAhB,wBAAoB,AAAa,wCAAqB,mCAA4B,4CAAsC,+BAAxG;AACgC,QAAhD,sBAAgB,AAAQ,OAAD,SAAS,eAAe;;AAGQ,MAAzD,+BAAyB,AAAQ,OAAD,SAAS,eAAe;AAIxD,oBAAI,4BACF,AAAa,AAAsC,yBAAhC,AAAQ,OAAD,SAAS,eAAe;AAEpD,UAAI,SAAS,EACX,AAA+D,kBAAnD,AAAQ,OAAD,SAAS,eAAe,EAAE,AAAW;AAE1D,qBAAK,4BACH,AAAa,AAAsC,yBAAhC,AAAQ,OAAD,SAAS,eAAe;AAEpD,oBAAI;AACF,YAAI,AAAmC,4CAAG,MACxC,AAAyE,kBAA7D,AAAQ,OAAD,SAAS,eAAe,EAAE;AACW,QAA1D,0BAAoB,AAAQ,OAAD,SAAS;;IAExC;yBAEwC,SAAkC;AACjE,uBAAa,AAAS,AAAI,SAAJ,QAAC;AAI7B,MAHD,aAAa,kBACX,AAAW,AAAG,UAAJ,YAAU,KAAK,AAAK,kBAC9B,AAAW,AAAG,UAAJ,YAAU,KAAK,AAAK;AAM/B,MAJD,AAAQ,OAAD,WACL,iCAAkB,mCAA8B,UAAU,IACpD,uCACC;AAET,UAAI,AAAU,AAAO,SAAR,cAAW;AACf,uBAAW,AAAS,AAAI,SAAJ,QAAC;AAI3B,QAHD,WAAW,kBACT,AAAS,AAAG,QAAJ,YAAU,KAAK,AAAK,kBAC5B,AAAS,AAAG,QAAJ,YAAU,KAAK,AAAK;AAM7B,QAJD,AAAQ,OAAD,WACL,iCAAkB,iCAA4B,QAAQ,IAChD,uCACC;;IAGb;UAE2B,SAAgB;AACkC,MAA3E,6BAAsB,AAAY,qCAAoB,AAAY;AAClE,oBAAI,0CAAsB,mBAAqB;AACiE,QAA9G,AAAQ,OAAD,cAAc,uBAAkB,MAAM,EAAS,AAAK,oBAAE,sBAAM,sCAA8B;;AAElE,QAA/B,qBAAe,OAAO,EAAE,MAAM;AACgC,MAAhE,yBAAmB,OAAO,EAAE,8BAAyB;IACvD;;yBAG+C;AAAU,mDAA4B,AAAK,oBAAE,aAAO;IAAI;wBAGlD;AACd,MAA/B,0BAAoB,UAAU;AACqB,MAAzD,AAAW,UAAD,KAAK,6BAAc,eAAe;AACsC,MAAlF,AAAW,UAAD,KAAK,uDAAyC,cAAc;AACrB,MAAjD,AAAW,UAAD,KAAK,gCAAY,YAAY;AACU,MAAjD,AAAW,UAAD,KAAK,gCAAY,YAAY;AAC2C,MAAlF,AAAW,UAAD,KAAK,uCAA0B,WAAW,6BAAuB;AACZ,MAA/D,AAAW,UAAD,KAAK,6BAAc,kBAAkB;AACmB,MAAlE,AAAW,UAAD,KAAK,mCAAe,mBAAmB;AACgC,MAAjF,AAAW,UAAD,KAAK,yCAA4B,UAAU,4BAAsB;AACD,MAA1E,AAAW,UAAD,KAAK,gDAAmC,aAAa;AACM,MAArE,AAAW,UAAD,KAAK,iDAAoC,UAAU;IAC/D;;AAIE,YAAwB,iCACtB,AAAK,mCACG,eACsB;IAGlC;;;;QApgEW;QACe;QACd;QACJ;QACA;QACc;QACf;QACe;QACA;QAChB;QACA;QACC;QACM;QACL;QACC;QACO;QACW;QACpB;QACA;QACA;QACA;QACA;QACc;QACJ;QACR;QACF;QACE;QACA;QACA;QACF;QACE;QACA;QACW;QACD;QACZ;QACM;QACD;QACJ;QACD;QACU;IA+EV;IACA;IAgFF;IAaqB,kCAA4B,iCAAoB;IAahD,gCAA0B,iCAAoB;IAmCpE,6BAAuB,CAAC;IAOvB,4CAAsC;IAmYpC;IAyHF,kBAAY;IACZ,0BAAoB;IAoBpB,mBAAa;IAWb,kBAAY;IA4EA;IAmCV,qBAAe;IAyFjB,0BAAoB;IAClB;IACM;IAkGN,yBAAmB;IAQrB,sBAAqB;IA0VL;IACM;IAwBpB;IA0LF;IAkME;IACA;IACF,2BAAqB;IACrB,4BAAsB;IACtB,0BAAoB;IACpB,6BAAuB;IACrB;IA4DK,yBAAmB;IA33DxB;IACA;IACA;IAoBU;UACL,AAAU,SAAD,IAAI;UACb,AAAc,aAAD,IAAI,yBAAM;UACvB,AAAS,AAAQ,QAAT,IAAI,QAAiB,aAAT,QAAQ,IAAG;UAC/B,AAAS,AAAQ,QAAT,IAAI,QAAiB,aAAT,QAAQ,IAAG;UAC/B,AAAqB,oBAAD,IAAI;UACxB,AAAmB,kBAAD,IAAI;UAE1B,AAAS,AAA+B,QAAhC,IAAI,QAAU,AAAS,QAAD,IAAI,QAAmB,aAAT,QAAQ,kBAAI,QAAQ,sBACjE;UAEK,AAAQ,OAAD,IAAI;UAEP,WAAR,OAAO,KAAK,AAAS,QAAD,IAAI,QAAQ,AAAS,QAAD,IAAI,yBAC7C;UAEK,AAAgB,eAAD,IAAI;UACnB,AAAO,MAAD,IAAI;UACV,AAAc,aAAD,IAAI;UACjB,AAAe,cAAD,IAAI;UAClB,AAAqB,oBAAD,IAAI;UACxB,AAA2B,kBAAT,IAAI,QAA2B,AAAW,AAAO,8CAArC,kBAAkB,eAAsB;UACtE,AAAY,WAAD,IAAI;UACf,AAAsB,qBAAD,IAAI;UACzB,AAAoB,WAAT,IAAI,QAAoB,aAAZ,WAAW,KAAI;UACtC,AAAS,QAAD,IAAI;UACZ,AAAU,SAAD,IAAI;UACb,AAAiB,gBAAD,IAAI;UACpB,AAAqB,oBAAD,IAAI;UACxB,AAAoB,mBAAD,IAAI;UACvB,AAAa,YAAD,IAAI;IACV,qBAAE,wCACP,IAAI,aACC,SAAS,iBACL,aAAa,mBACX,eAAe,UACxB,MAAM,cACF,UAAU,sBACF,kBAAkB,kBACtB,cAAc;IAEnB,qBAAE,WAAW;IACH,+BAAE,qBAAqB;IAClC,qBAAa,KAAX,UAAU,QAAV,OAAc,iCAAoB;IACtC,kBAAE,QAAQ;IACV,kBAAE,QAAQ;IACX,iBAAE,OAAO;IACF,wBAAE,cAAc;IACrB,mBAAE,SAAS;IACd,gBAAE,MAAM;IACH,qBAAE,WAAW;IACZ,sBAAE,YAAY;IACV,0BAAE,oBAAoB;IAC1B,sBAAE,YAAY;IACD,mCAAE,yBAAyB;IAC1B,oCAAE,0BAA0B;IACtC,0BAAE,gBAAgB;IACd,8BAAE,oBAAoB;IACvB,6BAAE,mBAAmB;IACpB,8BAAE,oBAAoB;IACxB,4BAAE,kBAAkB;IACpB,4BAAE,kBAAkB;IAC3B,qBAAE,WAAW;IAChB,kBAAE,QAAQ;IACT,mBAAE,SAAS;IACL,yBAAE,eAAe;IACpB,sBAAE,YAAY;AA1GjC;AA2GE,UAAO,AAAY,qBAAG;AACtB,UAA0B,WAAlB,AAAY,4BAAS,WAAW,IAAI;AACX,IAA5B,iBAAoB,MAAT,QAAQ,SAAR,OAAY;AAC5B,QAAI,eAAe,IAAI,MACrB,AAAiB,AAAuB,+BAAf,eAAe;EAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoLqC,qCAAa;YAAuB,4CACpD,4CACA,2CACA,yCACA;;MAGgB,qCAAa;YAAuB,4CACpD,sCACA,sCACA,sCACA,sCACA;;MAGgB,wCAAgB;YAAuB;;AAC1E,sBAAG;AAAH;AACA,sBAAG;AAAH;;;;MAGmC,qCAAa;YAAuB,4CACpD,uCACA,yCACA;;MAGgB,0CAAkB;YAAuB,4CACzD,uCACA,sCACA;;MAGgB,wCAAgB;YAAuB;;AAC1E,sBAAG;AAAH;AACA,sBAAG;AAAH;AACA,sBAAG;AAAH;;;;;kDAjZmB;AACrB,YAAQ,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BZ;;;;AAEA,cAAO;;;AAEX,UAAO;EACT;;;MAzHa,mBAAU;;;MACV,4BAAmB;;;MAInB,oCAA2B;;;MAG3B,8BAAqB","file":"../../../../../../packages/flutter/src/rendering/editable.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__editable: editable
  };
}));

//# sourceMappingURL=editable.dart.lib.js.map
